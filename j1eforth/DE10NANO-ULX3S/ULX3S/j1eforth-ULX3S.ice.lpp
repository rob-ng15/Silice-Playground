// ----------------------- memory_ports.ice -----------
// @sylefeb - Silice standard library
// Memory port interfaces
// 2020-09-03

// single port BRAM

interface bram_port {
  output! addr,
  output! wenable,
  input   rdata,
  output! wdata,
}

// single port BROM

interface brom_port {
  output! addr,
  input   rdata,
}

// dual port BRAM

interface bram_port0 {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
}

interface bram_port1 {
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

interface bram_ports {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

// ----------------------- end of memory_ports.ice ----

// we are running the design at 50 MHz instead of the default 25 MHz

// VGA/HDMI + UART Driver Includes
// SL 2020-09-05
// Silice HDMI driver
//
// 640x480, 250MHz TMDS from 25MHz pixel clock
//
// Currently limited to the ULX3S, but should be relatively easy to port,
// pending pll and differential serial output primitives
//
// See also
// - https://www.digikey.com/eewiki/pages/viewpage.action?pageId=36569119
// - https://www.fpga4fun.com/HDMI.html
// - https://github.com/lawrie/ulx3s_examples/blob/master/hdmi/tmds_encoder.v
//
//      GNU AFFERO GENERAL PUBLIC LICENSE
//        Version 3, 19 November 2007
//      
//  A copy of the license full text is included in 
//  the distribution, please refer to it for details.

import('hdmi_clock.v')
import('differential_pair.v')
import('hdmi_differential_pairs.v')

// ----------------------------------------------------

algorithm tmds_encoder(
  input   uint8  data,
  input   uint2  ctrl,
  input   uint1  data_or_ctrl,
  output  uint10 tmds
) <autorun> {

  uint9 q_m             = 0;
  int5  dc_bias         = 0;

  // tracks 'number on ones' in input
  uint4 num_ones        := data[0,1] + data[1,1] + data[2,1] + data[3,1]
                         + data[4,1] + data[5,1] + data[6,1] + data[7,1];
  // tracks 'numbers of ones minus number of zeros' in internal byte
  int5  diff_ones_zeros := q_m[0,1] + q_m[1,1] + q_m[2,1] + q_m[3,1] 
                         + q_m[4,1] + q_m[5,1] + q_m[6,1] + q_m[7,1] - 6d4;

  // XOR chain on input
  int1  xored1          := data[1,1] ^ data[0,1];
  int1  xored2          := data[2,1] ^ xored1;
  int1  xored3          := data[3,1] ^ xored2;
  int1  xored4          := data[4,1] ^ xored3;
  int1  xored5          := data[5,1] ^ xored4;
  int1  xored6          := data[6,1] ^ xored5;
  int1  xored7          := data[7,1] ^ xored6;

  // XNOR chain on input
  int1  xnored1         := ~(data[1,1] ^ data[0,1]);
  int1  xnored2         := ~(data[2,1] ^ xnored1);
  int1  xnored3         := ~(data[3,1] ^ xnored2);
  int1  xnored4         := ~(data[4,1] ^ xnored3);
  int1  xnored5         := ~(data[5,1] ^ xnored4);
  int1  xnored6         := ~(data[6,1] ^ xnored5);
  int1  xnored7         := ~(data[7,1] ^ xnored6);
  
  always {
    // choice of encoding scheme (xor / xnor)
    if ((num_ones > 4) || (num_ones == 4 && data[0,1] == 0)) {
      q_m = { 1b0 , {xnored7,xnored6,xnored5,xnored4,xnored3,xnored2,xnored1} , data[0,1] };  
    } else {
      q_m = { 1b1 , {xored7,xored6,xored5,xored4,xored3,xored2,xored1} , data[0,1] };    
    }
    if (data_or_ctrl) {
      // output data
      if (dc_bias == 0 || diff_ones_zeros == 0) {
        tmds      = {~q_m[8,1] , q_m[8,1], (q_m[8,1] ? q_m[0,8] : ~q_m[0,8])};
        if (q_m[8,1] == 0) {
          dc_bias = dc_bias - diff_ones_zeros;
        } else {
          dc_bias = dc_bias + diff_ones_zeros;
        }
      } else {
        if (  (dc_bias > 0 && diff_ones_zeros > 0)
           || (dc_bias < 0 && diff_ones_zeros < 0) ) {
          tmds    = {1b1, q_m[8,1], ~q_m[0,8] };
          dc_bias = dc_bias + q_m[8,1] - diff_ones_zeros;
        } else {
          tmds    = {1b0,q_m};
          dc_bias = dc_bias - (~q_m[8,1]) + diff_ones_zeros;
        }
      }
    } else {
      // output control
      switch (ctrl) {
        case 2b00: { tmds = 10b1101010100; }
        case 2b01: { tmds = 10b0010101011; }
        case 2b10: { tmds = 10b0101010100; }
        case 2b11: { tmds = 10b1010101011; }
      }
      dc_bias = 0;
    }
  }

}

// ----------------------------------------------------

algorithm hdmi_ddr_shifter(
  input   uint10 data_r,
  input   uint10 data_g,
  input   uint10 data_b,
  output  uint8  outbits,
) <autorun> {
  uint3  mod5    = 0;
  uint10 shift_r = 0;
  uint10 shift_g = 0;
  uint10 shift_b = 0;
  uint2  clkbits = 0;
  always {
    shift_r = (mod5 == 0) ?  data_r : shift_r[2,8];
    shift_g = (mod5 == 0) ?  data_g : shift_g[2,8];
    shift_b = (mod5 == 0) ?  data_b : shift_b[2,8];
    clkbits = (mod5[0,2] < 2) ? 2b11 : ( (mod5 > 2) ? 2b00 : 2b01 );
    outbits = { clkbits , shift_b[0,2] , shift_g[0,2] , shift_r[0,2] };
    mod5    = (mod5 == 4) ? 0 : (mod5 + 1);
  }
}

// ----------------------------------------------------

// Expects to run at 25 MHz (hdmi pixel clock)
algorithm hdmi(
  output  uint10 x,
  output  uint10 y,
  output  uint1  active,
  output  uint1  vblank,
  output! uint4  gpdi_dp,
  output! uint4  gpdi_dn,
  input   uint8  red,
  input   uint8  green,
  input   uint8  blue,
) <autorun> {
    
  uint10 cntx  = 0;
  uint10 cnty  = 0;
  
  uint1  hsync = 0;
  uint1  vsync = 0;
  
  // pll for tmds
  uint1  half_hdmi_clk = uninitialized;
  hdmi_clock pll(
    clk      <: clock,              //  25 MHz
    half_hdmi_clk :> half_hdmi_clk, // 125 MHz (half 250MHz HDMI, double data rate output)
  );
  
  uint2  null_ctrl  = 0;
  uint2  sync_ctrl  = 0;
  uint10 tmds_red   = 0;
  uint10 tmds_green = 0;
  uint10 tmds_blue  = 0;

  uint8  latch_red   = 0;
  uint8  latch_green = 0;
  uint8  latch_blue  = 0;
  uint2  prev_sync_ctrl = 0;
  uint1  prev_active    = 0;

  // encoders
  // => we use <:: to bind values from cycle start (ignoring changes during current cycle)
  tmds_encoder tmdsR(
    data        <:: latch_red,
    ctrl        <:: null_ctrl,
    data_or_ctrl<:: prev_active,
    tmds         :> tmds_red
  );
  tmds_encoder tmdsG(
    data        <:: latch_green,
    ctrl        <:: null_ctrl,
    data_or_ctrl<:: prev_active,
    tmds         :> tmds_green
  );
  tmds_encoder tmdsB(
    data        <:: latch_blue,
    ctrl        <:: prev_sync_ctrl,
    data_or_ctrl<:: prev_active,
    tmds         :> tmds_blue
  );

  // shifter
  uint8 crgb_pos = 0;
  hdmi_ddr_shifter shift<@half_hdmi_clk>(
    data_r  <: tmds_red,
    data_g  <: tmds_green,
    data_b  <: tmds_blue,
    outbits :> crgb_pos,
  );

  uint8 crgb_neg := ~ crgb_pos;
  
  hdmi_differential_pairs hdmi_out( 
    clock   <: half_hdmi_clk,
    pos     <: crgb_pos, 
    neg     <: crgb_neg, 
    out_pos :> gpdi_dp, 
    out_neg :> gpdi_dn );

  always {

    // record previous state of sync_ctrl and active,
    // we receive the r,b,g value for the x,y set below with a one cycle latency
    // these are then latched for the following cycle
    // thus we have to delay corresponding sync and active two cycles
    prev_sync_ctrl = sync_ctrl;
    prev_active    = active;

    // synchronization bits
    hsync          = (cntx > 655) && (cntx < 752);
    vsync          = (cnty > 489) && (cnty < 492);
    sync_ctrl      = {vsync,hsync};    
    // output active area
    active         = (cntx < 640) && (cnty < 480);    
    // output vblank
    vblank         = (cnty >= 480);
    // output x,y
    x              = cntx;
    y              = cnty; 
    // => we will get color result on next cycle   

    // update coordinates
    cnty        = (cntx == 799) ? (cnty == 524 ? 0 : (cnty + 1)) : cnty;
    cntx        = (cntx == 799) ? 0 : (cntx + 1);
    
    // latch r,b,g received at this cycle, for previous coord
    // will be fed into HDMI encoders next cycle
    latch_red   = red;
    latch_green = green;
    latch_blue  = blue;

  }
}

// ----------------------------------------------------

// @sylefeb, 2020-10-08, simple UART in Silice
//
//      GNU AFFERO GENERAL PUBLIC LICENSE
//        Version 3, 19 November 2007
//      
//  A copy of the license full text is included in 
//  the distribution, please refer to it for details.

// UART config



// sender

// -> interface

group uart_out
{
  uint8 data_in = 0,
  uint1 data_in_ready = 0,
  uint1 busy = 0,
}

interface io_uart_out
{
  input  data_in,
  input  data_in_ready,
  output busy,
}

// -> algorithm

algorithm uart_sender(
  io_uart_out  io,
  output uint1 uart_tx
) <autorun> {
  
  uint10 interval      = 434;
  uint10 counter       = 0;

  uint11 transmit      = 0;

  always {    

    if (transmit > 1) {
      // keep transmitting
      if (counter == 0) {
        // keep going
        uart_tx  = transmit[0,1];
        transmit = {1b0,transmit[1,10]}; // goes to zero when done
      }
      counter = (counter == interval) ? 0 : (counter + 1);
    } else {
      // done
      uart_tx = 1;
      io.busy = 0;
      if (io.data_in_ready) {
        // start transmitting
        io.busy  = 1;
        transmit = {1b1,1b0,io.data_in,1b0};
      }
    }
  }

  uart_tx = 1;

}

// receiver

// -> interface

group uart_in
{
  uint8 data_out = 0,
  uint1 data_out_ready = 0,
}

interface io_uart_in
{
  output data_out,
  output data_out_ready,
}

// -> algorithm

algorithm uart_receiver(
  io_uart_in  io,
  input uint1 uart_rx
) <autorun> {
  
  uint10 interval      = 434;
  uint10 half_interval = 217;
  uint10 counter       = 0;

  uint4  receiving     = 0;
  uint10 received      = 0;

  uint1  latched_rx    = 0;

  always {     

    io.data_out_ready = 0; // maintain low

    if (receiving == 0) {
      if (latched_rx == 0) {
        // start receiving
        receiving = 10; // expecting 10 bits: start - data x8 - stop
        received  =  0;
        counter   = half_interval; // wait half-period
      }
    } else {
      if (counter == 0) { // right in the middle
        received  = {latched_rx,received[1,9]}; // read uart rx
        receiving = receiving - 1;
        counter   = interval;
        if (receiving == 0) {
          // done
          io.data_out       = received[1,8];
          io.data_out_ready = 1;
        }
      } else {
        counter   = counter - 1;
      }
    }

    latched_rx = uart_rx;

  }

}


// Multiplexed Display Includes
algorithm multiplex_display(
    input   uint10 pix_x,
    input   uint10 pix_y,
    input   uint1  pix_active,
    input   uint1  pix_vblank,
    output! uint6 pix_red,
    output! uint6 pix_green,
    output! uint6 pix_blue,

    // BACKGROUND
    input uint2 background_r,
    input uint2 background_g,
    input uint2 background_b,

    // TILEMAP
    input uint2 tilemap_r,
    input uint2 tilemap_g,
    input uint2 tilemap_b,
    input uint1 tilemap_display,
    
    // LOWER SPRITES
    input uint2 lower_sprites_r,
    input uint2 lower_sprites_g,
    input uint2 lower_sprites_b,
    input uint1 lower_sprites_display,

    // BITMAP
    input uint2 bitmap_r,
    input uint2 bitmap_g,
    input uint2 bitmap_b,
    input uint1 bitmap_display,

    // UPPER SPRITES
    input uint2 upper_sprites_r,
    input uint2 upper_sprites_g,
    input uint2 upper_sprites_b,
    input uint1 upper_sprites_display,

    // CHARACTER MAP
    input uint2 character_map_r,
    input uint2 character_map_g,
    input uint2 character_map_b,
    input uint1 character_map_display,
    
    // TERMINAL
    input uint2 terminal_r,
    input uint2 terminal_g,
    input uint2 terminal_b,
    input uint1 terminal_display
) <autorun> {
    // Output defaults to 0
    pix_red   := 0;
    pix_green := 0;
    pix_blue  := 0;
        
    // Draw the screen
    while (1) {        
        // wait until pix_active THEN BACKGROUND -> TILEMAP -> LOWER SPRITES -> BITMAP -> UPPER SPRITES -> CHARACTER MAP -> TERMINAL
        if( pix_active ) {
            // Select the 2 bit r g or b and expand to 6 bit r g or b
            pix_red = ( terminal_display ) ? { {3{terminal_r}} } :
                        ( character_map_display ) ? { {3{character_map_r}} } :
                        ( upper_sprites_display ) ? { {3{upper_sprites_r}} } :
                        ( bitmap_display ) ? { {3{bitmap_r}} } :
                        ( lower_sprites_display ) ? { {3{lower_sprites_r}} } :
                        ( tilemap_display ) ? { {3{tilemap_r}} } :
                        { {3{background_r}} };
            pix_green = ( terminal_display ) ? { {3{terminal_g}} } :
                        ( character_map_display ) ? { {3{character_map_g}} } :
                        ( upper_sprites_display ) ? { {3{upper_sprites_g}} } :
                        ( bitmap_display ) ? { {3{bitmap_g}} } :
                        ( lower_sprites_display ) ? { {3{lower_sprites_g}} } :
                        ( tilemap_display ) ? { {3{tilemap_g}} } :
                        { {3{background_g}} };
            pix_blue = ( terminal_display ) ? { {3{terminal_b}} } :
                        ( character_map_display ) ? { {3{character_map_b}} } :
                        ( upper_sprites_display ) ? { {3{upper_sprites_b}} } :
                        ( bitmap_display ) ? { {3{bitmap_b}} } :
                        ( lower_sprites_display ) ? { {3{lower_sprites_b}} } :
                        ( tilemap_display ) ? { {3{tilemap_b}} } :
                        { {3{background_b}} };
        } // pix_active
    }
}

// Create 1hz (1 second counter, also can output the baseline 50MHz counter)
algorithm pulse1hz(
    output uint32 counter50mhz,
    output uint16 counter1hz,
    input  uint1  resetCounter
) <autorun> {
    counter50mhz = 0;
    counter1hz = 0;
    
    while (1) {
        if( resetCounter == 1) {
            counter1hz = 0;
            counter50mhz = 0;
        } else {
            counter1hz = ( counter50mhz == 50000000 ) ? counter1hz + 1 : counter1hz;
            counter50mhz = ( counter50mhz == 50000000 ) ? 0 : counter50mhz + 1;
        }
    }
}

// Create 1khz (1 milli-second counter)
algorithm pulse1khz(
    output uint16 counter1khz,
    input  uint16 resetCount,
    input  uint1  resetCounter
) <autorun> {
    uint32 counter50mhz = 0;
    
    while (1) {
        if( resetCounter == 1 ) {
            counter1khz = resetCount;
            counter50mhz = 0;
        } else {
            counter1khz = ( counter1khz == 0 ) ? 0 : ( counter50mhz == 50000 ) ? counter1khz - 1 : counter1khz;
            counter50mhz = ( counter50mhz == 50000 ) ? 0 : counter50mhz + 1;
        }
    }
}

// 16 bit random number generator
// Translation into Silice of LFSR_Plus.v
algorithm random(
    output  uint16  g_noise_out,
    output  uint16  u_noise_out,
    input   uint1   resetRandom
) <autorun> {
    uint16  rand_out = 0;
    uint16  rand_ff = 24b011000110111011010011101;
    uint18  rand_en_ff = 24b001100010011011101100101;
    uint16  temp_u_noise3 = 0;
    uint16  temp_u_noise2 = 0;
    uint16  temp_u_noise1 = 0;
    uint16  temp_u_noise0 = 0;
    uint16  temp_g_noise_nxt = uninitialized;
    
    always {
        rand_en_ff = {(rand_en_ff[7,1] ^ rand_en_ff[0,1]) , rand_en_ff[1,17]};
        rand_ff = { ( rand_ff[5,1] ^ rand_ff[3,1] ^ rand_ff[2,1] ^ rand_ff[0,1]) , rand_ff[1,15] };
        g_noise_out = ( rand_en_ff[17,1] ) ? temp_g_noise_nxt : ( rand_en_ff[10,1] ) ? rand_out : g_noise_out;
    }
    
    while(1) {
        if( resetRandom ) {
            rand_en_ff = 24b001100010011011101100101;
            rand_ff = 24b011000110111011010011101;
            rand_out = 0;
            temp_u_noise3 = 0;
            temp_u_noise2 = 0;
            temp_u_noise1 = 0;
            temp_u_noise0 = 0;
            g_noise_out = 0;
        } else {
            rand_out = rand_ff;
            temp_u_noise3 = { rand_out[15,1], rand_out[15,1], rand_out[2,13] };
            temp_u_noise2 = temp_u_noise3;
            temp_u_noise1 = temp_u_noise2;
            temp_u_noise0 = temp_u_noise1;
            temp_g_noise_nxt = ( rand_en_ff[9,1] ) ? temp_u_noise3 + temp_u_noise2 + temp_u_noise1 + temp_u_noise0 + g_noise_out : temp_u_noise3 + temp_u_noise2 + temp_u_noise1 + temp_u_noise0;
            u_noise_out = ( rand_en_ff[17,1] ) ? rand_out : u_noise_out;
        }
    }
}

algorithm terminal(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint2   pix_red,
    output! uint2   pix_green,
    output! uint2   pix_blue,
    output! uint1   terminal_display,
    
    input   uint8   terminal_character,
    input   uint1   terminal_write,
    input   uint1   showterminal,
    input   uint1   showcursor,
    input   uint1   timer1hz,
    output  uint3    terminal_active
) <autorun> {
    // Character ROM 8x8 x 256
    brom uint8 characterGenerator8x8[] = {
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h7e, 8h81, 8ha5, 8h81, 8hbd, 8h99, 8h81, 8h7e,
    8h7e, 8hff, 8hdb, 8hff, 8hc3, 8he7, 8hff, 8h7e,
    8h6c, 8hfe, 8hfe, 8hfe, 8h7c, 8h38, 8h10, 8h00,
    8h10, 8h38, 8h7c, 8hfe, 8h7c, 8h38, 8h10, 8h00,
    8h38, 8h7c, 8h38, 8hfe, 8hfe, 8h7c, 8h38, 8h7c,
    8h10, 8h10, 8h38, 8h7c, 8hfe, 8h7c, 8h38, 8h7c,
    8h00, 8h00, 8h18, 8h3c, 8h3c, 8h18, 8h00, 8h00,
    8hff, 8hff, 8he7, 8hc3, 8hc3, 8he7, 8hff, 8hff,
    8h00, 8h3c, 8h66, 8h42, 8h42, 8h66, 8h3c, 8h00,
    8hff, 8hc3, 8h99, 8hbd, 8hbd, 8h99, 8hc3, 8hff,
    8h0f, 8h07, 8h0f, 8h7d, 8hcc, 8hcc, 8hcc, 8h78,
    8h3c, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h7e, 8h18,
    8h3f, 8h33, 8h3f, 8h30, 8h30, 8h70, 8hf0, 8he0,
    8h7f, 8h63, 8h7f, 8h63, 8h63, 8h67, 8he6, 8hc0,
    8h99, 8h5a, 8h3c, 8he7, 8he7, 8h3c, 8h5a, 8h99,
    8h80, 8he0, 8hf8, 8hfe, 8hf8, 8he0, 8h80, 8h00,
    8h02, 8h0e, 8h3e, 8hfe, 8h3e, 8h0e, 8h02, 8h00,
    8h18, 8h3c, 8h7e, 8h18, 8h18, 8h7e, 8h3c, 8h18,
    8h66, 8h66, 8h66, 8h66, 8h66, 8h00, 8h66, 8h00,
    8h7f, 8hdb, 8hdb, 8h7b, 8h1b, 8h1b, 8h1b, 8h00,
    8h3e, 8h63, 8h38, 8h6c, 8h6c, 8h38, 8hcc, 8h78,
    8h00, 8h00, 8h00, 8h00, 8h7e, 8h7e, 8h7e, 8h00,
    8h18, 8h3c, 8h7e, 8h18, 8h7e, 8h3c, 8h18, 8hff,
    8h18, 8h3c, 8h7e, 8h18, 8h18, 8h18, 8h18, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h7e, 8h3c, 8h18, 8h00,
    8h00, 8h18, 8h0c, 8hfe, 8h0c, 8h18, 8h00, 8h00,
    8h00, 8h30, 8h60, 8hfe, 8h60, 8h30, 8h00, 8h00,
    8h00, 8h00, 8hc0, 8hc0, 8hc0, 8hfe, 8h00, 8h00,
    8h00, 8h24, 8h66, 8hff, 8h66, 8h24, 8h00, 8h00,
    8h00, 8h18, 8h3c, 8h7e, 8hff, 8hff, 8h00, 8h00,
    8h00, 8hff, 8hff, 8h7e, 8h3c, 8h18, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h30, 8h78, 8h78, 8h30, 8h30, 8h00, 8h30, 8h00,
    8h6c, 8h6c, 8h6c, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h6c, 8h6c, 8hfe, 8h6c, 8hfe, 8h6c, 8h6c, 8h00,
    8h30, 8h7c, 8hc0, 8h78, 8h0c, 8hf8, 8h30, 8h00,
    8h00, 8hc6, 8hcc, 8h18, 8h30, 8h66, 8hc6, 8h00,
    8h38, 8h6c, 8h38, 8h76, 8hdc, 8hcc, 8h76, 8h00,
    8h60, 8h60, 8hc0, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h30, 8h60, 8h60, 8h60, 8h30, 8h18, 8h00,
    8h60, 8h30, 8h18, 8h18, 8h18, 8h30, 8h60, 8h00,
    8h00, 8h66, 8h3c, 8hff, 8h3c, 8h66, 8h00, 8h00,
    8h00, 8h30, 8h30, 8hfc, 8h30, 8h30, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h30, 8h30, 8h60,
    8h00, 8h00, 8h00, 8hfc, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h30, 8h30, 8h00,
    8h06, 8h0c, 8h18, 8h30, 8h60, 8hc0, 8h80, 8h00,
    8h7c, 8hc6, 8hce, 8hde, 8hf6, 8he6, 8h7c, 8h00,
    8h30, 8h70, 8h30, 8h30, 8h30, 8h30, 8hfc, 8h00,
    8h78, 8hcc, 8h0c, 8h38, 8h60, 8hcc, 8hfc, 8h00,
    8h78, 8hcc, 8h0c, 8h38, 8h0c, 8hcc, 8h78, 8h00,
    8h1c, 8h3c, 8h6c, 8hcc, 8hfe, 8h0c, 8h1e, 8h00,
    8hfc, 8hc0, 8hf8, 8h0c, 8h0c, 8hcc, 8h78, 8h00,
    8h38, 8h60, 8hc0, 8hf8, 8hcc, 8hcc, 8h78, 8h00,
    8hfc, 8hcc, 8h0c, 8h18, 8h30, 8h30, 8h30, 8h00,
    8h78, 8hcc, 8hcc, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h78, 8hcc, 8hcc, 8h7c, 8h0c, 8h18, 8h70, 8h00,
    8h00, 8h30, 8h30, 8h00, 8h00, 8h30, 8h30, 8h00,
    8h00, 8h30, 8h30, 8h00, 8h00, 8h30, 8h30, 8h60,
    8h18, 8h30, 8h60, 8hc0, 8h60, 8h30, 8h18, 8h00,
    8h00, 8h00, 8hfc, 8h00, 8h00, 8hfc, 8h00, 8h00,
    8h60, 8h30, 8h18, 8h0c, 8h18, 8h30, 8h60, 8h00,
    8h78, 8hcc, 8h0c, 8h18, 8h30, 8h00, 8h30, 8h00,
    8h7c, 8hc6, 8hde, 8hde, 8hde, 8hc0, 8h78, 8h00,
    8h30, 8h78, 8hcc, 8hcc, 8hfc, 8hcc, 8hcc, 8h00,
    8hfc, 8h66, 8h66, 8h7c, 8h66, 8h66, 8hfc, 8h00,
    8h3c, 8h66, 8hc0, 8hc0, 8hc0, 8h66, 8h3c, 8h00,
    8hf8, 8h6c, 8h66, 8h66, 8h66, 8h6c, 8hf8, 8h00,
    8hfe, 8h62, 8h68, 8h78, 8h68, 8h62, 8hfe, 8h00,
    8hfe, 8h62, 8h68, 8h78, 8h68, 8h60, 8hf0, 8h00,
    8h3c, 8h66, 8hc0, 8hc0, 8hce, 8h66, 8h3e, 8h00,
    8hcc, 8hcc, 8hcc, 8hfc, 8hcc, 8hcc, 8hcc, 8h00,
    8h78, 8h30, 8h30, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h1e, 8h0c, 8h0c, 8h0c, 8hcc, 8hcc, 8h78, 8h00,
    8he6, 8h66, 8h6c, 8h78, 8h6c, 8h66, 8he6, 8h00,
    8hf0, 8h60, 8h60, 8h60, 8h62, 8h66, 8hfe, 8h00,
    8hc6, 8hee, 8hfe, 8hfe, 8hd6, 8hc6, 8hc6, 8h00,
    8hc6, 8he6, 8hf6, 8hde, 8hce, 8hc6, 8hc6, 8h00,
    8h38, 8h6c, 8hc6, 8hc6, 8hc6, 8h6c, 8h38, 8h00,
    8hfc, 8h66, 8h66, 8h7c, 8h60, 8h60, 8hf0, 8h00,
    8h78, 8hcc, 8hcc, 8hcc, 8hdc, 8h78, 8h1c, 8h00,
    8hfc, 8h66, 8h66, 8h7c, 8h6c, 8h66, 8he6, 8h00,
    8h78, 8hcc, 8he0, 8h70, 8h1c, 8hcc, 8h78, 8h00,
    8hfc, 8hb4, 8h30, 8h30, 8h30, 8h30, 8h78, 8h00,
    8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hfc, 8h00,
    8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h78, 8h30, 8h00,
    8hc6, 8hc6, 8hc6, 8hd6, 8hfe, 8hee, 8hc6, 8h00,
    8hc6, 8hc6, 8h6c, 8h38, 8h38, 8h6c, 8hc6, 8h00,
    8hcc, 8hcc, 8hcc, 8h78, 8h30, 8h30, 8h78, 8h00,
    8hfe, 8hc6, 8h8c, 8h18, 8h32, 8h66, 8hfe, 8h00,
    8h78, 8h60, 8h60, 8h60, 8h60, 8h60, 8h78, 8h00,
    8hc0, 8h60, 8h30, 8h18, 8h0c, 8h06, 8h02, 8h00,
    8h78, 8h18, 8h18, 8h18, 8h18, 8h18, 8h78, 8h00,
    8h10, 8h38, 8h6c, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff,
    8h30, 8h30, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8h76, 8h00,
    8he0, 8h60, 8h60, 8h7c, 8h66, 8h66, 8hdc, 8h00,
    8h00, 8h00, 8h78, 8hcc, 8hc0, 8hcc, 8h78, 8h00,
    8h1c, 8h0c, 8h0c, 8h7c, 8hcc, 8hcc, 8h76, 8h00,
    8h00, 8h00, 8h78, 8hcc, 8hfc, 8hc0, 8h78, 8h00,
    8h38, 8h6c, 8h60, 8hf0, 8h60, 8h60, 8hf0, 8h00,
    8h00, 8h00, 8h76, 8hcc, 8hcc, 8h7c, 8h0c, 8hf8,
    8he0, 8h60, 8h6c, 8h76, 8h66, 8h66, 8he6, 8h00,
    8h30, 8h00, 8h70, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h0c, 8h00, 8h0c, 8h0c, 8h0c, 8hcc, 8hcc, 8h78,
    8he0, 8h60, 8h66, 8h6c, 8h78, 8h6c, 8he6, 8h00,
    8h70, 8h30, 8h30, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h00, 8h00, 8hcc, 8hfe, 8hfe, 8hd6, 8hc6, 8h00,
    8h00, 8h00, 8hf8, 8hcc, 8hcc, 8hcc, 8hcc, 8h00,
    8h00, 8h00, 8h78, 8hcc, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8h00, 8hdc, 8h66, 8h66, 8h7c, 8h60, 8hf0,
    8h00, 8h00, 8h76, 8hcc, 8hcc, 8h7c, 8h0c, 8h1e,
    8h00, 8h00, 8hdc, 8h76, 8h66, 8h60, 8hf0, 8h00,
    8h00, 8h00, 8h7c, 8hc0, 8h78, 8h0c, 8hf8, 8h00,
    8h10, 8h30, 8h7c, 8h30, 8h30, 8h34, 8h18, 8h00,
    8h00, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00,
    8h00, 8h00, 8hcc, 8hcc, 8hcc, 8h78, 8h30, 8h00,
    8h00, 8h00, 8hc6, 8hd6, 8hfe, 8hfe, 8h6c, 8h00,
    8h00, 8h00, 8hc6, 8h6c, 8h38, 8h6c, 8hc6, 8h00,
    8h00, 8h00, 8hcc, 8hcc, 8hcc, 8h7c, 8h0c, 8hf8,
    8h00, 8h00, 8hfc, 8h98, 8h30, 8h64, 8hfc, 8h00,
    8h1c, 8h30, 8h30, 8he0, 8h30, 8h30, 8h1c, 8h00,
    8h18, 8h18, 8h18, 8h00, 8h18, 8h18, 8h18, 8h00,
    8he0, 8h30, 8h30, 8h1c, 8h30, 8h30, 8he0, 8h00,
    8h76, 8hdc, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h10, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8h00,
    8h78, 8hcc, 8hc0, 8hcc, 8h78, 8h18, 8h0c, 8h78,
    8h00, 8hcc, 8h00, 8hcc, 8hcc, 8hcc, 8h7e, 8h00,
    8h1c, 8h00, 8h78, 8hcc, 8hfc, 8hc0, 8h78, 8h00,
    8h7e, 8hc3, 8h3c, 8h06, 8h3e, 8h66, 8h3f, 8h00,
    8hcc, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8h7e, 8h00,
    8he0, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8h7e, 8h00,
    8h30, 8h30, 8h78, 8h0c, 8h7c, 8hcc, 8h7e, 8h00,
    8h00, 8h00, 8h78, 8hc0, 8hc0, 8h78, 8h0c, 8h38,
    8h7e, 8hc3, 8h3c, 8h66, 8h7e, 8h60, 8h3c, 8h00,
    8hcc, 8h00, 8h78, 8hcc, 8hfc, 8hc0, 8h78, 8h00,
    8he0, 8h00, 8h78, 8hcc, 8hfc, 8hc0, 8h78, 8h00,
    8hcc, 8h00, 8h70, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h7c, 8hc6, 8h38, 8h18, 8h18, 8h18, 8h3c, 8h00,
    8he0, 8h00, 8h70, 8h30, 8h30, 8h30, 8h78, 8h00,
    8hc6, 8h38, 8h6c, 8hc6, 8hfe, 8hc6, 8hc6, 8h00,
    8h30, 8h30, 8h00, 8h78, 8hcc, 8hfc, 8hcc, 8h00,
    8h1c, 8h00, 8hfc, 8h60, 8h78, 8h60, 8hfc, 8h00,
    8h00, 8h00, 8h7f, 8h0c, 8h7f, 8hcc, 8h7f, 8h00,
    8h3e, 8h6c, 8hcc, 8hfe, 8hcc, 8hcc, 8hce, 8h00,
    8h78, 8hcc, 8h00, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8hcc, 8h00, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8he0, 8h00, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h78, 8hcc, 8h00, 8hcc, 8hcc, 8hcc, 8h7e, 8h00,
    8h00, 8he0, 8h00, 8hcc, 8hcc, 8hcc, 8h7e, 8h00,
    8h00, 8hcc, 8h00, 8hcc, 8hcc, 8h7c, 8h0c, 8hf8,
    8hc3, 8h18, 8h3c, 8h66, 8h66, 8h3c, 8h18, 8h00,
    8hcc, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8h78, 8h00,
    8h18, 8h18, 8h7e, 8hc0, 8hc0, 8h7e, 8h18, 8h18,
    8h38, 8h6c, 8h64, 8hf0, 8h60, 8he6, 8hfc, 8h00,
    8hcc, 8hcc, 8h78, 8hfc, 8h30, 8hfc, 8h30, 8h30,
    8hf8, 8hcc, 8hcc, 8hfa, 8hc6, 8hcf, 8hc6, 8hc7,
    8h0e, 8h1b, 8h18, 8h3c, 8h18, 8h18, 8hd8, 8h70,
    8h1c, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8h7e, 8h00,
    8h38, 8h00, 8h70, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h00, 8h1c, 8h00, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8h1c, 8h00, 8hcc, 8hcc, 8hcc, 8h7e, 8h00,
    8h00, 8hf8, 8h00, 8hf8, 8hcc, 8hcc, 8hcc, 8h00,
    8hfc, 8h00, 8hcc, 8hec, 8hfc, 8hdc, 8hcc, 8h00,
    8h3c, 8h6c, 8h6c, 8h3e, 8h00, 8h7e, 8h00, 8h00,
    8h38, 8h6c, 8h6c, 8h38, 8h00, 8h7c, 8h00, 8h00,
    8h30, 8h00, 8h30, 8h60, 8hc0, 8hcc, 8h78, 8h00,
    8h00, 8h00, 8h00, 8hfc, 8hc0, 8hc0, 8h00, 8h00,
    8h00, 8h00, 8h00, 8hfc, 8h0c, 8h0c, 8h00, 8h00,
    8hc3, 8hc6, 8hcc, 8hde, 8h33, 8h66, 8hcc, 8h0f,
    8hc3, 8hc6, 8hcc, 8hdb, 8h37, 8h6f, 8hcf, 8h03,
    8h18, 8h18, 8h00, 8h18, 8h18, 8h18, 8h18, 8h00,
    8h00, 8h33, 8h66, 8hcc, 8h66, 8h33, 8h00, 8h00,
    8h00, 8hcc, 8h66, 8h33, 8h66, 8hcc, 8h00, 8h00,
    8h22, 8h88, 8h22, 8h88, 8h22, 8h88, 8h22, 8h88,
    8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa,
    8hdb, 8h77, 8hdb, 8hee, 8hdb, 8h77, 8hdb, 8hee,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8hf8, 8h18, 8h18, 8h18,
    8h18, 8h18, 8hf8, 8h18, 8hf8, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8hf6, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8hfe, 8h36, 8h36, 8h36,
    8h00, 8h00, 8hf8, 8h18, 8hf8, 8h18, 8h18, 8h18,
    8h36, 8h36, 8hf6, 8h06, 8hf6, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8hfe, 8h06, 8hf6, 8h36, 8h36, 8h36,
    8h36, 8h36, 8hf6, 8h06, 8hfe, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8hfe, 8h00, 8h00, 8h00,
    8h18, 8h18, 8hf8, 8h18, 8hf8, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hf8, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h1f, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8hff, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hff, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h1f, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8hff, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h1f, 8h18, 8h1f, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8h37, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h37, 8h30, 8h3f, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3f, 8h30, 8h37, 8h36, 8h36, 8h36,
    8h36, 8h36, 8hf7, 8h00, 8hff, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hff, 8h00, 8hf7, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h37, 8h30, 8h37, 8h36, 8h36, 8h36,
    8h00, 8h00, 8hff, 8h00, 8hff, 8h00, 8h00, 8h00,
    8h36, 8h36, 8hf7, 8h00, 8hf7, 8h36, 8h36, 8h36,
    8h18, 8h18, 8hff, 8h00, 8hff, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8hff, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hff, 8h00, 8hff, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8hff, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h3f, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h1f, 8h18, 8h1f, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1f, 8h18, 8h1f, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8h3f, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8hff, 8h36, 8h36, 8h36,
    8h18, 8h18, 8hff, 8h18, 8hff, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8hf8, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h1f, 8h18, 8h18, 8h18,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff,
    8h00, 8h00, 8h00, 8h00, 8hff, 8hff, 8hff, 8hff,
    8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0,
    8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f,
    8hff, 8hff, 8hff, 8hff, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h76, 8hdc, 8hc8, 8hdc, 8h76, 8h00,
    8h00, 8h78, 8hcc, 8hf8, 8hcc, 8hf8, 8hc0, 8hc0,
    8h00, 8hfc, 8hcc, 8hc0, 8hc0, 8hc0, 8hc0, 8h00,
    8h00, 8hfe, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h00,
    8hfc, 8hcc, 8h60, 8h30, 8h60, 8hcc, 8hfc, 8h00,
    8h00, 8h00, 8h7e, 8hd8, 8hd8, 8hd8, 8h70, 8h00,
    8h00, 8h66, 8h66, 8h66, 8h66, 8h7c, 8h60, 8hc0,
    8h00, 8h76, 8hdc, 8h18, 8h18, 8h18, 8h18, 8h00,
    8hfc, 8h30, 8h78, 8hcc, 8hcc, 8h78, 8h30, 8hfc,
    8h38, 8h6c, 8hc6, 8hfe, 8hc6, 8h6c, 8h38, 8h00,
    8h38, 8h6c, 8hc6, 8hc6, 8h6c, 8h6c, 8hee, 8h00,
    8h1c, 8h30, 8h18, 8h7c, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8h00, 8h7e, 8hdb, 8hdb, 8h7e, 8h00, 8h00,
    8h06, 8h0c, 8h7e, 8hdb, 8hdb, 8h7e, 8h60, 8hc0,
    8h38, 8h60, 8hc0, 8hf8, 8hc0, 8h60, 8h38, 8h00,
    8h78, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h00,
    8h00, 8hfc, 8h00, 8hfc, 8h00, 8hfc, 8h00, 8h00,
    8h30, 8h30, 8hfc, 8h30, 8h30, 8h00, 8hfc, 8h00,
    8h60, 8h30, 8h18, 8h30, 8h60, 8h00, 8hfc, 8h00,
    8h18, 8h30, 8h60, 8h30, 8h18, 8h00, 8hfc, 8h00,
    8h0e, 8h1b, 8h1b, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hd8, 8hd8, 8h70,
    8h30, 8h30, 8h00, 8hfc, 8h00, 8h30, 8h30, 8h00,
    8h00, 8h76, 8hdc, 8h00, 8h76, 8hdc, 8h00, 8h00,
    8h38, 8h6c, 8h6c, 8h38, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h00, 8h00, 8h00,
    8h0f, 8h0c, 8h0c, 8h0c, 8hec, 8h6c, 8h3c, 8h1c,
    8h78, 8h6c, 8h6c, 8h6c, 8h6c, 8h00, 8h00, 8h00,
    8h70, 8h18, 8h30, 8h60, 8h78, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h3c, 8h3c, 8h3c, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00

    };
    
    // 80 x 4 character buffer for the input/output terminal
    dualport_bram uint8 terminal[640] = uninitialized;

    // Initial cursor position in the terminal, bottom left
    uint7 terminal_x = 0;
    uint3 terminal_y = 7;
    
    // Character position on the terminal x 0-79, y 0-7 * 80 ( fetch it one pixel ahead of the actual x pixel, so it is always ready )
    uint7 xterminalpos := ( pix_active ? (pix_x < 640 ) ? pix_x + 2 : 0 : 0 ) >> 3;
    uint10 yterminalpos := (( pix_vblank ? 0 : pix_y - 416 ) >> 3) * 80;

    // Determine if cursor, and if cursor is flashing
    uint1 is_cursor := ( xterminalpos == terminal_x ) && ( ( ( pix_y - 416) >> 3 ) == terminal_y );
    
    // Derive the x and y coordinate within the current 8x8 terminal character block x 0-7, y 0-7
    uint3 xinterminal := (pix_x) & 7;
    uint3 yinterminal := (pix_y) & 7;

    // Derive the actual pixel in the current terminal
    uint1 terminalpixel := characterGenerator8x8.rdata[7 - xinterminal,1];
    
    // Terminal active (scroll) flag and temporary storage for scrolling
    uint10 terminal_scroll = 0;
    uint10 terminal_scroll_next = 0;

    // Setup the reading of the terminal memory
    terminal.addr0 := xterminalpos + yterminalpos;
    terminal.wenable0 := 0;

    // Setup the writing to the terminal memory
    terminal.wenable1 := 0;

    // Setup the reading of the characterGenerator8x8 ROM
    characterGenerator8x8.addr :=  terminal.rdata0 * 8 + yinterminal;
    
    // Default to transparent and active pixels always blue
    terminal_display := pix_active && showterminal && (pix_y > 415);
    pix_blue := 3;

    always {
        // TERMINAL Actions
        // Write to terminal, move to next character and scroll
         switch( terminal_active ) {
             case 0: {
                switch( terminal_write ) {
                    case 1: {
                        // Display character
                        switch( terminal_character ) {
                            case 8: {
                                // BACKSPACE, move back one character
                                if( terminal_x != 0 ) {
                                    terminal_x = terminal_x - 1;
                                    terminal.addr1 = terminal_x + terminal_y * 80;
                                    terminal.wdata1 = 0;
                                    terminal.wenable1 = 1;
                                }
                            }
                            case 10: {
                                // LINE FEED, scroll
                                terminal_scroll = 0;
                                terminal_active = 1;
                            }
                            case 13: {
                                // CARRIAGE RETURN
                                terminal_x = 0;
                            }
                            default: {
                                // Display character
                                terminal.addr1 = terminal_x + terminal_y * 80;
                                terminal.wdata1 = terminal_character;
                                terminal.wenable1 = 1;
                                terminal_active = ( terminal_x == 79 ) ? 1 : 0;
                                terminal_x = ( terminal_x == 79 ) ? 0 : terminal_x + 1;
                            }
                        }
                    }
                    default: {}
                }
            }
            // Start of TERMINAL SCROLL
            case 1: {
                // SCROLL
                terminal_active = ( terminal_scroll == 560 ) ? 4 : 2;
                terminal.addr1 = terminal_scroll + 80;
            }
            case 2: {
                // Retrieve the character to move up
                terminal_scroll_next = terminal.rdata1;
                terminal_active = 3;
            }
            case 3: {
                // Write the character one line up and move onto the next character
                terminal.addr1 = terminal_scroll;
                terminal.wdata1 = terminal_scroll_next;
                terminal.wenable1 = 1;
                terminal_scroll = terminal_scroll + 1;
                terminal_active = 1;
            }
            case 4: {
                // Blank out the last line
                terminal.addr1 = terminal_scroll;
                terminal.wdata1 = 0;
                terminal.wenable1 = 1;
                terminal_active = ( terminal_scroll == 640 ) ? 0 : 4;
                terminal_scroll = terminal_scroll + 1;
            }
            default: {
                terminal_scroll = 0;
                terminal_active = 0;
            }
        } // TERMINAL        
    }
    
    // Render the terminal
    while(1) {
        if( terminal_display ) {
            // TERMINAL is in range and showterminal flag
            // Invert colours for cursor if flashing
            switch( terminalpixel ) {
                case 0: {
                    pix_red = ( is_cursor && timer1hz ) ? 3 : 0;
                    pix_green = ( is_cursor && timer1hz ) ? 3: 0;
                }
                case 1: {
                    pix_red = ( is_cursor && timer1hz ) ? 0 : 3;
                    pix_green = ( is_cursor && timer1hz ) ? 0 : 3;
                }
            }
        }
    }
}

algorithm character_map(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint2   pix_red,
    output! uint2   pix_green,
    output! uint2   pix_blue,
    output! uint1   character_map_display,
    
    // TPU to SET characters, background, foreground
    input uint7 tpu_x,
    input uint5 tpu_y,
    input uint8 tpu_character,
    input uint6 tpu_foreground,
    input uint7 tpu_background,
    input uint2 tpu_write
) <autorun> {
    // Character ROM 8x16
    brom uint8 characterGenerator8x16[] = {
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7e, 8h81, 8ha5, 8h81, 8h81, 8hbd, 8h99, 8h81, 8h81, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7e, 8hff, 8hdb, 8hff, 8hff, 8hc3, 8he7, 8hff, 8hff, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h6c, 8hfe, 8hfe, 8hfe, 8hfe, 8h7c, 8h38, 8h10, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h10, 8h38, 8h7c, 8hfe, 8h7c, 8h38, 8h10, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h18, 8h3c, 8h3c, 8he7, 8he7, 8he7, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h18, 8h3c, 8h7e, 8hff, 8hff, 8h7e, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h3c, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8he7, 8hc3, 8hc3, 8he7, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h3c, 8h66, 8h42, 8h42, 8h66, 8h3c, 8h00, 8h00, 8h00, 8h00, 8h00,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hc3, 8h99, 8hbd, 8hbd, 8h99, 8hc3, 8hff, 8hff, 8hff, 8hff, 8hff,
    8h00, 8h00, 8h1e, 8h0e, 8h1a, 8h32, 8h78, 8hcc, 8hcc, 8hcc, 8hcc, 8h78, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h66, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h7e, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3f, 8h33, 8h3f, 8h30, 8h30, 8h30, 8h30, 8h70, 8hf0, 8he0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7f, 8h63, 8h7f, 8h63, 8h63, 8h63, 8h63, 8h67, 8he7, 8he6, 8hc0, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h18, 8h18, 8hdb, 8h3c, 8he7, 8h3c, 8hdb, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h80, 8hc0, 8he0, 8hf0, 8hf8, 8hfe, 8hf8, 8hf0, 8he0, 8hc0, 8h80, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h02, 8h06, 8h0e, 8h1e, 8h3e, 8hfe, 8h3e, 8h1e, 8h0e, 8h06, 8h02, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h3c, 8h7e, 8h18, 8h18, 8h18, 8h7e, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h00, 8h66, 8h66, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7f, 8hdb, 8hdb, 8hdb, 8h7b, 8h1b, 8h1b, 8h1b, 8h1b, 8h1b, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h7c, 8hc6, 8h60, 8h38, 8h6c, 8hc6, 8hc6, 8h6c, 8h38, 8h0c, 8hc6, 8h7c, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8hfe, 8hfe, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h3c, 8h7e, 8h18, 8h18, 8h18, 8h7e, 8h3c, 8h18, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h3c, 8h7e, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h7e, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h0c, 8hfe, 8h0c, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h30, 8h60, 8hfe, 8h60, 8h30, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hc0, 8hc0, 8hc0, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h28, 8h6c, 8hfe, 8h6c, 8h28, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h10, 8h38, 8h38, 8h7c, 8h7c, 8hfe, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hfe, 8hfe, 8h7c, 8h7c, 8h38, 8h38, 8h10, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h3c, 8h3c, 8h3c, 8h18, 8h18, 8h18, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h66, 8h66, 8h66, 8h24, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h6c, 8h6c, 8hfe, 8h6c, 8h6c, 8h6c, 8hfe, 8h6c, 8h6c, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h7c, 8hc6, 8hc2, 8hc0, 8h7c, 8h06, 8h06, 8h86, 8hc6, 8h7c, 8h18, 8h18, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hc2, 8hc6, 8h0c, 8h18, 8h30, 8h60, 8hc6, 8h86, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h6c, 8h6c, 8h38, 8h76, 8hdc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h30, 8h30, 8h30, 8h60, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h0c, 8h18, 8h30, 8h30, 8h30, 8h30, 8h30, 8h30, 8h18, 8h0c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h30, 8h18, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h18, 8h30, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h66, 8h3c, 8hff, 8h3c, 8h66, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h7e, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h18, 8h30, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h02, 8h06, 8h0c, 8h18, 8h30, 8h60, 8hc0, 8h80, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h6c, 8hc6, 8hc6, 8hd6, 8hd6, 8hc6, 8hc6, 8h6c, 8h38, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h38, 8h78, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8h06, 8h0c, 8h18, 8h30, 8h60, 8hc0, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8h06, 8h06, 8h3c, 8h06, 8h06, 8h06, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h0c, 8h1c, 8h3c, 8h6c, 8hcc, 8hfe, 8h0c, 8h0c, 8h0c, 8h1e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8hc0, 8hc0, 8hc0, 8hfc, 8h06, 8h06, 8h06, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h60, 8hc0, 8hc0, 8hfc, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8hc6, 8h06, 8h06, 8h0c, 8h18, 8h30, 8h30, 8h30, 8h30, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8h7e, 8h06, 8h06, 8h06, 8h0c, 8h78, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h18, 8h18, 8h30, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h06, 8h0c, 8h18, 8h30, 8h60, 8h30, 8h18, 8h0c, 8h06, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7e, 8h00, 8h00, 8h7e, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h60, 8h30, 8h18, 8h0c, 8h06, 8h0c, 8h18, 8h30, 8h60, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8h0c, 8h18, 8h18, 8h18, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hde, 8hde, 8hde, 8hdc, 8hc0, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h10, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfc, 8h66, 8h66, 8h66, 8h7c, 8h66, 8h66, 8h66, 8h66, 8hfc, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h66, 8hc2, 8hc0, 8hc0, 8hc0, 8hc0, 8hc2, 8h66, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hf8, 8h6c, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h6c, 8hf8, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8h66, 8h62, 8h68, 8h78, 8h68, 8h60, 8h62, 8h66, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8h66, 8h62, 8h68, 8h78, 8h68, 8h60, 8h60, 8h60, 8hf0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h66, 8hc2, 8hc0, 8hc0, 8hde, 8hc6, 8hc6, 8h66, 8h3a, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1e, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8hcc, 8hcc, 8hcc, 8h78, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8he6, 8h66, 8h66, 8h6c, 8h78, 8h78, 8h6c, 8h66, 8h66, 8he6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hf0, 8h60, 8h60, 8h60, 8h60, 8h60, 8h60, 8h62, 8h66, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hee, 8hfe, 8hfe, 8hd6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8he6, 8hf6, 8hfe, 8hde, 8hce, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfc, 8h66, 8h66, 8h66, 8h7c, 8h60, 8h60, 8h60, 8h60, 8hf0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hd6, 8hde, 8h7c, 8h0c, 8h0e, 8h00, 8h00,
    8h00, 8h00, 8hfc, 8h66, 8h66, 8h66, 8h7c, 8h6c, 8h66, 8h66, 8h66, 8he6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8h60, 8h38, 8h0c, 8h06, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7e, 8h7e, 8h5a, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h6c, 8h38, 8h10, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hd6, 8hd6, 8hd6, 8hfe, 8hee, 8h6c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8h6c, 8h7c, 8h38, 8h38, 8h7c, 8h6c, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h66, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8hc6, 8h86, 8h0c, 8h18, 8h30, 8h60, 8hc2, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h30, 8h30, 8h30, 8h30, 8h30, 8h30, 8h30, 8h30, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h80, 8hc0, 8he0, 8h70, 8h38, 8h1c, 8h0e, 8h06, 8h02, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h10, 8h38, 8h6c, 8hc6, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8h00,
    8h30, 8h30, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8he0, 8h60, 8h60, 8h78, 8h6c, 8h66, 8h66, 8h66, 8h66, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7c, 8hc6, 8hc0, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1c, 8h0c, 8h0c, 8h3c, 8h6c, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h6c, 8h64, 8h60, 8hf0, 8h60, 8h60, 8h60, 8h60, 8hf0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h76, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h7c, 8h0c, 8hcc, 8h78, 8h00,
    8h00, 8h00, 8he0, 8h60, 8h60, 8h6c, 8h76, 8h66, 8h66, 8h66, 8h66, 8he6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h18, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h06, 8h06, 8h00, 8h0e, 8h06, 8h06, 8h06, 8h06, 8h06, 8h06, 8h66, 8h66, 8h3c, 8h00,
    8h00, 8h00, 8he0, 8h60, 8h60, 8h66, 8h6c, 8h78, 8h78, 8h6c, 8h66, 8he6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hec, 8hfe, 8hd6, 8hd6, 8hd6, 8hd6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hdc, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hdc, 8h66, 8h66, 8h66, 8h66, 8h66, 8h7c, 8h60, 8h60, 8hf0, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h76, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h7c, 8h0c, 8h0c, 8h1e, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hdc, 8h76, 8h66, 8h60, 8h60, 8h60, 8hf0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7c, 8hc6, 8h60, 8h38, 8h0c, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h10, 8h30, 8h30, 8hfc, 8h30, 8h30, 8h30, 8h30, 8h36, 8h1c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h66, 8h66, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hc6, 8hc6, 8hd6, 8hd6, 8hd6, 8hfe, 8h6c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hc6, 8h6c, 8h38, 8h38, 8h38, 8h6c, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7e, 8h06, 8h0c, 8hf8, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8hcc, 8h18, 8h30, 8h60, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h0e, 8h18, 8h18, 8h18, 8h70, 8h18, 8h18, 8h18, 8h18, 8h0e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h18, 8h18, 8h18, 8h00, 8h18, 8h18, 8h18, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h70, 8h18, 8h18, 8h18, 8h0e, 8h18, 8h18, 8h18, 8h18, 8h70, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h76, 8hdc, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h10, 8h38, 8h6c, 8hc6, 8hc6, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h66, 8hc2, 8hc0, 8hc0, 8hc0, 8hc2, 8h66, 8h3c, 8h0c, 8h06, 8h7c, 8h00, 8h00,
    8h00, 8h00, 8hcc, 8h00, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h0c, 8h18, 8h30, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h10, 8h38, 8h6c, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hcc, 8h00, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h38, 8h6c, 8h38, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h3c, 8h66, 8h60, 8h60, 8h66, 8h3c, 8h0c, 8h06, 8h3c, 8h00, 8h00, 8h00,
    8h00, 8h10, 8h38, 8h6c, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8h00, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h66, 8h00, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h18, 8h3c, 8h66, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hc6, 8h00, 8h10, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h38, 8h6c, 8h38, 8h00, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h30, 8h60, 8h00, 8hfe, 8h66, 8h60, 8h7c, 8h60, 8h60, 8h66, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hcc, 8h76, 8h36, 8h7e, 8hd8, 8hd8, 8h6e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3e, 8h6c, 8hcc, 8hcc, 8hfe, 8hcc, 8hcc, 8hcc, 8hcc, 8hce, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h10, 8h38, 8h6c, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h30, 8h78, 8hcc, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7e, 8h06, 8h0c, 8h78, 8h00,
    8h00, 8hc6, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hc6, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h18, 8h18, 8h3c, 8h66, 8h60, 8h60, 8h60, 8h66, 8h3c, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h38, 8h6c, 8h64, 8h60, 8hf0, 8h60, 8h60, 8h60, 8h60, 8he6, 8hfc, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h66, 8h66, 8h3c, 8h18, 8h7e, 8h18, 8h7e, 8h18, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hf8, 8hcc, 8hcc, 8hf8, 8hc4, 8hcc, 8hde, 8hcc, 8hcc, 8hcc, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h0e, 8h1b, 8h18, 8h18, 8h18, 8h7e, 8h18, 8h18, 8h18, 8h18, 8h18, 8hd8, 8h70, 8h00, 8h00,
    8h00, 8h18, 8h30, 8h60, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h0c, 8h18, 8h30, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h18, 8h30, 8h60, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h18, 8h30, 8h60, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h76, 8hdc, 8h00, 8hdc, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h00, 8h00, 8h00, 8h00,
    8h76, 8hdc, 8h00, 8hc6, 8he6, 8hf6, 8hfe, 8hde, 8hce, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h3c, 8h6c, 8h6c, 8h3e, 8h00, 8h7e, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h38, 8h6c, 8h6c, 8h38, 8h00, 8h7c, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h30, 8h30, 8h00, 8h30, 8h30, 8h60, 8hc0, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8hc0, 8hc0, 8hc0, 8hc0, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8h06, 8h06, 8h06, 8h06, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hc0, 8hc0, 8hc2, 8hc6, 8hcc, 8h18, 8h30, 8h60, 8hdc, 8h86, 8h0c, 8h18, 8h3e, 8h00, 8h00,
    8h00, 8hc0, 8hc0, 8hc2, 8hc6, 8hcc, 8h18, 8h30, 8h66, 8hce, 8h9e, 8h3e, 8h06, 8h06, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h18, 8h00, 8h18, 8h18, 8h18, 8h3c, 8h3c, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h36, 8h6c, 8hd8, 8h6c, 8h36, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hd8, 8h6c, 8h36, 8h6c, 8hd8, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44,
    8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa,
    8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hf8, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hf8, 8h18, 8hf8, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8hf6, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hf8, 8h18, 8hf8, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8h36, 8hf6, 8h06, 8hf6, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8h06, 8hf6, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8hf6, 8h06, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hf8, 8h18, 8hf8, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hf8, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h1f, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h1f, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hff, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h1f, 8h18, 8h1f, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h37, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h37, 8h30, 8h3f, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h3f, 8h30, 8h37, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8hf7, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8hf7, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h37, 8h30, 8h37, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8h36, 8hf7, 8h00, 8hf7, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hff, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8hff, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h3f, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h1f, 8h18, 8h1f, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h1f, 8h18, 8h1f, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h3f, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8hff, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hff, 8h18, 8hff, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hf8, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h1f, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff,
    8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0,
    8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h76, 8hdc, 8hd8, 8hd8, 8hd8, 8hdc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h78, 8hcc, 8hcc, 8hcc, 8hd8, 8hcc, 8hc6, 8hc6, 8hc6, 8hcc, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8hc6, 8hc6, 8hc0, 8hc0, 8hc0, 8hc0, 8hc0, 8hc0, 8hc0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hfe, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8hfe, 8hc6, 8h60, 8h30, 8h18, 8h30, 8h60, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7e, 8hd8, 8hd8, 8hd8, 8hd8, 8hd8, 8h70, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h66, 8h66, 8h66, 8h66, 8h66, 8h7c, 8h60, 8h60, 8hc0, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h76, 8hdc, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h7e, 8h18, 8h3c, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8h6c, 8h38, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h6c, 8hc6, 8hc6, 8hc6, 8h6c, 8h6c, 8h6c, 8h6c, 8hee, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1e, 8h30, 8h18, 8h0c, 8h3e, 8h66, 8h66, 8h66, 8h66, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7e, 8hdb, 8hdb, 8hdb, 8h7e, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h03, 8h06, 8h7e, 8hdb, 8hdb, 8hf3, 8h7e, 8h60, 8hc0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1c, 8h30, 8h60, 8h60, 8h7c, 8h60, 8h60, 8h60, 8h30, 8h1c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hfe, 8h00, 8h00, 8hfe, 8h00, 8h00, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h7e, 8h18, 8h18, 8h00, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h30, 8h18, 8h0c, 8h06, 8h0c, 8h18, 8h30, 8h00, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h0c, 8h18, 8h30, 8h60, 8h30, 8h18, 8h0c, 8h00, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h0e, 8h1b, 8h1b, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hd8, 8hd8, 8hd8, 8h70, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h7e, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h76, 8hdc, 8h00, 8h76, 8hdc, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h38, 8h6c, 8h6c, 8h38, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h0f, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8hec, 8h6c, 8h6c, 8h3c, 8h1c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hd8, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h70, 8hd8, 8h30, 8h60, 8hc8, 8hf8, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h7c, 8h7c, 8h7c, 8h7c, 8h7c, 8h7c, 8h7c, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00


    };
    
    // 80 x 30 character buffer
    // Setting background to 40 (ALPHA) allows the bitmap/background to show through
    dualport_bram uint8 character[2400] = uninitialized;
    dualport_bram uint6 foreground[2400] = uninitialized;
    dualport_bram uint7 background[2400] = { 7h40, pad(7h40) };

    // Expansion map for { rr } to { rrrrrr }, { gg } to { gggggg }, { bb } to { bbbbbb }
    uint6 colourexpand2to6[4] = {  0, 21, 42, 63 };

    // Character position on the screen x 0-79, y 0-29 * 80 ( fetch it two pixels ahead of the actual x pixel, so it is always ready )
    uint8 xcharacterpos := ( pix_active ? (pix_x < 640 ) ? pix_x + 2 : 0 : 0 ) >> 3;
    uint12 ycharacterpos := (( pix_vblank ? 0 : pix_y ) >> 4) * 80;
    
    // Derive the x and y coordinate within the current 8x16 character block x 0-7, y 0-15
    uint3 xincharacter := (pix_x) & 7;
    uint4 yincharacter := (pix_y) & 15;

    // Derive the actual pixel in the current character
    uint1 characterpixel := characterGenerator8x16.rdata[7 - xincharacter,1];

    // TPU character position
    uint7 tpu_active_x = 0;
    uint5 tpu_active_y = 0;

    // Set up reading of character and attribute memory
    // character.rdata0 is the character, foreground.rdata0 and background.rdata0 are the attribute being rendered
    character.addr0 := xcharacterpos + ycharacterpos;
    character.wenable0 := 0;
    foreground.addr0 := xcharacterpos + ycharacterpos;
    foreground.wenable0 := 0;
    background.addr0 := xcharacterpos + ycharacterpos;
    background.wenable0 := 0;

    // BRAM write access for the TPU 
    character.addr1 := tpu_active_x + tpu_active_y * 80;
    character.wenable1 := 0;
    background.addr1 := tpu_active_x + tpu_active_y * 80;
    background.wenable1 := 0;
    foreground.addr1 := tpu_active_x + tpu_active_y * 80;
    foreground.wenable1 := 0;

    // Setup the reading of the characterGenerator8x16 ROM
    characterGenerator8x16.addr :=  character.rdata0 * 16 + yincharacter;

    // Default to transparent
    character_map_display := pix_active && (( characterpixel ) || ( ~colour7(background.rdata0).alpha ));
    
    always {
        // TPU
        // tpu_write controls actions
        // 1 = set cursor position
        // 2 = draw character in foreground,background at x,y and move to next position
        switch( tpu_write ) {
            case 1: {
                // Set cursor position
                tpu_active_x = tpu_x;
                tpu_active_y = tpu_y;
            }
            case 2: {
                // Write character,foreground, background to current cursor position and move onto next character position
                character.wdata1 = tpu_character;
                character.wenable1 = 1;
                background.wdata1 = tpu_background;
                background.wenable1 = 1;
                foreground.wdata1 = tpu_foreground;
                foreground.wenable1 = 1;
                
                tpu_active_y = ( tpu_active_x == 79 ) ? ( tpu_active_y == 29 ) ? 0 : tpu_active_y + 1 : tpu_active_y;
                tpu_active_x = ( tpu_active_x == 79 ) ? 0 : tpu_active_x + 1;
            }
            default: {}
        } // TPU        
    }
    
    // Render the character map
    while(1) {
        if( character_map_display ) {
            // CHARACTER from characterGenerator8x16
            // Determine if background or foreground
            switch( characterpixel ) {
                case 0: {
                    // BACKGROUND
                    pix_red = colour7(background.rdata0).red;
                    pix_green = colour7(background.rdata0).green;
                    pix_blue = colour7(background.rdata0).blue;
                }
                case 1: {
                    // foreground
                    pix_red = colour6(foreground.rdata0).red;
                    pix_green = colour6(foreground.rdata0).green;
                    pix_blue = colour6(foreground.rdata0).blue;
                }
            }
        } 
    }
}

algorithm bitmap(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint2   pix_red,
    output! uint2   pix_green,
    output! uint2   pix_blue,
    output! uint1   bitmap_display,
    
    // GPU to SET and GET pixels
    input int11 bitmap_x_write,
    input int11 bitmap_y_write,
    input uint7 bitmap_colour_write,
    input uint2 bitmap_write,
    input int16 bitmap_x_read,
    input int16 bitmap_y_read,
    output uint7 bitmap_colour_read
) <autorun> {
    // 640 x 480 x 7 bit { Arrggbb } colour bitmap
    dualport_bram uint1 bitmap_alpha[ 307200 ] = uninitialized;
    dualport_bram uint2 bitmap_red[ 307200 ] = uninitialized;
    dualport_bram uint2 bitmap_green[ 307200 ] = uninitialized;
    dualport_bram uint2 bitmap_blue[ 307200 ] = uninitialized;

    // Write in range?
    uint1 write_pixel := (bitmap_x_write >= 0 ) && (bitmap_x_write < 640) && (bitmap_y_write >= 0) && (bitmap_y_write < 480) && ( bitmap_write == 1 );
    
    // Pixel being read?
    bitmap_colour_read := ( pix_x == bitmap_x_read ) && ( pix_y == bitmap_y_read ) ? { bitmap_alpha.rdata0, bitmap_red.rdata0, bitmap_green.rdata0, bitmap_blue.rdata0 } : bitmap_colour_read;

    // Setup the address in the bitmap for the pixel being rendered
    // Use pre-fetching of the next pixel ready for the next cycle
    bitmap_alpha.addr0 := ( pix_active ? pix_x + 1 : 0 ) + ( pix_vblank ? 0 : pix_y * 640 );
    bitmap_alpha.wenable0 := 0;
    bitmap_red.addr0 := ( pix_active ? pix_x + 1 : 0 ) + ( pix_vblank ? 0 : pix_y * 640 );
    bitmap_red.wenable0 := 0;
    bitmap_green.addr0 := ( pix_active ? pix_x + 1 : 0 ) + ( pix_vblank ? 0 : pix_y * 640 );
    bitmap_green.wenable0 := 0;
    bitmap_blue.addr0 := ( pix_active ? pix_x + 1 : 0 ) + ( pix_vblank ? 0 : pix_y * 640 );
    bitmap_blue.wenable0 := 0;
    
    // Bitmap write access for the GPU - Only enable when x and y are in range
    bitmap_alpha.addr1 := bitmap_x_write + bitmap_y_write * 640;
    bitmap_alpha.wdata1 := colour7(bitmap_colour_write).alpha;
    bitmap_alpha.wenable1 := write_pixel;
    bitmap_red.addr1 := bitmap_x_write + bitmap_y_write * 640;
    bitmap_red.wdata1 := colour7(bitmap_colour_write).red;
    bitmap_red.wenable1 := write_pixel;
    bitmap_green.addr1 := bitmap_x_write + bitmap_y_write * 640;
    bitmap_green.wdata1 := colour7(bitmap_colour_write).green;
    bitmap_green.wenable1 := write_pixel;
    bitmap_blue.addr1 := bitmap_x_write + bitmap_y_write * 640;
    bitmap_blue.wdata1 := colour7(bitmap_colour_write).blue;
    bitmap_blue.wenable1 := write_pixel;

    // Default to transparent
    bitmap_display := pix_active && ~bitmap_alpha.rdata0;

    // Render the bitmap
    while(1) {
        if( bitmap_display ) {
            pix_red = bitmap_red.rdata0;
            pix_green = bitmap_green.rdata0;
            pix_blue = bitmap_blue.rdata0;
        }
    }
}

algorithm gpu(
    // GPU to SET and GET pixels
    output! int11 bitmap_x_write,
    output! int11 bitmap_y_write,
    output! uint7 bitmap_colour_write,
    output! uint2 bitmap_write,

    // From j1eforth
    input   int11 gpu_x,
    input   int11 gpu_y,
    input   uint8 gpu_colour,
    input   int16 gpu_param0,
    input   int16 gpu_param1,
    input   int16 gpu_param2,
    input   int16 gpu_param3,
    input   uint4 gpu_write,

    // From VECTOR DRAWER
    input   int11 v_gpu_x,
    input   int11 v_gpu_y,
    input   uint7 v_gpu_colour,
    input   int11 v_gpu_param0,
    input   int11 v_gpu_param1,
    input   int11 v_gpu_param2,
    input   int11 v_gpu_param3,
    input   uint4 v_gpu_write,

    // From DISPLAY LIST DRAWER
    input   int11 dl_gpu_x,
    input   int11 dl_gpu_y,
    input   uint8 dl_gpu_colour,
    input   int16 dl_gpu_param0,
    input   int16 dl_gpu_param1,
    input   int16 dl_gpu_param2,
    input   int16 dl_gpu_param3,
    input   uint4 dl_gpu_write,

    // For setting blit1 tile bitmaps
    input   uint6   blit1_writer_tile,
    input   uint4   blit1_writer_line,
    input   uint16  blit1_writer_bitmap,  
    input   uint1   blit1_writer_active,

    output  uint4 gpu_active
) <autorun> {
    // 64 x 16 x 16 1 bit tilemap for blit1tilemap
    dualport_bram uint16 blit1tilemap[ 1024 ] = uninitialized;
    
    // GPU work variable storage
    // Present GPU pixel and colour
    int11 gpu_active_x = uninitialized;
    int11 gpu_active_y = uninitialized;
    uint7 gpu_active_colour = uninitialized;
    
    // Temporary storage for GPU operations with meaningful names centre coordinates, end coordinates, width, height, deltas, radius, etc
    int11 gpu_xc = uninitialized;
    int11 gpu_yc = uninitialized;
    int11 gpu_x1 = uninitialized;
    int11 gpu_y1 = uninitialized;
    int11 gpu_x2 = uninitialized;
    int11 gpu_y2 = uninitialized;
    int11 gpu_w = uninitialized;
    int11 gpu_h = uninitialized;
    int11 gpu_dx = uninitialized;
    int11 gpu_sx = uninitialized;
    int11 gpu_dy = uninitialized;
    int11 gpu_sy = uninitialized;
    int11 gpu_numerator = uninitialized;
    int11 gpu_numerator2 = uninitialized;
    //int11 gpu_radius = uninitialized;
    int11 gpu_count = uninitialized;
    int11 gpu_max_count = uninitialized;
    uint6 gpu_tile = uninitialized;

    // GPU inputs, copied to according to Forth, VECTOR or DISPLAY LISTS
    int11   x = uninitialized;
    int11   y = uninitialized;
    int16   param0 = uninitialized;
    int16   param1 = uninitialized;
    int16   param2 = uninitialized;
    int16   param3 = uninitialized;
    uint4   write = uninitialized;

    // blit1tilemap read access for the blit1tilemap
    blit1tilemap.addr0 := gpu_tile * 16 + gpu_active_y;
    blit1tilemap.wenable0 := 0;
        
    // blit1tilemap write access for the GPU to load tilemaps
    blit1tilemap.addr1 := blit1_writer_tile * 16 + blit1_writer_line;
    blit1tilemap.wdata1 := blit1_writer_bitmap;
    blit1tilemap.wenable1 := blit1_writer_active;

    bitmap_write := 0;
    
    always {
        if( dl_gpu_write != 0 ) {
            x = dl_gpu_x;
            y = dl_gpu_y;
            gpu_active_colour = dl_gpu_colour;
            param0 = dl_gpu_param0;
            param1 = dl_gpu_param1;
            param2 = dl_gpu_param2;
            param3 = dl_gpu_param3;
            write = dl_gpu_write;
        } else {
            if( v_gpu_write != 0 ) {
                x = v_gpu_x;
                y = v_gpu_y;
                gpu_active_colour = v_gpu_colour;
                param0 = v_gpu_param0;
                param1 = v_gpu_param1;
                param2 = v_gpu_param2;
                param3 = v_gpu_param3;
                write = v_gpu_write;
            } else {
                if( gpu_write != 0 ) {
                    x = gpu_x;
                    y = gpu_y;
                    gpu_active_colour = gpu_colour;
                    param0 = gpu_param0;
                    param1 = gpu_param1;
                    param2 = gpu_param2;
                    param3 = gpu_param3;
                    write = gpu_write;
                } else {
                    write = 0;
                }
            }
        }
    }
    
    while(1) {
        switch( gpu_active ) {
            // GPU Inactive, allow a new operation to start
            case 0: {
                // Start the GPU from j1eforth
                switch( write ) {
                    case 1: {
                        // Setup writing a pixel colour to x,y 
                        // Done directly, does not activate the GPU
                        bitmap_x_write = x;
                        bitmap_y_write = y;
                        bitmap_colour_write = gpu_active_colour;
                        bitmap_write = 1;
                    }
                    case 2: {
                        // Setup drawing a rectangle from x,y to param0,param1 in colour
                        // Ensures that works left to right, top to bottom
                        // Cut out pixels out of 0 <= x <= 639 , 0 <= y <= 479
                        gpu_active_x = ( x < param0 ) ? ( x < 0 ? 0 : x ) : ( param0 < 0 ? 0 : param0 );                // left
                        gpu_active_y = ( y < param1 ) ? ( y < 0 ? 0 : y ) : ( param1 < 0 ? 0 : param1 );                // top
                        gpu_x2 = ( x < param0 ) ? ( x < 0 ? 0 : x )  : ( param0 < 0 ? 0 : param0 );                     // left - for next line
                        gpu_x1 = ( x < param0 ) ? ( param0 > 639 ? 639 : param0 ) : ( x > 639 ? 639 : x );              // right - at end of line
                        gpu_y1 = ( y < param1 ) ? ( param1 > 479 ? 479 : param1 ) : ( y > 479 ? 479 : y );              // bottom - at end of rectangle
                        gpu_active = 1; 
                    }
                    case 3: {
                        // Setup drawing a line from x,y to param0,param1 in colour
                        // Ensure LEFT to RIGHT
                        gpu_active_x = ( x < param0 ) ? x : param0;
                        gpu_active_y = ( x < param0 ) ? y : param1;
                        // Absolute DELTAs
                        gpu_dx = ( param0 < x ) ? x - param0 : param0 - x;
                        gpu_dy = ( param1 < y ) ? y - param1 : param1 - y;
                        // Shift X is always POSITIVE
                        gpu_sx = 1;
                        // Shift Y is NEGATIVE or POSITIVE
                        gpu_sy = ( x < param0 ) ? ( y < param1 ) ? 1 : -1 : ( y < param1 ) ? -1 : 1;
                        gpu_count = 0;
                        gpu_active = 2; 
                    }
                    case 4: {
                        // Setup drawing a circle centre x,y or radius param0 in colour
                        gpu_active_x = 0;
                        gpu_active_y = param0;
                        gpu_xc = x;
                        gpu_yc = y;
                        gpu_numerator = 3 - ( 2 * param0 );
                        gpu_active = 6;
                    }
                    case 5: {
                        // Setup 1 bit 16x16 blitter starting at x,y in colour of tile param0
                        gpu_active_x = 0;
                        gpu_active_y = 0;
                        gpu_x1 = x;
                        gpu_y1 = y;
                        gpu_w = 15;
                        gpu_h = 15;
                        gpu_tile = param0;                       
                        gpu_active = 14;
                    }
                    default: {}
                }
            }
                
            // Perform GPU Operation
            // GPU functions 1 pixel per cycle, even during hblank and vblank
            case 1: {
                // Rectangle of colour at x,y top left to param0, param1 bottom right
                bitmap_x_write = gpu_active_x;
                bitmap_y_write = gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                // Move to next pixel
                gpu_active = ( ( gpu_active_x == gpu_x1) && ( gpu_active_y == gpu_y1 ) ) ? 0 : 1;
                gpu_active_x = ( gpu_active_x == gpu_x1 ) ? gpu_x2 : gpu_active_x + 1;
                gpu_active_y = ( gpu_active_x == gpu_x1 ) ? gpu_active_y + 1 : gpu_active_y;
            }
            case 2: {
                // Bresenham's Line Drawing Algorithm
                gpu_numerator = ( gpu_dx > gpu_dy ) ? ( gpu_dx >> 1 ) : -( gpu_dy >> 1 );
                gpu_max_count = ( gpu_dx > gpu_dy ) ? gpu_dx : gpu_dy;
                gpu_active = 3;
            }
            case 3: {
                // Bresenham's Line Drawing Algorithm.
                // Draw the line
                bitmap_x_write = gpu_active_x;
                bitmap_y_write = gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                
                // Check if done
                gpu_active = ( gpu_count < gpu_max_count ) ? 4 : 0;
                gpu_numerator2 = gpu_numerator;
            }
            case 4: {          
                // Bresenham's Line Drawing Algorithm.
                if ( gpu_numerator2 > (-gpu_dx) ) {
                    gpu_numerator = gpu_numerator - gpu_dy;
                    gpu_active_x = gpu_active_x + gpu_sx;
                }
                gpu_active = 5;                
            }
            case 5: {
                // Bresenham's Line Drawing Algorithm
                if( gpu_numerator2 < gpu_dy ) {
                    gpu_numerator = gpu_numerator + gpu_dx;
                    gpu_active_y = gpu_active_y + gpu_sy;
                }
                gpu_count = gpu_count + 1;
                gpu_active = 3;
            }
            case 6: {
                // Bresenham's Circle Drawing Algorithm - Arc 0
                bitmap_x_write = gpu_xc + gpu_active_x;
                bitmap_y_write = gpu_yc + gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 7;
            }
            case 7: {
                // Bresenham's Circle Drawing Algorithm - Arc 1
                bitmap_x_write = gpu_xc - gpu_active_x;
                bitmap_y_write = gpu_yc + gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 8;
            }
            case 8: {
                // Bresenham's Circle Drawing Algorithm - Arc 2
                bitmap_x_write = gpu_xc + gpu_active_x;
                bitmap_y_write = gpu_yc - gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 9;
            }
            case 9: {
                // Bresenham's Circle Drawing Algorithm - Arc 3
                bitmap_x_write = gpu_xc - gpu_active_x;
                bitmap_y_write = gpu_yc - gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 10;
            }
            case 10: {
                // Bresenham's Circle Drawing Algorithm - Arc 4
                bitmap_x_write = gpu_xc + gpu_active_y;
                bitmap_y_write = gpu_yc + gpu_active_x;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 11;
            }
            case 11: {
                // Bresenham's Circle Drawing Algorithm - Arc 5
                bitmap_x_write = gpu_xc - gpu_active_y;
                bitmap_y_write = gpu_yc + gpu_active_x;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 12;
            }
            case 12: {
                // Bresenham's Circle Drawing Algorithm - Arc 6
                bitmap_x_write = gpu_xc + gpu_active_y;
                bitmap_y_write = gpu_yc - gpu_active_x;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 13;
            }
            case 13: {
                // Bresenham's Circle Drawing Algorithm - Arc 7
                bitmap_x_write = gpu_xc - gpu_active_y;
                bitmap_y_write = gpu_yc - gpu_active_x;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                if( gpu_active_y >= gpu_active_x ) {
                    gpu_active_x = gpu_active_x + 1;
                    if( gpu_numerator > 0 ) {
                        gpu_numerator = gpu_numerator + 4 * (gpu_active_x - gpu_active_y) + 10;
                        gpu_active_y = gpu_active_y - 1;
                    } else {
                        gpu_numerator = gpu_numerator + 4 * gpu_active_x + 6;
                    }
                    gpu_active = 6;
                } else {
                    gpu_active = 0;
                }
            }
            case 14: {
                // 1 bit blitter
                // delay to read 1 line from blit1tilemap memory
                gpu_active = 15;
            }
            case 15: {
                // 1 bit BLITTER
                // Draw pixel, move to next pixel
                if( blit1tilemap.rdata0[15 -gpu_active_x,1] ) {
                    bitmap_x_write = gpu_x1 + gpu_active_x;
                    bitmap_y_write = gpu_y1 + gpu_active_y;
                    bitmap_colour_write = gpu_active_colour;
                    bitmap_write = 1;
                }
                gpu_active = ( gpu_active_x < gpu_w ) ? 15 : ( gpu_active_y < gpu_h ) ? 14 : 0;
                gpu_active_x = ( gpu_active_x < gpu_w ) ? gpu_active_x + 1 : 0;
                gpu_active_y = ( gpu_active_x < gpu_w ) ? gpu_active_y : gpu_active_y + 1;
            }
            default: {gpu_active = 0;}
        }
    }
}

algorithm background(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint2   pix_red,
    output! uint2   pix_green,
    output! uint2   pix_blue,

    input uint16 staticGenerator,
    
    input uint6 backgroundcolour,
    input uint6 backgroundcolour_alt,
    input uint3 backgroundcolour_mode,
    input uint3 background_write
) <autorun> {
    uint6 background = 0;
    uint6 background_alt = 0;
    uint3 background_mode = 0;
    
    // Variables for SNOW (from @sylefeb)
    int10   dotpos = 0;
    int2    speed = 0;
    int2    inv_speed = 0;
    int12   rand_x = 0;
    int32   frame = 0;
    
    // Default to black
    pix_red := 0;
    pix_green := 0;
    pix_blue := 0;

    always {
        switch( background_write ) {
            case 1: { background = backgroundcolour; }
            case 2: { background_alt = backgroundcolour_alt; }
            case 3: { background_mode = backgroundcolour_mode; }
            default: {}
        }

        // Increment frame number for the snow/star field
        frame = ( ( pix_x == 639 ) && ( pix_y == 470 ) ) ? frame + 1 : frame;
    }
    
    while(1) {
        switch( backgroundcolour_mode ) {
            case 0: {
                // SOLID
                pix_red = colour6(background).red;
                pix_green = colour6(background).green;
                pix_blue = colour6(background).blue;
            }
            case 1: {
                // SMALL checkerboard
                switch( { pix_x[0,1], pix_y[0,1] } ) {
                    case 2b00: {
                        pix_red = colour6(background).red;
                        pix_green = colour6(background).green;
                        pix_blue = colour6(background).blue;
                    }
                    case 2b01: {
                        pix_red = colour6(background_alt).red;
                        pix_green = colour6(background_alt).green;
                        pix_blue = colour6(background_alt).blue;
                    }
                    case 2b10: {
                        pix_red = colour6(background_alt).red;
                        pix_green = colour6(background_alt).green;
                        pix_blue = colour6(background_alt).blue;
                    }
                    case 2b11: {
                        pix_red = colour6(background).red;
                        pix_green = colour6(background).green;
                        pix_blue = colour6(background).blue;
                    }
                }
            }
            case 2: {
                // MEDIUM checkerboard
                switch( { pix_x[1,1], pix_y[1,1] } ) {
                    case 2b00: {
                        pix_red = colour6(background).red;
                        pix_green = colour6(background).green;
                        pix_blue = colour6(background).blue;
                    }
                    case 2b01: {
                        pix_red = colour6(background_alt).red;
                        pix_green = colour6(background_alt).green;
                        pix_blue = colour6(background_alt).blue;
                    }
                    case 2b10: {
                        pix_red = colour6(background_alt).red;
                        pix_green = colour6(background_alt).green;
                        pix_blue = colour6(background_alt).blue;
                    }
                    case 2b11: {
                        pix_red = colour6(background).red;
                        pix_green = colour6(background).green;
                        pix_blue = colour6(background).blue;
                    }
                }
            }
            case 3: {
                // LARGE checkerboard
                switch( { pix_x[2,1], pix_y[2,1] } ) {
                    case 2b00: {
                        pix_red = colour6(background).red;
                        pix_green = colour6(background).green;
                        pix_blue = colour6(background).blue;
                    }
                    case 2b01: {
                        pix_red = colour6(background_alt).red;
                        pix_green = colour6(background_alt).green;
                        pix_blue = colour6(background_alt).blue;
                    }
                    case 2b10: {
                        pix_red = colour6(background_alt).red;
                        pix_green = colour6(background_alt).green;
                        pix_blue = colour6(background_alt).blue;
                    }
                    case 2b11: {
                        pix_red = colour6(background).red;
                        pix_green = colour6(background).green;
                        pix_blue = colour6(background).blue;
                    }
                }
            }
            case 4: {
                // HUGE checkerboard
                switch( { pix_x[3,1], pix_y[3,1] } ) {
                    case 2b00: {
                        pix_red = colour6(background).red;
                        pix_green = colour6(background).green;
                        pix_blue = colour6(background).blue;
                    }
                    case 2b01: {
                        pix_red = colour6(background_alt).red;
                        pix_green = colour6(background_alt).green;
                        pix_blue = colour6(background_alt).blue;
                    }
                    case 2b10: {
                        pix_red = colour6(background_alt).red;
                        pix_green = colour6(background_alt).green;
                        pix_blue = colour6(background_alt).blue;
                    }
                    case 2b11: {
                        pix_red = colour6(background).red;
                        pix_green = colour6(background).green;
                        pix_blue = colour6(background).blue;
                    }
                }
            }
            case 5: {
                // 8 colour rainbow
                switch( pix_y[6,3] ) {
                    case 3b000: {
                        pix_red = 2;
                    }
                    case 3b001: {
                        pix_red = 3;
                    }
                    case 3b010: {
                        pix_red = 3;
                        pix_green = 2;
                    }
                    case 3b011: {
                        pix_red = 3;
                        pix_green = 3;
                    }
                    case 3b100: {
                        pix_green = 3;
                    }
                    case 3b101: {
                        pix_blue = 3;
                    }
                    case 3b110: {
                        pix_red = 1;
                        pix_blue = 2;
                    }
                    case 3b111: {
                        pix_red = 1;
                        pix_green = 2;
                        pix_blue = 3;
                    }
                }
            }
            case 6: {
                // Static
                pix_red = staticGenerator[0,2];
                pix_green = staticGenerator[0,2];
                pix_blue = staticGenerator[0,2];
            }
            case 7: {
                // Snow
                rand_x = ( pix_x == 0)  ? 1 : rand_x * 31421 + 6927;
                speed  = rand_x[10,2];
                dotpos = ( frame >> speed ) + rand_x;
                if (pix_y == dotpos) {
                    pix_red   = colour6(background).red;
                    pix_green = colour6(background).green;
                    pix_blue  = colour6(background).blue;
                } else {
                    pix_red   = colour6(background_alt).red;
                    pix_green = colour6(background_alt).green;
                    pix_blue  = colour6(background_alt).blue;
                }
            }                
            default: {}
        }
    }
}

bitfield spriteupdate {
    uint1   colour_act,         // 1 change the colour
    uint6   colour,             // { rrggbb }
    uint1   y_act,              // 1 - kill when off screen, 0 - wrap
    uint1   x_act,              // 1 - kill when off screen, 0 - wrap
    uint1   tile_act,           // 1 - increase the tile number
    uint1   dysign,             // dy - 2's complement update for the y coordinate
    uint2   dy,
    uint1   dxsign,             // dx - 2's complement update for the x coordinate
    uint2   dx
}

algorithm sprite_layer(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint2 pix_red,
    output! uint2 pix_green,
    output! uint2 pix_blue,
    output! uint1   sprite_layer_display,
    
    // For setting sprite characteristics
    input   uint4   sprite_set_number,
    input   uint1   sprite_set_active,
    input   uint1   sprite_set_double,
    input   uint2   sprite_set_colmode,
    input   uint6   sprite_set_colour,
    input   int11   sprite_set_x,
    input   int11   sprite_set_y,
    input   uint2   sprite_set_tile,

    // For reading sprite characteristics for sprite_set_number
    output  uint1   sprite_read_active,
    output  uint1   sprite_read_double,
    output  uint2   sprite_read_colmode,
    output  uint6   sprite_read_colour,
    output  int11   sprite_read_x,
    output  int11   sprite_read_y,
    output  uint2   sprite_read_tile,
    input   uint16  sprite_update,
    // Flag to set the above
    input   uint4   sprite_layer_write,

    // FULL collision detection
    // Bitmap is set flag
    input   uint1   bitmap_display,
        output uint16 collision_0,
        output uint16 collision_1,
        output uint16 collision_2,
        output uint16 collision_3,
        output uint16 collision_4,
        output uint16 collision_5,
        output uint16 collision_6,
        output uint16 collision_7,
        output uint16 collision_8,
        output uint16 collision_9,
        output uint16 collision_10,
        output uint16 collision_11,
        output uint16 collision_12,
        output uint16 collision_13,
        output uint16 collision_14,
    
    // For setting sprite tile bitmaps
    input   uint4   sprite_writer_sprite,
    input   uint6   sprite_writer_line,
    input   uint16  sprite_writer_bitmap,  
    input   uint1   sprite_writer_active,

    // For setting 3 or 15 colour sprite palette
        input uint6 sprite_palette_1,
        input uint6 sprite_palette_2,
        input uint6 sprite_palette_3,
        input uint6 sprite_palette_4,
        input uint6 sprite_palette_5,
        input uint6 sprite_palette_6,
        input uint6 sprite_palette_7,
        input uint6 sprite_palette_8,
        input uint6 sprite_palette_9,
        input uint6 sprite_palette_10,
        input uint6 sprite_palette_11,
        input uint6 sprite_palette_12,
        input uint6 sprite_palette_13,
        input uint6 sprite_palette_14,
        input uint6 sprite_palette_15,
) <autorun> {
    // Storage for the sprites
    // Stored as registers as needed instantly
    uint1 sprite_active[15] = uninitialised;
    uint1 sprite_double[15] = uninitialised;
    uint2 sprite_colmode[15] = uninitialised;
    int11 sprite_x[15] = uninitialised;
    int11 sprite_y[15] = uninitialised;
    uint6 sprite_colour[15] = uninitialised;
    uint2 sprite_tile_number[15] = uninitialised;

    // Palette for 3 or 15 colour sprites - shared
    uint6 palette[16] = uninitialised;
    
    // Collision detection storage
        uint16      detect_collision_0 = uninitialised;
        uint16      detect_collision_1 = uninitialised;
        uint16      detect_collision_2 = uninitialised;
        uint16      detect_collision_3 = uninitialised;
        uint16      detect_collision_4 = uninitialised;
        uint16      detect_collision_5 = uninitialised;
        uint16      detect_collision_6 = uninitialised;
        uint16      detect_collision_7 = uninitialised;
        uint16      detect_collision_8 = uninitialised;
        uint16      detect_collision_9 = uninitialised;
        uint16      detect_collision_10 = uninitialised;
        uint16      detect_collision_11 = uninitialised;
        uint16      detect_collision_12 = uninitialised;
        uint16      detect_collision_13 = uninitialised;
        uint16      detect_collision_14 = uninitialised;
    
    // One bram for each sprite
        dualport_bram uint16 sprite_0_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_1_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_2_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_3_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_4_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_5_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_6_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_7_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_8_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_9_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_10_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_11_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_12_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_13_tiles[64] = uninitialised;
        dualport_bram uint16 sprite_14_tiles[64] = uninitialised;

    // Calculate if each sprite is visible
        uint4 sprite_0_xinsprite := ( 16 >> sprite_colmode[0] ) - 1  - ( ( pix_x - sprite_x[0] ) >> sprite_double[0] );
        uint4 sprite_0_spritepixel := ( sprite_colmode[0] == 0 ) ? sprite_0_tiles.rdata0[ sprite_0_xinsprite, 1 ] 
                                        : ( sprite_colmode[0] == 1 ) ? sprite_0_tiles.rdata0[ sprite_0_xinsprite, 2 ]
                                        : ( sprite_colmode[0] == 2 ) ? sprite_0_tiles.rdata0[ sprite_0_xinsprite, 3 ] : 0;
        uint1 sprite_0_visiblex := ( pix_x >= sprite_x[0] ) && ( pix_x < ( sprite_x[0] + ( ( 16 >> sprite_colmode[0] ) << sprite_double[0] ) ) );
        uint1 sprite_0_visibley := ( pix_y >= sprite_y[0] ) && ( pix_y < ( sprite_y[0] + ( 16 << sprite_double[0] ) ) );
        uint1 sprite_0_visible := sprite_0_visiblex && sprite_0_visibley && ( sprite_0_spritepixel != 0 )  && sprite_active[0];
        uint4 sprite_1_xinsprite := ( 16 >> sprite_colmode[1] ) - 1  - ( ( pix_x - sprite_x[1] ) >> sprite_double[1] );
        uint4 sprite_1_spritepixel := ( sprite_colmode[1] == 0 ) ? sprite_1_tiles.rdata0[ sprite_1_xinsprite, 1 ] 
                                        : ( sprite_colmode[1] == 1 ) ? sprite_1_tiles.rdata0[ sprite_1_xinsprite, 2 ]
                                        : ( sprite_colmode[1] == 2 ) ? sprite_1_tiles.rdata0[ sprite_1_xinsprite, 3 ] : 0;
        uint1 sprite_1_visiblex := ( pix_x >= sprite_x[1] ) && ( pix_x < ( sprite_x[1] + ( ( 16 >> sprite_colmode[1] ) << sprite_double[1] ) ) );
        uint1 sprite_1_visibley := ( pix_y >= sprite_y[1] ) && ( pix_y < ( sprite_y[1] + ( 16 << sprite_double[1] ) ) );
        uint1 sprite_1_visible := sprite_1_visiblex && sprite_1_visibley && ( sprite_1_spritepixel != 0 )  && sprite_active[1];
        uint4 sprite_2_xinsprite := ( 16 >> sprite_colmode[2] ) - 1  - ( ( pix_x - sprite_x[2] ) >> sprite_double[2] );
        uint4 sprite_2_spritepixel := ( sprite_colmode[2] == 0 ) ? sprite_2_tiles.rdata0[ sprite_2_xinsprite, 1 ] 
                                        : ( sprite_colmode[2] == 1 ) ? sprite_2_tiles.rdata0[ sprite_2_xinsprite, 2 ]
                                        : ( sprite_colmode[2] == 2 ) ? sprite_2_tiles.rdata0[ sprite_2_xinsprite, 3 ] : 0;
        uint1 sprite_2_visiblex := ( pix_x >= sprite_x[2] ) && ( pix_x < ( sprite_x[2] + ( ( 16 >> sprite_colmode[2] ) << sprite_double[2] ) ) );
        uint1 sprite_2_visibley := ( pix_y >= sprite_y[2] ) && ( pix_y < ( sprite_y[2] + ( 16 << sprite_double[2] ) ) );
        uint1 sprite_2_visible := sprite_2_visiblex && sprite_2_visibley && ( sprite_2_spritepixel != 0 )  && sprite_active[2];
        uint4 sprite_3_xinsprite := ( 16 >> sprite_colmode[3] ) - 1  - ( ( pix_x - sprite_x[3] ) >> sprite_double[3] );
        uint4 sprite_3_spritepixel := ( sprite_colmode[3] == 0 ) ? sprite_3_tiles.rdata0[ sprite_3_xinsprite, 1 ] 
                                        : ( sprite_colmode[3] == 1 ) ? sprite_3_tiles.rdata0[ sprite_3_xinsprite, 2 ]
                                        : ( sprite_colmode[3] == 2 ) ? sprite_3_tiles.rdata0[ sprite_3_xinsprite, 3 ] : 0;
        uint1 sprite_3_visiblex := ( pix_x >= sprite_x[3] ) && ( pix_x < ( sprite_x[3] + ( ( 16 >> sprite_colmode[3] ) << sprite_double[3] ) ) );
        uint1 sprite_3_visibley := ( pix_y >= sprite_y[3] ) && ( pix_y < ( sprite_y[3] + ( 16 << sprite_double[3] ) ) );
        uint1 sprite_3_visible := sprite_3_visiblex && sprite_3_visibley && ( sprite_3_spritepixel != 0 )  && sprite_active[3];
        uint4 sprite_4_xinsprite := ( 16 >> sprite_colmode[4] ) - 1  - ( ( pix_x - sprite_x[4] ) >> sprite_double[4] );
        uint4 sprite_4_spritepixel := ( sprite_colmode[4] == 0 ) ? sprite_4_tiles.rdata0[ sprite_4_xinsprite, 1 ] 
                                        : ( sprite_colmode[4] == 1 ) ? sprite_4_tiles.rdata0[ sprite_4_xinsprite, 2 ]
                                        : ( sprite_colmode[4] == 2 ) ? sprite_4_tiles.rdata0[ sprite_4_xinsprite, 3 ] : 0;
        uint1 sprite_4_visiblex := ( pix_x >= sprite_x[4] ) && ( pix_x < ( sprite_x[4] + ( ( 16 >> sprite_colmode[4] ) << sprite_double[4] ) ) );
        uint1 sprite_4_visibley := ( pix_y >= sprite_y[4] ) && ( pix_y < ( sprite_y[4] + ( 16 << sprite_double[4] ) ) );
        uint1 sprite_4_visible := sprite_4_visiblex && sprite_4_visibley && ( sprite_4_spritepixel != 0 )  && sprite_active[4];
        uint4 sprite_5_xinsprite := ( 16 >> sprite_colmode[5] ) - 1  - ( ( pix_x - sprite_x[5] ) >> sprite_double[5] );
        uint4 sprite_5_spritepixel := ( sprite_colmode[5] == 0 ) ? sprite_5_tiles.rdata0[ sprite_5_xinsprite, 1 ] 
                                        : ( sprite_colmode[5] == 1 ) ? sprite_5_tiles.rdata0[ sprite_5_xinsprite, 2 ]
                                        : ( sprite_colmode[5] == 2 ) ? sprite_5_tiles.rdata0[ sprite_5_xinsprite, 3 ] : 0;
        uint1 sprite_5_visiblex := ( pix_x >= sprite_x[5] ) && ( pix_x < ( sprite_x[5] + ( ( 16 >> sprite_colmode[5] ) << sprite_double[5] ) ) );
        uint1 sprite_5_visibley := ( pix_y >= sprite_y[5] ) && ( pix_y < ( sprite_y[5] + ( 16 << sprite_double[5] ) ) );
        uint1 sprite_5_visible := sprite_5_visiblex && sprite_5_visibley && ( sprite_5_spritepixel != 0 )  && sprite_active[5];
        uint4 sprite_6_xinsprite := ( 16 >> sprite_colmode[6] ) - 1  - ( ( pix_x - sprite_x[6] ) >> sprite_double[6] );
        uint4 sprite_6_spritepixel := ( sprite_colmode[6] == 0 ) ? sprite_6_tiles.rdata0[ sprite_6_xinsprite, 1 ] 
                                        : ( sprite_colmode[6] == 1 ) ? sprite_6_tiles.rdata0[ sprite_6_xinsprite, 2 ]
                                        : ( sprite_colmode[6] == 2 ) ? sprite_6_tiles.rdata0[ sprite_6_xinsprite, 3 ] : 0;
        uint1 sprite_6_visiblex := ( pix_x >= sprite_x[6] ) && ( pix_x < ( sprite_x[6] + ( ( 16 >> sprite_colmode[6] ) << sprite_double[6] ) ) );
        uint1 sprite_6_visibley := ( pix_y >= sprite_y[6] ) && ( pix_y < ( sprite_y[6] + ( 16 << sprite_double[6] ) ) );
        uint1 sprite_6_visible := sprite_6_visiblex && sprite_6_visibley && ( sprite_6_spritepixel != 0 )  && sprite_active[6];
        uint4 sprite_7_xinsprite := ( 16 >> sprite_colmode[7] ) - 1  - ( ( pix_x - sprite_x[7] ) >> sprite_double[7] );
        uint4 sprite_7_spritepixel := ( sprite_colmode[7] == 0 ) ? sprite_7_tiles.rdata0[ sprite_7_xinsprite, 1 ] 
                                        : ( sprite_colmode[7] == 1 ) ? sprite_7_tiles.rdata0[ sprite_7_xinsprite, 2 ]
                                        : ( sprite_colmode[7] == 2 ) ? sprite_7_tiles.rdata0[ sprite_7_xinsprite, 3 ] : 0;
        uint1 sprite_7_visiblex := ( pix_x >= sprite_x[7] ) && ( pix_x < ( sprite_x[7] + ( ( 16 >> sprite_colmode[7] ) << sprite_double[7] ) ) );
        uint1 sprite_7_visibley := ( pix_y >= sprite_y[7] ) && ( pix_y < ( sprite_y[7] + ( 16 << sprite_double[7] ) ) );
        uint1 sprite_7_visible := sprite_7_visiblex && sprite_7_visibley && ( sprite_7_spritepixel != 0 )  && sprite_active[7];
        uint4 sprite_8_xinsprite := ( 16 >> sprite_colmode[8] ) - 1  - ( ( pix_x - sprite_x[8] ) >> sprite_double[8] );
        uint4 sprite_8_spritepixel := ( sprite_colmode[8] == 0 ) ? sprite_8_tiles.rdata0[ sprite_8_xinsprite, 1 ] 
                                        : ( sprite_colmode[8] == 1 ) ? sprite_8_tiles.rdata0[ sprite_8_xinsprite, 2 ]
                                        : ( sprite_colmode[8] == 2 ) ? sprite_8_tiles.rdata0[ sprite_8_xinsprite, 3 ] : 0;
        uint1 sprite_8_visiblex := ( pix_x >= sprite_x[8] ) && ( pix_x < ( sprite_x[8] + ( ( 16 >> sprite_colmode[8] ) << sprite_double[8] ) ) );
        uint1 sprite_8_visibley := ( pix_y >= sprite_y[8] ) && ( pix_y < ( sprite_y[8] + ( 16 << sprite_double[8] ) ) );
        uint1 sprite_8_visible := sprite_8_visiblex && sprite_8_visibley && ( sprite_8_spritepixel != 0 )  && sprite_active[8];
        uint4 sprite_9_xinsprite := ( 16 >> sprite_colmode[9] ) - 1  - ( ( pix_x - sprite_x[9] ) >> sprite_double[9] );
        uint4 sprite_9_spritepixel := ( sprite_colmode[9] == 0 ) ? sprite_9_tiles.rdata0[ sprite_9_xinsprite, 1 ] 
                                        : ( sprite_colmode[9] == 1 ) ? sprite_9_tiles.rdata0[ sprite_9_xinsprite, 2 ]
                                        : ( sprite_colmode[9] == 2 ) ? sprite_9_tiles.rdata0[ sprite_9_xinsprite, 3 ] : 0;
        uint1 sprite_9_visiblex := ( pix_x >= sprite_x[9] ) && ( pix_x < ( sprite_x[9] + ( ( 16 >> sprite_colmode[9] ) << sprite_double[9] ) ) );
        uint1 sprite_9_visibley := ( pix_y >= sprite_y[9] ) && ( pix_y < ( sprite_y[9] + ( 16 << sprite_double[9] ) ) );
        uint1 sprite_9_visible := sprite_9_visiblex && sprite_9_visibley && ( sprite_9_spritepixel != 0 )  && sprite_active[9];
        uint4 sprite_10_xinsprite := ( 16 >> sprite_colmode[10] ) - 1  - ( ( pix_x - sprite_x[10] ) >> sprite_double[10] );
        uint4 sprite_10_spritepixel := ( sprite_colmode[10] == 0 ) ? sprite_10_tiles.rdata0[ sprite_10_xinsprite, 1 ] 
                                        : ( sprite_colmode[10] == 1 ) ? sprite_10_tiles.rdata0[ sprite_10_xinsprite, 2 ]
                                        : ( sprite_colmode[10] == 2 ) ? sprite_10_tiles.rdata0[ sprite_10_xinsprite, 3 ] : 0;
        uint1 sprite_10_visiblex := ( pix_x >= sprite_x[10] ) && ( pix_x < ( sprite_x[10] + ( ( 16 >> sprite_colmode[10] ) << sprite_double[10] ) ) );
        uint1 sprite_10_visibley := ( pix_y >= sprite_y[10] ) && ( pix_y < ( sprite_y[10] + ( 16 << sprite_double[10] ) ) );
        uint1 sprite_10_visible := sprite_10_visiblex && sprite_10_visibley && ( sprite_10_spritepixel != 0 )  && sprite_active[10];
        uint4 sprite_11_xinsprite := ( 16 >> sprite_colmode[11] ) - 1  - ( ( pix_x - sprite_x[11] ) >> sprite_double[11] );
        uint4 sprite_11_spritepixel := ( sprite_colmode[11] == 0 ) ? sprite_11_tiles.rdata0[ sprite_11_xinsprite, 1 ] 
                                        : ( sprite_colmode[11] == 1 ) ? sprite_11_tiles.rdata0[ sprite_11_xinsprite, 2 ]
                                        : ( sprite_colmode[11] == 2 ) ? sprite_11_tiles.rdata0[ sprite_11_xinsprite, 3 ] : 0;
        uint1 sprite_11_visiblex := ( pix_x >= sprite_x[11] ) && ( pix_x < ( sprite_x[11] + ( ( 16 >> sprite_colmode[11] ) << sprite_double[11] ) ) );
        uint1 sprite_11_visibley := ( pix_y >= sprite_y[11] ) && ( pix_y < ( sprite_y[11] + ( 16 << sprite_double[11] ) ) );
        uint1 sprite_11_visible := sprite_11_visiblex && sprite_11_visibley && ( sprite_11_spritepixel != 0 )  && sprite_active[11];
        uint4 sprite_12_xinsprite := ( 16 >> sprite_colmode[12] ) - 1  - ( ( pix_x - sprite_x[12] ) >> sprite_double[12] );
        uint4 sprite_12_spritepixel := ( sprite_colmode[12] == 0 ) ? sprite_12_tiles.rdata0[ sprite_12_xinsprite, 1 ] 
                                        : ( sprite_colmode[12] == 1 ) ? sprite_12_tiles.rdata0[ sprite_12_xinsprite, 2 ]
                                        : ( sprite_colmode[12] == 2 ) ? sprite_12_tiles.rdata0[ sprite_12_xinsprite, 3 ] : 0;
        uint1 sprite_12_visiblex := ( pix_x >= sprite_x[12] ) && ( pix_x < ( sprite_x[12] + ( ( 16 >> sprite_colmode[12] ) << sprite_double[12] ) ) );
        uint1 sprite_12_visibley := ( pix_y >= sprite_y[12] ) && ( pix_y < ( sprite_y[12] + ( 16 << sprite_double[12] ) ) );
        uint1 sprite_12_visible := sprite_12_visiblex && sprite_12_visibley && ( sprite_12_spritepixel != 0 )  && sprite_active[12];
        uint4 sprite_13_xinsprite := ( 16 >> sprite_colmode[13] ) - 1  - ( ( pix_x - sprite_x[13] ) >> sprite_double[13] );
        uint4 sprite_13_spritepixel := ( sprite_colmode[13] == 0 ) ? sprite_13_tiles.rdata0[ sprite_13_xinsprite, 1 ] 
                                        : ( sprite_colmode[13] == 1 ) ? sprite_13_tiles.rdata0[ sprite_13_xinsprite, 2 ]
                                        : ( sprite_colmode[13] == 2 ) ? sprite_13_tiles.rdata0[ sprite_13_xinsprite, 3 ] : 0;
        uint1 sprite_13_visiblex := ( pix_x >= sprite_x[13] ) && ( pix_x < ( sprite_x[13] + ( ( 16 >> sprite_colmode[13] ) << sprite_double[13] ) ) );
        uint1 sprite_13_visibley := ( pix_y >= sprite_y[13] ) && ( pix_y < ( sprite_y[13] + ( 16 << sprite_double[13] ) ) );
        uint1 sprite_13_visible := sprite_13_visiblex && sprite_13_visibley && ( sprite_13_spritepixel != 0 )  && sprite_active[13];
        uint4 sprite_14_xinsprite := ( 16 >> sprite_colmode[14] ) - 1  - ( ( pix_x - sprite_x[14] ) >> sprite_double[14] );
        uint4 sprite_14_spritepixel := ( sprite_colmode[14] == 0 ) ? sprite_14_tiles.rdata0[ sprite_14_xinsprite, 1 ] 
                                        : ( sprite_colmode[14] == 1 ) ? sprite_14_tiles.rdata0[ sprite_14_xinsprite, 2 ]
                                        : ( sprite_colmode[14] == 2 ) ? sprite_14_tiles.rdata0[ sprite_14_xinsprite, 3 ] : 0;
        uint1 sprite_14_visiblex := ( pix_x >= sprite_x[14] ) && ( pix_x < ( sprite_x[14] + ( ( 16 >> sprite_colmode[14] ) << sprite_double[14] ) ) );
        uint1 sprite_14_visibley := ( pix_y >= sprite_y[14] ) && ( pix_y < ( sprite_y[14] + ( 16 << sprite_double[14] ) ) );
        uint1 sprite_14_visible := sprite_14_visiblex && sprite_14_visibley && ( sprite_14_spritepixel != 0 )  && sprite_active[14];

    // Expand Sprite Update Deltas
    int11 deltax := { {9{spriteupdate( sprite_update ).dxsign}}, spriteupdate( sprite_update ).dx };
    int11 deltay := { {9{spriteupdate( sprite_update ).dysign}}, spriteupdate( sprite_update ).dy };
   
    // Set read and write address for the sprite tiles
        sprite_0_tiles.addr0 := sprite_tile_number[0] * 16 + ( ( pix_y - sprite_y[0] ) >> sprite_double[0] );
        sprite_0_tiles.wenable0 := 0;
        sprite_0_tiles.addr1 := sprite_writer_line;
        sprite_0_tiles.wdata1 := sprite_writer_bitmap;
        sprite_0_tiles.wenable1 := ( sprite_writer_sprite == 0 ) && sprite_writer_active;
        sprite_1_tiles.addr0 := sprite_tile_number[1] * 16 + ( ( pix_y - sprite_y[1] ) >> sprite_double[1] );
        sprite_1_tiles.wenable0 := 0;
        sprite_1_tiles.addr1 := sprite_writer_line;
        sprite_1_tiles.wdata1 := sprite_writer_bitmap;
        sprite_1_tiles.wenable1 := ( sprite_writer_sprite == 1 ) && sprite_writer_active;
        sprite_2_tiles.addr0 := sprite_tile_number[2] * 16 + ( ( pix_y - sprite_y[2] ) >> sprite_double[2] );
        sprite_2_tiles.wenable0 := 0;
        sprite_2_tiles.addr1 := sprite_writer_line;
        sprite_2_tiles.wdata1 := sprite_writer_bitmap;
        sprite_2_tiles.wenable1 := ( sprite_writer_sprite == 2 ) && sprite_writer_active;
        sprite_3_tiles.addr0 := sprite_tile_number[3] * 16 + ( ( pix_y - sprite_y[3] ) >> sprite_double[3] );
        sprite_3_tiles.wenable0 := 0;
        sprite_3_tiles.addr1 := sprite_writer_line;
        sprite_3_tiles.wdata1 := sprite_writer_bitmap;
        sprite_3_tiles.wenable1 := ( sprite_writer_sprite == 3 ) && sprite_writer_active;
        sprite_4_tiles.addr0 := sprite_tile_number[4] * 16 + ( ( pix_y - sprite_y[4] ) >> sprite_double[4] );
        sprite_4_tiles.wenable0 := 0;
        sprite_4_tiles.addr1 := sprite_writer_line;
        sprite_4_tiles.wdata1 := sprite_writer_bitmap;
        sprite_4_tiles.wenable1 := ( sprite_writer_sprite == 4 ) && sprite_writer_active;
        sprite_5_tiles.addr0 := sprite_tile_number[5] * 16 + ( ( pix_y - sprite_y[5] ) >> sprite_double[5] );
        sprite_5_tiles.wenable0 := 0;
        sprite_5_tiles.addr1 := sprite_writer_line;
        sprite_5_tiles.wdata1 := sprite_writer_bitmap;
        sprite_5_tiles.wenable1 := ( sprite_writer_sprite == 5 ) && sprite_writer_active;
        sprite_6_tiles.addr0 := sprite_tile_number[6] * 16 + ( ( pix_y - sprite_y[6] ) >> sprite_double[6] );
        sprite_6_tiles.wenable0 := 0;
        sprite_6_tiles.addr1 := sprite_writer_line;
        sprite_6_tiles.wdata1 := sprite_writer_bitmap;
        sprite_6_tiles.wenable1 := ( sprite_writer_sprite == 6 ) && sprite_writer_active;
        sprite_7_tiles.addr0 := sprite_tile_number[7] * 16 + ( ( pix_y - sprite_y[7] ) >> sprite_double[7] );
        sprite_7_tiles.wenable0 := 0;
        sprite_7_tiles.addr1 := sprite_writer_line;
        sprite_7_tiles.wdata1 := sprite_writer_bitmap;
        sprite_7_tiles.wenable1 := ( sprite_writer_sprite == 7 ) && sprite_writer_active;
        sprite_8_tiles.addr0 := sprite_tile_number[8] * 16 + ( ( pix_y - sprite_y[8] ) >> sprite_double[8] );
        sprite_8_tiles.wenable0 := 0;
        sprite_8_tiles.addr1 := sprite_writer_line;
        sprite_8_tiles.wdata1 := sprite_writer_bitmap;
        sprite_8_tiles.wenable1 := ( sprite_writer_sprite == 8 ) && sprite_writer_active;
        sprite_9_tiles.addr0 := sprite_tile_number[9] * 16 + ( ( pix_y - sprite_y[9] ) >> sprite_double[9] );
        sprite_9_tiles.wenable0 := 0;
        sprite_9_tiles.addr1 := sprite_writer_line;
        sprite_9_tiles.wdata1 := sprite_writer_bitmap;
        sprite_9_tiles.wenable1 := ( sprite_writer_sprite == 9 ) && sprite_writer_active;
        sprite_10_tiles.addr0 := sprite_tile_number[10] * 16 + ( ( pix_y - sprite_y[10] ) >> sprite_double[10] );
        sprite_10_tiles.wenable0 := 0;
        sprite_10_tiles.addr1 := sprite_writer_line;
        sprite_10_tiles.wdata1 := sprite_writer_bitmap;
        sprite_10_tiles.wenable1 := ( sprite_writer_sprite == 10 ) && sprite_writer_active;
        sprite_11_tiles.addr0 := sprite_tile_number[11] * 16 + ( ( pix_y - sprite_y[11] ) >> sprite_double[11] );
        sprite_11_tiles.wenable0 := 0;
        sprite_11_tiles.addr1 := sprite_writer_line;
        sprite_11_tiles.wdata1 := sprite_writer_bitmap;
        sprite_11_tiles.wenable1 := ( sprite_writer_sprite == 11 ) && sprite_writer_active;
        sprite_12_tiles.addr0 := sprite_tile_number[12] * 16 + ( ( pix_y - sprite_y[12] ) >> sprite_double[12] );
        sprite_12_tiles.wenable0 := 0;
        sprite_12_tiles.addr1 := sprite_writer_line;
        sprite_12_tiles.wdata1 := sprite_writer_bitmap;
        sprite_12_tiles.wenable1 := ( sprite_writer_sprite == 12 ) && sprite_writer_active;
        sprite_13_tiles.addr0 := sprite_tile_number[13] * 16 + ( ( pix_y - sprite_y[13] ) >> sprite_double[13] );
        sprite_13_tiles.wenable0 := 0;
        sprite_13_tiles.addr1 := sprite_writer_line;
        sprite_13_tiles.wdata1 := sprite_writer_bitmap;
        sprite_13_tiles.wenable1 := ( sprite_writer_sprite == 13 ) && sprite_writer_active;
        sprite_14_tiles.addr0 := sprite_tile_number[14] * 16 + ( ( pix_y - sprite_y[14] ) >> sprite_double[14] );
        sprite_14_tiles.wenable0 := 0;
        sprite_14_tiles.addr1 := sprite_writer_line;
        sprite_14_tiles.wdata1 := sprite_writer_bitmap;
        sprite_14_tiles.wenable1 := ( sprite_writer_sprite == 14 ) && sprite_writer_active;

    // Set 3 or 15 colour sprite palette
        palette[1] := sprite_palette_1;
        palette[2] := sprite_palette_2;
        palette[3] := sprite_palette_3;
        palette[4] := sprite_palette_4;
        palette[5] := sprite_palette_5;
        palette[6] := sprite_palette_6;
        palette[7] := sprite_palette_7;
        palette[8] := sprite_palette_8;
        palette[9] := sprite_palette_9;
        palette[10] := sprite_palette_10;
        palette[11] := sprite_palette_11;
        palette[12] := sprite_palette_12;
        palette[13] := sprite_palette_13;
        palette[14] := sprite_palette_14;
        palette[15] := sprite_palette_15;
    
    // Default to transparent
    sprite_layer_display := 0;

    // Write to the sprite_layer
    // Set tile bitmaps, x coordinate, y coordinate, colour, tile number, visibility, double
    always {
        // Output the characteristics of the sprite sprite_set_number
        sprite_read_active = sprite_active[ sprite_set_number ];
        sprite_read_double = sprite_double[ sprite_set_number ];
        sprite_read_colour = sprite_colour[ sprite_set_number ];
        sprite_read_x = sprite_x[ sprite_set_number ];
        sprite_read_y = sprite_y[ sprite_set_number ];
        sprite_read_tile = sprite_tile_number[ sprite_set_number ];

        switch( sprite_layer_write ) {
            case 1: { sprite_active[ sprite_set_number ] = sprite_set_active; }
            case 2: { sprite_tile_number[ sprite_set_number ] = sprite_set_tile; }
            case 3: { sprite_colour[ sprite_set_number ] = sprite_set_colour; }
            case 4: { sprite_x[ sprite_set_number ] = sprite_set_x; }
            case 5: { sprite_y[ sprite_set_number ] = sprite_set_y; }
            case 6: { sprite_double[ sprite_set_number ] = sprite_set_double; }
            case 7: { sprite_colmode[ sprite_set_number ] = sprite_set_colmode; }
            case 10: {
                // Perform sprite update
                sprite_colour[ sprite_set_number ] = ( spriteupdate( sprite_update ).colour_act ) ? spriteupdate( sprite_update ).colour : sprite_colour[ sprite_set_number ];
                sprite_tile_number[ sprite_set_number ] = ( spriteupdate( sprite_update ).tile_act ) ? sprite_tile_number[ sprite_set_number ] + 1 : sprite_tile_number[ sprite_set_number ];
                switch( { (sprite_y[ sprite_set_number ] < (-16)) || (sprite_y[ sprite_set_number ] > 480), (sprite_x[ sprite_set_number ] < (-16)) || (sprite_x[ sprite_set_number ] > 640) } ) {
                    case 2b00: {
                        sprite_x[ sprite_set_number ] = sprite_x[ sprite_set_number ] + deltax;
                        sprite_y[ sprite_set_number ] = sprite_y[ sprite_set_number ] + deltay;
                    }
                    case 2b01: {
                        sprite_x[ sprite_set_number ] = (sprite_x[ sprite_set_number ] < (-16)) ? 640 : -16;
                        sprite_y[ sprite_set_number ] = sprite_y[ sprite_set_number ] + deltay;
                        sprite_active[ sprite_set_number ] = ( spriteupdate( sprite_update ).x_act ) ? 0 : sprite_active[ sprite_set_number ];
                    }
                    case 2b10: {
                        sprite_x[ sprite_set_number ] = sprite_x[ sprite_set_number ] + deltax;
                        sprite_y[ sprite_set_number ] = (sprite_y[ sprite_set_number ] < (-16)) ? 480 : -16;
                        sprite_active[ sprite_set_number ] = ( spriteupdate( sprite_update ).y_act ) ? 0 : sprite_active[ sprite_set_number ];
                    }
                    case 2b11: {
                        sprite_active[ sprite_set_number ] = ( spriteupdate( sprite_update ).x_act ) || ( spriteupdate( sprite_update ).y_act ) ? 0 : sprite_active[ sprite_set_number ];
                    }
                }
            }
        }
    }
    
    // Render the sprite layer
    while(1) {
        
        if( pix_vblank ) {
            // RESET collision detection
                detect_collision_0 = 0;
                detect_collision_1 = 0;
                detect_collision_2 = 0;
                detect_collision_3 = 0;
                detect_collision_4 = 0;
                detect_collision_5 = 0;
                detect_collision_6 = 0;
                detect_collision_7 = 0;
                detect_collision_8 = 0;
                detect_collision_9 = 0;
                detect_collision_10 = 0;
                detect_collision_11 = 0;
                detect_collision_12 = 0;
                detect_collision_13 = 0;
                detect_collision_14 = 0;
        } else {
            if( pix_active ) {
                    if(  ( sprite_0_visible ) ) {
                        switch( sprite_colmode[0] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[0][4,2];
                                pix_green = sprite_colour[0][2,2];
                                pix_blue = sprite_colour[0][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_0_spritepixel ][4,2];
                                pix_green = palette[ sprite_0_spritepixel ][2,2];
                                pix_blue = palette[ sprite_0_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_0 = detect_collision_0 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_1_visible ) ) {
                        switch( sprite_colmode[1] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[1][4,2];
                                pix_green = sprite_colour[1][2,2];
                                pix_blue = sprite_colour[1][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_1_spritepixel ][4,2];
                                pix_green = palette[ sprite_1_spritepixel ][2,2];
                                pix_blue = palette[ sprite_1_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_1 = detect_collision_1 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_2_visible ) ) {
                        switch( sprite_colmode[2] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[2][4,2];
                                pix_green = sprite_colour[2][2,2];
                                pix_blue = sprite_colour[2][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_2_spritepixel ][4,2];
                                pix_green = palette[ sprite_2_spritepixel ][2,2];
                                pix_blue = palette[ sprite_2_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_2 = detect_collision_2 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_3_visible ) ) {
                        switch( sprite_colmode[3] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[3][4,2];
                                pix_green = sprite_colour[3][2,2];
                                pix_blue = sprite_colour[3][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_3_spritepixel ][4,2];
                                pix_green = palette[ sprite_3_spritepixel ][2,2];
                                pix_blue = palette[ sprite_3_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_3 = detect_collision_3 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_4_visible ) ) {
                        switch( sprite_colmode[4] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[4][4,2];
                                pix_green = sprite_colour[4][2,2];
                                pix_blue = sprite_colour[4][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_4_spritepixel ][4,2];
                                pix_green = palette[ sprite_4_spritepixel ][2,2];
                                pix_blue = palette[ sprite_4_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_4 = detect_collision_4 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_5_visible ) ) {
                        switch( sprite_colmode[5] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[5][4,2];
                                pix_green = sprite_colour[5][2,2];
                                pix_blue = sprite_colour[5][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_5_spritepixel ][4,2];
                                pix_green = palette[ sprite_5_spritepixel ][2,2];
                                pix_blue = palette[ sprite_5_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_5 = detect_collision_5 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_6_visible ) ) {
                        switch( sprite_colmode[6] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[6][4,2];
                                pix_green = sprite_colour[6][2,2];
                                pix_blue = sprite_colour[6][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_6_spritepixel ][4,2];
                                pix_green = palette[ sprite_6_spritepixel ][2,2];
                                pix_blue = palette[ sprite_6_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_6 = detect_collision_6 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_7_visible ) ) {
                        switch( sprite_colmode[7] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[7][4,2];
                                pix_green = sprite_colour[7][2,2];
                                pix_blue = sprite_colour[7][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_7_spritepixel ][4,2];
                                pix_green = palette[ sprite_7_spritepixel ][2,2];
                                pix_blue = palette[ sprite_7_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_7 = detect_collision_7 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_8_visible ) ) {
                        switch( sprite_colmode[8] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[8][4,2];
                                pix_green = sprite_colour[8][2,2];
                                pix_blue = sprite_colour[8][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_8_spritepixel ][4,2];
                                pix_green = palette[ sprite_8_spritepixel ][2,2];
                                pix_blue = palette[ sprite_8_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_8 = detect_collision_8 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_9_visible ) ) {
                        switch( sprite_colmode[9] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[9][4,2];
                                pix_green = sprite_colour[9][2,2];
                                pix_blue = sprite_colour[9][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_9_spritepixel ][4,2];
                                pix_green = palette[ sprite_9_spritepixel ][2,2];
                                pix_blue = palette[ sprite_9_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_9 = detect_collision_9 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_10_visible ) ) {
                        switch( sprite_colmode[10] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[10][4,2];
                                pix_green = sprite_colour[10][2,2];
                                pix_blue = sprite_colour[10][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_10_spritepixel ][4,2];
                                pix_green = palette[ sprite_10_spritepixel ][2,2];
                                pix_blue = palette[ sprite_10_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_10 = detect_collision_10 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_11_visible ) ) {
                        switch( sprite_colmode[11] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[11][4,2];
                                pix_green = sprite_colour[11][2,2];
                                pix_blue = sprite_colour[11][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_11_spritepixel ][4,2];
                                pix_green = palette[ sprite_11_spritepixel ][2,2];
                                pix_blue = palette[ sprite_11_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_11 = detect_collision_11 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_12_visible ) ) {
                        switch( sprite_colmode[12] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[12][4,2];
                                pix_green = sprite_colour[12][2,2];
                                pix_blue = sprite_colour[12][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_12_spritepixel ][4,2];
                                pix_green = palette[ sprite_12_spritepixel ][2,2];
                                pix_blue = palette[ sprite_12_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_12 = detect_collision_12 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_13_visible ) ) {
                        switch( sprite_colmode[13] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[13][4,2];
                                pix_green = sprite_colour[13][2,2];
                                pix_blue = sprite_colour[13][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_13_spritepixel ][4,2];
                                pix_green = palette[ sprite_13_spritepixel ][2,2];
                                pix_blue = palette[ sprite_13_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_13 = detect_collision_13 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
                    if(  ( sprite_14_visible ) ) {
                        switch( sprite_colmode[14] ) {
                            case 0: {
                                // Single colour
                                pix_red = sprite_colour[14][4,2];
                                pix_green = sprite_colour[14][2,2];
                                pix_blue = sprite_colour[14][0,2];
                            }
                            default: {
                                // 3 or 15 colour
                                pix_red = palette[ sprite_14_spritepixel ][4,2];
                                pix_green = palette[ sprite_14_spritepixel ][2,2];
                                pix_blue = palette[ sprite_14_spritepixel ][0,2];
                            }
                        }
                        sprite_layer_display = 1;
                        // Perform collision detection
                        detect_collision_14 = detect_collision_14 | {
                            bitmap_display, sprite_14_visible, sprite_13_visible, sprite_12_visible, sprite_11_visible, sprite_10_visible, sprite_9_visible, sprite_8_visible,  
                            sprite_7_visible, sprite_6_visible, sprite_5_visible, sprite_4_visible, sprite_3_visible, sprite_2_visible, sprite_1_visible, sprite_0_visible
                        };
                    }
            }
        }

        // Output collision detection
        if( ( pix_x == 639 ) && ( pix_y == 479 ) ) {
                collision_0 = detect_collision_0;
                collision_1 = detect_collision_1;
                collision_2 = detect_collision_2;
                collision_3 = detect_collision_3;
                collision_4 = detect_collision_4;
                collision_5 = detect_collision_5;
                collision_6 = detect_collision_6;
                collision_7 = detect_collision_7;
                collision_8 = detect_collision_8;
                collision_9 = detect_collision_9;
                collision_10 = detect_collision_10;
                collision_11 = detect_collision_11;
                collision_12 = detect_collision_12;
                collision_13 = detect_collision_13;
                collision_14 = detect_collision_14;
        }
    }
}

algorithm tilemap(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint2   pix_red,
    output! uint2   pix_green,
    output! uint2   pix_blue,
    output! uint1   tilemap_display,
    
    // Set TM at x, y, character with foreground and background
    input uint6 tm_x,
    input uint6 tm_y,
    input uint6 tm_character,
    input uint6 tm_foreground,
    input uint7 tm_background,
    input uint1 tm_write,

    // For setting tile bitmaps
    input   uint6   tile_writer_tile,
    input   uint4   tile_writer_line,
    input   uint16  tile_writer_bitmap,  
    input   uint1   tile_writer_write,
    
    // For scrolling/wrapping
    input   uint4   tm_scrollwrap,
    output  uint6   tm_active
) <autorun> {
    // Tile Map 64 x 16 x 16
    dualport_bram uint16 tiles16x16[ 1024 ] = { 0, pad(0) };
    
    // 42 x 32 tile map, allows for pixel scrolling with border
    // Setting background to 40 (ALPHA) allows the bitmap/background to show through
    dualport_bram uint6 tile[1344] = uninitialized;
    dualport_bram uint6 foreground[1344] = uninitialized;
    dualport_bram uint7 background[1344] = { 7h40, pad(7h40) };

    // Scroll position - -15 to 0 to 15
    // -15 or 15 will trigger appropriate scroll when next moved in that direction
    int5    tm_offset_x = 0;
    int5    tm_offset_y = 0;

    // Scroller/Wrapper storage
    uint1   tm_scroll = uninitialized;
    uint6   x_cursor = uninitialized;
    uint6   y_cursor = uninitialized;
    uint6   new_tile = uninitialized;
    uint7   new_background = uninitialized;
    uint6   new_foreground = uninitialized;
    uint6   scroll_tile = uninitialized;
    uint7   scroll_background = uninitialized;
    uint6   scroll_foreground = uninitialized;
    
    // Character position on the screen x 0-41, y 0-31 * 42 ( fetch it two pixels ahead of the actual x pixel, so it is always ready )
    // Adjust for the offsets, effective 0 point margin is ( 1,1 ) to ( 40,30 ) with a 1 tile border
    uint11   xtmpos := ( pix_active ? (pix_x < 640 ) ? pix_x + ( 11d18 + {{6{tm_offset_x[4,1]}}, tm_offset_x} ) : ( 11d16 + {{6{tm_offset_x[4,1]}}, tm_offset_x} ) : ( 11d16 + {{6{tm_offset_x[4,1]}}, tm_offset_x} ) ) >> 4;
    uint11  ytmpos := (( pix_vblank ? 0 : pix_y + ( 11d16 + {{6{tm_offset_y[4,1]}}, tm_offset_y} ) ) >> 4) * 42; 
    
    // Derive the x and y coordinate within the current 16x16 tilemap block x 0-7, y 0-15
    // Needs adjusting for the offsets
    uint4   xintm := { 1b0, (pix_x) & 15 } + tm_offset_x;
    uint4   yintm := { 1b0, (pix_y) & 15 } + tm_offset_y;
    
    // Derive the actual pixel in the current character
    uint1   tmpixel := tiles16x16.rdata0[15 - xintm,1];

    // Set up reading of tilemap and attribute memory
    // tile.rdata0 is the tile, foreground.rdata0 and background.rdata0 are the attribute being rendered
    tile.addr0 := xtmpos + ytmpos;
    tile.wenable0 := 0;
    tile.wenable1 := 0;
    foreground.addr0 := xtmpos + ytmpos;
    foreground.wenable0 := 0;
    foreground.wenable1 := 0;
    background.addr0 := xtmpos + ytmpos;
    background.wenable0 := 0;
    background.wenable1 := 0;

    // Setup the reading and writing of the tiles16x16
    tiles16x16.addr0 :=  tile.rdata0 * 16 + yintm;
    tiles16x16.addr1 := tile_writer_tile * 16 + tile_writer_line; 
    tiles16x16.wdata1 := tile_writer_bitmap;
    tiles16x16.wenable1 := tile_writer_write;

    // Default to transparent
    tilemap_display := pix_active && (( tmpixel ) || ( ~colour7(background.rdata0).alpha ));

    // Scroll/wrap
    always {
        switch( tm_write ) {
            case 1: {
                tile.addr1 = tm_x + tm_y * 42;
                tile.wdata1 = tm_character;
                tile.wenable1 = 1;
                background.addr1 = tm_x + tm_y * 42;
                background.wdata1 = tm_background;
                background.wenable1 = 1;
                foreground.addr1 = tm_x + tm_y * 42;
                foreground.wdata1 = tm_foreground;
                foreground.wenable1 = 1;
            }
        }
        switch( tm_scrollwrap ) {
            case 1: {
                // SCROLL LEFT
                tm_offset_x = ( tm_offset_x == (15) ) ? 0 : tm_offset_x + 1;
                tm_active = ( tm_offset_x == (15) ) ? 1 : 0;
                tm_scroll = 1;
            }
            case 2: {
                // SCROLL UP
                tm_offset_y = ( tm_offset_y == (15) ) ? 0 : tm_offset_y + 1;
                tm_active = ( tm_offset_y == (15) ) ? 15 : 0;
                tm_scroll = 1;
            }
            case 3: {
                // SCROLL RIGHT
                tm_offset_x = ( tm_offset_x == (-15) ) ? 0 : tm_offset_x - 1;
                tm_active = ( tm_offset_x == (-15) ) ? 8 : 0;
                tm_scroll = 1;
            }
            case 4: {
                // SCROLL DOWN
                tm_offset_y = ( tm_offset_y == (-15) ) ? 0 : tm_offset_y - 1;
                tm_active = ( tm_offset_y == (-15) ) ? 22 : 0;
                tm_scroll = 1;
            }
            case 5: {
                // WRAP LEFT
                tm_offset_x = ( tm_offset_x == (15) ) ? 0 : tm_offset_x + 1;
                tm_active = ( tm_offset_x == (15) ) ? 1 : 0;
                tm_scroll = 0;
            }
            case 6: {
                // WRAP UP
                tm_offset_y = ( tm_offset_y == (15) ) ? 0 : tm_offset_y + 1;
                tm_active = ( tm_offset_y == (15) ) ? 15 : 0;
                tm_scroll = 0;
            }
            case 7: {
                // WRAP RIGHT
                tm_offset_x = ( tm_offset_x == (-15) ) ? 0 : tm_offset_x - 1;
                tm_active = ( tm_offset_x == (-15) ) ? 8 : 0;
                tm_scroll = 0;
            }
            case 8: {
                // WRAP DOWN
                tm_offset_y = ( tm_offset_y == (-15) ) ? 0 : tm_offset_y - 1;
                tm_active = ( tm_offset_y == (-15) ) ? 22 : 0;
                tm_scroll = 0;
            }
        }
    }
    
    // Render the tilemap
    while(1) {
        switch( tm_active ) {
            case 1: {
                // Scroll/Wrap Left Setup
                x_cursor = 0;
                y_cursor = 0;
                tile.addr1 = 0;
                background.addr1 = 0;
                foreground.addr1 = 0;
                tm_active = 2;
            }
            case 2: {
                // Scroll/Wrap Left New Row - Save or wipe end column
                new_tile = ( tm_scroll == 1 ) ? 0 : tile.rdata1;
                new_foreground = ( tm_scroll == 1 ) ? 0 : foreground.rdata1;
                new_background = ( tm_scroll == 1 ) ? 7h40 : background.rdata1;
                tm_active = 3;
            }
            case 3: {
                // Scroll/Wrap Left Read Next Column
                tile.addr1 = x_cursor + 1 + ( y_cursor * 42);
                background.addr1 = x_cursor + 1 + ( y_cursor * 42);
                foreground.addr1 = x_cursor + 1 + ( y_cursor * 42);
                tm_active = 4;
            }
            case 4: {
                // Scroll/Wrap Left Read Next Column
                scroll_tile = tile.rdata1;
                scroll_foreground = foreground.rdata1;
                scroll_background = background.rdata1;
                tile.addr1 = x_cursor + ( y_cursor * 42);
                background.addr1 = x_cursor + ( y_cursor * 42);
                foreground.addr1 = x_cursor + ( y_cursor * 42);
                tm_active = 5;
            }
            case 5: {
                // Scroll/Wrap Left Write Column
                tile.wdata1 = scroll_tile;
                tile.wenable1 = 1;
                foreground.wdata1 = scroll_foreground;
                foreground.wenable1 = 1;
                background.wdata1 = scroll_background;
                background.wenable1 = 1;
                tm_active = 6;
            }
            case 6: {
                // Move to next column
                if( x_cursor == 41 ) {
                    tile.addr1 = 41 + ( y_cursor * 42);
                    tile.wdata1 = new_tile;
                    tile.wenable1 = 1;
                    foreground.addr1 = 41 + ( y_cursor * 42);
                    foreground.wdata1 = new_foreground;
                    foreground.wenable1 = 1;
                    background.addr1 = 41 + ( y_cursor * 42);
                    background.wdata1 = new_background;
                    background.wenable1 = 1;
                    x_cursor = 0;
                    y_cursor = ( y_cursor == 31 ) ? 0 : y_cursor + 1;
                    tm_active = ( y_cursor == 31 ) ? 0 : 7;
                } else {
                    x_cursor = x_cursor + 1;
                    tm_active = 3;
                }
            }
            case 7: {
                // Set address for the next row
                tile.addr1 = x_cursor + ( y_cursor * 42);
                background.addr1 = x_cursor + ( y_cursor * 42);
                foreground.addr1 = x_cursor + ( y_cursor * 42);
                tm_active = 2;
            }
            case 8: {
                // Scroll/Wrap Right Setup
                x_cursor = 41;
                y_cursor = 0;
                tile.addr1 = 0;
                background.addr1 = 0;
                foreground.addr1 = 0;
                tm_active = 9;
            }
            case 9: {
                // Scroll/Wrap Right New Row - Save or wipe end column
                new_tile = ( tm_scroll == 1 ) ? 0 : tile.rdata1;
                new_foreground = ( tm_scroll == 1 ) ? 0 : foreground.rdata1;
                new_background = ( tm_scroll == 1 ) ? 7h40 : background.rdata1;
                tm_active = 10;
            }
            case 10: {
                // Scroll/Wrap Right Read Next Column
                tile.addr1 = x_cursor - 1 + ( y_cursor * 42);
                background.addr1 = x_cursor - 1 + ( y_cursor * 42);
                foreground.addr1 = x_cursor - 1 + ( y_cursor * 42);
                tm_active = 11;
            }
            case 11: {
                // Scroll/Wrap Right Read Next Column
                scroll_tile = tile.rdata1;
                scroll_foreground = foreground.rdata1;
                scroll_background = background.rdata1;
                tile.addr1 = x_cursor + ( y_cursor * 42);
                background.addr1 = x_cursor + ( y_cursor * 42);
                foreground.addr1 = x_cursor + ( y_cursor * 42);
                tm_active = 12;
            }
            case 12: {
                // Scroll/Wrap Right Write Column
                tile.wdata1 = scroll_tile;
                tile.wenable1 = 1;
                foreground.wdata1 = scroll_foreground;
                foreground.wenable1 = 1;
                background.wdata1 = scroll_background;
                background.wenable1 = 1;
                tm_active = 13;
            }
            case 13: {
                // Move to next column
                if( x_cursor == 1 ) {
                    tile.addr1 = ( y_cursor * 42);
                    tile.wdata1 = new_tile;
                    tile.wenable1 = 1;
                    foreground.addr1 = ( y_cursor * 42);
                    foreground.wdata1 = new_foreground;
                    foreground.wenable1 = 1;
                    background.addr1 = ( y_cursor * 42);
                    background.wdata1 = new_background;
                    background.wenable1 = 1;
                    x_cursor = 41;
                    y_cursor = ( y_cursor == 31 ) ? 0 : y_cursor + 1;
                    tm_active = ( y_cursor == 31 ) ? 0 : 14;
                } else {
                    x_cursor = x_cursor - 1;
                    tm_active = 10;
                }
            }
            case 14: {
                // Set address for the next row
                tile.addr1 = x_cursor + ( y_cursor * 42);
                background.addr1 = x_cursor + ( y_cursor * 42);
                foreground.addr1 = x_cursor + ( y_cursor * 42);
                tm_active = 8;
            }
            case 15: {
                // Scroll/Wrap Up Setup
                x_cursor = 0;
                y_cursor = 0;
                tile.addr1 = 0;
                background.addr1 = 0;
                foreground.addr1 = 0;
                tm_active = 16;
            }
            case 16: {
                // Scroll/Wrap Up New Column - Save or wipe end row
                new_tile = ( tm_scroll == 1 ) ? 0 : tile.rdata1;
                new_foreground = ( tm_scroll == 1 ) ? 0 : foreground.rdata1;
                new_background = ( tm_scroll == 1 ) ? 7h40 : background.rdata1;
                tm_active = 17;
            }
            case 17: {
                // Scroll/Wrap Up Read Next Row
                tile.addr1 = x_cursor + 42 + ( y_cursor * 42);
                background.addr1 = x_cursor + 42 + ( y_cursor * 42);
                foreground.addr1 = x_cursor + 42 + ( y_cursor * 42);
                tm_active = 18;
            }
            case 18: {
                // Scroll/Wrap Right Read Next Row
                scroll_tile = tile.rdata1;
                scroll_foreground = foreground.rdata1;
                scroll_background = background.rdata1;
                tm_active = 19;
            }
            case 19: {
                // Scroll/Wrap Up Write Row
                tile.addr1 = x_cursor + ( y_cursor * 42);
                tile.wdata1 = scroll_tile;
                tile.wenable1 = 1;
                background.addr1 = x_cursor + ( y_cursor * 42);
                background.wdata1 = scroll_background;
                background.wenable1 = 1;
                foreground.addr1 = x_cursor + ( y_cursor * 42);
                foreground.wdata1 = scroll_foreground;
                foreground.wenable1 = 1;
                tm_active = 20;
            }
            case 20: {
                // Move to next row
                if( y_cursor == 30 ) {
                    tile.addr1 = ( x_cursor ) + ( 31 * 42);
                    tile.wdata1 = new_tile;
                    tile.wenable1 = 1;
                    foreground.addr1 = ( x_cursor ) + ( 31 * 42);
                    foreground.wdata1 = new_foreground;
                    foreground.wenable1 = 1;
                    background.addr1 = ( x_cursor ) + ( 31 * 42);
                    background.wdata1 = new_background;
                    background.wenable1 = 1;
                    y_cursor = 0;
                    x_cursor = ( x_cursor == 41 ) ? 0 : x_cursor + 1;
                    tm_active = ( x_cursor == 41 ) ? 0 : 21;
                } else {
                    y_cursor = y_cursor + 1;
                    tm_active = 17;
                }
            }
            case 21: {
                // Set address for the next row
                tile.addr1 = x_cursor;
                background.addr1 = x_cursor;
                foreground.addr1 = x_cursor;
                tm_active = 16;
            }
            case 22: {
                // Scroll/Wrap Down Setup
                x_cursor = 0;
                y_cursor = 31;
                tile.addr1 = 31 * 42;
                background.addr1 = 31 * 42;
                foreground.addr1 = 31 * 42;
                tm_active = 23;
            }
            case 23: {
                // Scroll/Wrap Up New Column - Save or wipe end row
                new_tile = ( tm_scroll == 1 ) ? 0 : tile.rdata1;
                new_foreground = ( tm_scroll == 1 ) ? 0 : foreground.rdata1;
                new_background = ( tm_scroll == 1 ) ? 7h40 : background.rdata1;
                tm_active = 24;
            }
            case 24: {
                // Scroll/Wrap Up Read Next Row
                tile.addr1 = x_cursor + ( y_cursor * 42) - 42;
                background.addr1 = x_cursor + ( y_cursor * 42) - 42;
                foreground.addr1 = x_cursor + ( y_cursor * 42) - 42;
                tm_active = 25;
            }
            case 25: {
                // Scroll/Wrap Up Read Next Row
                scroll_tile = tile.rdata1;
                scroll_foreground = foreground.rdata1;
                scroll_background = background.rdata1;
                tile.addr1 = x_cursor + ( y_cursor * 42);
                background.addr1 = x_cursor + ( y_cursor * 42);
                foreground.addr1 = x_cursor + ( y_cursor * 42);
                tm_active = 26;
            }
            case 26: {
                // Scroll/Wrap Up Write Row
                tile.wdata1 = scroll_tile;
                tile.wenable1 = 1;
                foreground.wdata1 = scroll_foreground;
                foreground.wenable1 = 1;
                background.wdata1 = scroll_background;
                background.wenable1 = 1;
                tm_active = 27;
            }
            case 27: {
                // Move to next row
                if( y_cursor == 0 ) {
                    tile.addr1 = ( x_cursor );
                    tile.wdata1 = new_tile;
                    tile.wenable1 = 1;
                    foreground.addr1 = ( x_cursor );
                    foreground.wdata1 = new_foreground;
                    foreground.wenable1 = 1;
                    background.addr1 = ( x_cursor );
                    background.wdata1 = new_background;
                    background.wenable1 = 1;
                    y_cursor = 31;
                    x_cursor = ( x_cursor == 41 ) ? 0 : x_cursor + 1;
                    tm_active = ( x_cursor == 41 ) ? 0 : 28;
                } else {
                    y_cursor = y_cursor + 1;
                    tm_active = 24;
                }
            }
            case 28: {
                // Set address for the next row
                tile.addr1 = x_cursor + ( 31 * 42);
                background.addr1 = x_cursor + ( 31 * 42);
                foreground.addr1 = x_cursor + ( 31 * 42);
                tm_active = 23;
            }
            default: { tm_active = 0; }
        }
        
        if( tilemap_display ) {
            // Determine if background or foreground
            switch( tmpixel ) {
                case 0: {
                    // BACKGROUND
                    pix_red = colour7(background.rdata0).red;
                    pix_green = colour7(background.rdata0).green;
                    pix_blue = colour7(background.rdata0).blue;
                }
                case 1: {
                    // foreground
                    pix_red = colour6(foreground.rdata0).red;
                    pix_green = colour6(foreground.rdata0).green;
                    pix_blue = colour6(foreground.rdata0).blue;
                }
            }
        } 
    }
}

// Vector Block
// Stores blocks of upto 16 vertices which can be sent to the GPU for line drawing
// Each vertices represents a delta from the centre of the vector
// Deltas are stored as 6 bit 2's complement range -31 to 0 to 31
// Each vertices has an active flag, processing of a vector block stops when the active flag is 0
// Each vector block has a centre x and y coordinate and a colour { rrggbb } when drawn

algorithm vectors(
    input   uint4   vector_block_number,
    input   uint7   vector_block_colour,
    input   int11   vector_block_xc,
    input   int11   vector_block_yc,
    
    input   uint1   draw_vector,

    // For setting vertices
    input   uint4   vertices_writer_block,
    input   uint6   vertices_writer_vertex,
    input   int6    vertices_writer_xdelta,  
    input   int6    vertices_writer_ydelta,
    input   uint1   vertices_writer_active,
    input   uint1   vertices_writer_write,
    
    output  uint3   vector_block_active,
    
    // Communication with the GPU
    output  int11 gpu_x,
    output  int11 gpu_y,
    output  uint7 gpu_colour,
    output  int11 gpu_param0,
    output  int11 gpu_param1,
    output  uint4 gpu_write,

    // Communication from the DISPLAY LIST DRAWER
    input  uint4   dl_vector_block_number,
    input  uint7   dl_vector_block_colour,
    input  int11   dl_vector_block_xc,
    input  int11   dl_vector_block_yc,
    input  uint1   dl_draw_vector,

    input  uint4 gpu_active
) <autorun> {
    // 16 vector blocks each of 16 vertices
    dualport_bram uint1 A[256] = uninitialised;    
    dualport_bram int6 dy[256] = uninitialised;    
    dualport_bram int6 dx[256] = uninitialised;    

    // Extract deltax and deltay for the present vertices
    int11 deltax := { {6{dx.rdata0[5,1]}}, dx.rdata0[0,5] };
    int11 deltay := { {6{dy.rdata0[5,1]}}, dy.rdata0[0,5] };
    
    // Vertices being processed, plus first coordinate of each line
    uint5 block_number = uninitialised;
    uint4 vertices_number = uninitialised;
    int11 start_x = uninitialised;
    int11 start_y = uninitialised;

    // Set read and write address for the vertices
    A.addr0 := block_number * 16 + vertices_number;
    A.wenable0 := 0;
    A.addr1 := vertices_writer_block * 16 + vertices_writer_vertex;
    A.wdata1 := vertices_writer_active;
    A.wenable1 := vertices_writer_write;
    
    dx.addr0 := block_number * 16 + vertices_number;
    dx.wenable0 := 0;
    dx.addr1 := vertices_writer_block * 16 + vertices_writer_vertex;
    dx.wdata1 := vertices_writer_xdelta;
    dx.wenable1 := vertices_writer_write;
    
    dy.addr0 := block_number * 16 + vertices_number;
    dy.wenable0 := 0;
    dy.addr1 := vertices_writer_block * 16 + vertices_writer_vertex;
    dy.wdata1 := vertices_writer_ydelta;
    dy.wenable1 := vertices_writer_write;

    gpu_write := 0;

    always {
        if( dl_draw_vector ) {
            block_number = dl_vector_block_number;
            gpu_colour = dl_vector_block_colour;
        } else {
            if( draw_vector ) {
                block_number = vector_block_number;
                gpu_colour = vector_block_colour;
            }
        }
    }
    
    vector_block_active = 0;
    vertices_number = 0;
    
    while(1) {
        switch( vector_block_active ) {
            case 1: {
                // Delay to allow reading of the first vertex
                vector_block_active = 2;
            }
            case 2: {
                // Read the first of the vertices
                start_x = vector_block_xc + deltax;
                start_y = vector_block_yc + deltay;
                vertices_number = 1;
                vector_block_active = 3;
            }
            case 3: {
                // Delay to allow reading of the next vertices
                vector_block_active = 4;
            }
            case 4: {
                // See if the next of the vertices is active and await the GPU
                vector_block_active = ( A.rdata0 ) ? ( gpu_active != 0 ) ? 4 : 5 : 0;
            }
            case 5: {
                // Send the line to the GPU
                gpu_x = start_x;
                gpu_y = start_y;
                gpu_param0 = vector_block_xc + deltax;
                gpu_param1 = vector_block_yc + deltay;
                gpu_write = 3;
                
                // Move onto the next of the vertices
                start_x = vector_block_xc + deltax;
                start_y = vector_block_yc + deltay;
                vertices_number = ( vertices_number == 15 ) ? 0: vertices_number + 1;
                vector_block_active = ( vertices_number == 15 ) ? 0 : 3;
            }
            default: {
                vector_block_active = ( draw_vector ) ? 1 : ( dl_draw_vector) ? 1 : 0;
                vertices_number = 0;
            }
        }
    }
}



// Display List
// Stores GPU or VECTOR commands
// Each display list entry consists of:
//      active
//      command ( 1 - 7 copy details across to the GPU )
//              ( 14    copy details to the vector drawer )

algorithm displaylist(
    input   uint8   start_entry,
    input   uint8   finish_entry,
    input   uint1   start_displaylist,
    output  uint4   display_list_active,
    
    input   uint8   writer_entry_number,
    input   uint1   writer_active,
    input   uint4   writer_command,
    input   uint7   writer_colour,
    input   uint11  writer_x,
    input   uint11  writer_y,
    input   uint11  writer_p0,
    input   uint11  writer_p1,
    input   uint4   writer_write,

    // Communication with the GPU
    output  int11 gpu_x,
    output  int11 gpu_y,
    output  uint7 gpu_colour,
    output  int11 gpu_param0,
    output  int11 gpu_param1,
    output  uint4 gpu_write,
    input   uint4 gpu_active,

    // Communication with the VECTOR DRAWER
    output  uint5   vector_block_number,
    output  uint7   vector_block_colour,
    output  int11   vector_block_xc,
    output  int11   vector_block_yc,
    output  uint1   draw_vector,
    input   uint3   vector_block_active
) {
    // 256 display list entries
    dualport_bram uint1 A[256] = uninitialised;    
    dualport_bram uint4 command[256] = uninitialised;    
    dualport_bram uint7 colour[256] = uninitialised;    
    dualport_bram int11 x[256] = uninitialised;    
    dualport_bram int11 y[256] = uninitialised;    
    dualport_bram int11 p0[256] = uninitialised;    
    dualport_bram int11 p1[256] = uninitialised;    

    uint8   entry_number = uninitialised;
    uint8   finish_number = uninitialised;
    
    // Set read address for the display list entry being processed
    A.addr0 := entry_number;
    A.wenable0 := 0;
    A.addr1 := writer_entry_number;
    A.wdata1 := writer_active;
    A.wenable1 := ( writer_write == 1 ) || ( writer_write == 3 );

    command.addr0 := entry_number;
    command.wenable0 := 0;
    command.addr1 := writer_entry_number;
    command.wdata1 := writer_command;
    command.wenable1 := ( writer_write == 1 ) || ( writer_write == 4 );

    colour.addr0 := entry_number;
    colour.wenable0 := 0;
    colour.addr1 := writer_entry_number;
    colour.wdata1 := writer_colour;
    colour.wenable1 := ( writer_write == 1 ) || ( writer_write == 5 );

    x.addr0 := entry_number;
    x.wenable0 := 0;
    x.addr1 := writer_entry_number;
    x.wdata1 := writer_x;
    x.wenable1 := ( writer_write == 1 ) || ( writer_write == 6 );

    y.addr0 := entry_number;
    y.wenable0 := 0;
    y.addr1 := writer_entry_number;
    y.wdata1 := writer_y;
    y.wenable1 := ( writer_write == 1 ) || ( writer_write == 7 );

    p0.addr0 := entry_number;
    p0.wenable0 := 0;
    p0.addr1 := writer_entry_number;
    p0.wdata1 := writer_p0;
    p0.wenable1 := ( writer_write == 1 ) || ( writer_write == 8 );

    p1.addr0 := entry_number;
    p1.wenable0 := 0;
    p1.addr1 := writer_entry_number;
    p1.wdata1 := writer_p1;
    p1.wenable1 := ( writer_write == 1 ) || ( writer_write == 9 );

    // Dispatch to the VECTOR DRAWER
    vector_block_colour := colour.rdata0;
    vector_block_number := p0.rdata0;
    vector_block_xc := x.rdata0;
    vector_block_yc := y.rdata0;
    draw_vector := ( display_list_active == 4 ) && ( command.rdata0 == 15 ) ? 1 : 0;

    // Dispatch to the GPU
    gpu_write := ( display_list_active == 4 ) && ( command.rdata0 != 15 ) ? command.rdata0 : 0;
    gpu_colour := colour.rdata0;
    gpu_x := x.rdata0;
    gpu_y := y.rdata0;
    gpu_param0 := p0.rdata0;
    gpu_param1 := p1.rdata0;

    while(1) {
        switch( display_list_active ) {
            case 1: {
                // Delay to allow reading of the first entry
                display_list_active = 2;
            }
            case 2: {
                // Delay to allow reading of the first entry
                display_list_active = 3;
            }
            case 3: {
                if( A.rdata0 == 1 ) {
                    // Wait for the GPU and the VECTOR DRAWER to both finish
                    display_list_active = ( gpu_active == 0 ) && ( vector_block_active == 0 ) ? 4 : 3;
                } else {
                    entry_number = ( entry_number == finish_number ) ? start_entry : entry_number + 1;
                    display_list_active = ( entry_number == finish_number ) ? 0 : 1;
                }
            }
            case 4: {
                //Pause to allow time to dispatch to VECTOR DRAWER or GPU 
                display_list_active = 5;
            }
            case 5: {
                // Reset GPU and VECTOR DRAWER output
                gpu_write = 0;
                draw_vector = 0;
                // Move to the next entry
                entry_number = ( entry_number == finish_number ) ? start_entry : entry_number + 1;
                display_list_active = ( entry_number == finish_number ) ? 0 : 1;
            }
            default: {
                display_list_active = ( start_displaylist == 1 ) ? 1 : 0;
                entry_number = start_entry;
                finish_number = finish_entry;
            }
        }
     }
}

// Runs at 25MHz, using the video clock
algorithm apu(
    // Waveform selected 0 = square, 1 = sawtooth, 2 = triangle, 3 = sine wave, 4 = noise
    input   uint3   waveform,
    // Note selected 0 = silence, 1 - x = Deep C through to Double High D (gives 64 distint notes) 
    input   uint6   note,
    
    // Duration in ms, 1000 = 1 second,
    input   uint16  duration,
    output! uint1   audio_active,
    
    // Activate the APU (select the channel, 1, 2 or 3(?) )
    input   uint2   apu_write,
    
    output! uint4   audio_output,
    
    input uint16 staticGenerator
) <autorun> {
    // 32 step points per waveform
    brom uint4 waveformtable_1[] = {
        // Square wave
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        // Sawtooth wave
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
        8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
        
        // Triangle wave,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
        
        // Sine wave,
        7, 8, 10, 11, 12, 13, 13, 14, 15, 14, 13, 13, 12, 11, 10, 8,
        7, 6, 4, 3, 2, 1, 1, 0, 0, 0, 1, 1, 2, 3, 4, 6
    };
    brom uint4 waveformtable_2[] = {
        // Square wave
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        // Sawtooth wave
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
        8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
        
        // Triangle wave,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
        
        // Sine wave,
        7, 8, 10, 11, 12, 13, 13, 14, 15, 14, 13, 13, 12, 11, 10, 8,
        7, 6, 4, 3, 2, 1, 1, 0, 0, 0, 1, 1, 2, 3, 4, 6
    };
    brom uint4 waveformtable_3[] = {
        // Square wave
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        
        // Sawtooth wave
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
        8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
        
        // Triangle wave,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
        
        // Sine wave,
        7, 8, 10, 11, 12, 13, 13, 14, 15, 14, 13, 13, 12, 11, 10, 8,
        7, 6, 4, 3, 2, 1, 1, 0, 0, 0, 1, 1, 2, 3, 4, 6
    };
    
    // Calculated as 25MHz / note frequency / 32 to give 32 step points per note
    brom uint16 frequencytable_1[64] = {
        0,
        23889, 22548, 21283, 20088, 18961, 17897, 16892, 15944, 15049, 14205, 13407, 12655,     // 1 = C 2 or Deep C
        11945, 11274, 10641, 10044, 9480, 8948, 8446, 7972, 7525, 7102, 6704, 6327,             // 13 = C 3
        5972, 5637, 5321, 5022, 4740, 4474, 4223, 3986, 3762, 3551, 3352, 3164,                 // 25 = C 4 or Middle C
        2896, 2819, 2660, 2511, 2370, 2237, 2112, 1993, 1881, 1776, 1676, 1582,                 // 37 = C 5 or Tenor C
        1493, 1409, 1330, 1256, 1185, 1119, 1056, 997, 941, 888, 838, 791,                      // 49 = C 6 or Soprano C
        747, 705, 665                                                                           // 61 = C 7 or Double High C
    };
    brom uint16 frequencytable_2[64] = {
        0,
        23889, 22548, 21283, 20088, 18961, 17897, 16892, 15944, 15049, 14205, 13407, 12655,     // 1 = C 2 or Deep C
        11945, 11274, 10641, 10044, 9480, 8948, 8446, 7972, 7525, 7102, 6704, 6327,             // 13 = C 3
        5972, 5637, 5321, 5022, 4740, 4474, 4223, 3986, 3762, 3551, 3352, 3164,                 // 25 = C 4 or Middle C
        2896, 2819, 2660, 2511, 2370, 2237, 2112, 1993, 1881, 1776, 1676, 1582,                 // 37 = C 5 or Tenor C
        1493, 1409, 1330, 1256, 1185, 1119, 1056, 997, 941, 888, 838, 791,                      // 49 = C 6 or Soprano C
        747, 705, 665                                                                           // 61 = C 7 or Double High C
    };
    brom uint16 frequencytable_3[64] = {
        0,
        23889, 22548, 21283, 20088, 18961, 17897, 16892, 15944, 15049, 14205, 13407, 12655,     // 1 = C 2 or Deep C
        11945, 11274, 10641, 10044, 9480, 8948, 8446, 7972, 7525, 7102, 6704, 6327,             // 13 = C 3
        5972, 5637, 5321, 5022, 4740, 4474, 4223, 3986, 3762, 3551, 3352, 3164,                 // 25 = C 4 or Middle C
        2896, 2819, 2660, 2511, 2370, 2237, 2112, 1993, 1881, 1776, 1676, 1582,                 // 37 = C 5 or Tenor C
        1493, 1409, 1330, 1256, 1185, 1119, 1056, 997, 941, 888, 838, 791,                      // 49 = C 6 or Soprano C
        747, 705, 665                                                                           // 61 = C 7 or Double High C
    };
    
    uint3   waveform_1 = uninitialized;
    uint6   note_1 = uninitialized;
    uint5   point_1 = uninitialized;   
    uint16  counter25mhz_1 = uninitialized;
    uint16  counter1khz_1 = uninitialized;
    uint16  milliseconds_1 = uninitialized;
    uint3   waveform_2 = uninitialized;
    uint6   note_2 = uninitialized;
    uint5   point_2 = uninitialized;   
    uint16  counter25mhz_2 = uninitialized;
    uint16  counter1khz_2 = uninitialized;
    uint16  milliseconds_2 = uninitialized;
    uint3   waveform_3 = uninitialized;
    uint6   note_3 = uninitialized;
    uint5   point_3 = uninitialized;   
    uint16  counter25mhz_3 = uninitialized;
    uint16  counter1khz_3 = uninitialized;
    uint16  milliseconds_3 = uninitialized;

    uint16  duration_1 = uninitialized;
    uint16  duration_2 = uninitialized;
    uint16  duration_3 = uninitialized;
    
    uint4   audio_output_1 := waveformtable_1.rdata;
    uint16  note_1_frequency := frequencytable_1.rdata;
    uint4   audio_output_2 := waveformtable_1.rdata;
    uint16  note_2_frequency := frequencytable_2.rdata;
    uint4   audio_output_3 := waveformtable_3.rdata;
    uint16  note_3_frequency := frequencytable_3.rdata;

    waveformtable_1.addr := waveform_1 * 32 + point_1;
    frequencytable_1.addr := note_1;
    waveformtable_2.addr := waveform_2 * 32 + point_2;
    frequencytable_2.addr := note_2;
    waveformtable_3.addr := waveform_3 * 32 + point_3;
    frequencytable_3.addr := note_3;
    
    audio_active := ( duration_1 > 0) || ( duration_2 > 0 ) || ( duration_3 > 0 );
    
    always {
        if( ( note_1 != 0 ) && ( counter25mhz_1 == 0 ) ) {
            audio_output = ( waveform_1 == 4 ) ? staticGenerator : audio_output_1;
        }
        if( ( note_2 != 0 ) && ( counter25mhz_2 == 0 ) ) {
            audio_output = ( waveform_2 == 4 ) ? staticGenerator : audio_output_2;
        }
        if( ( note_3 != 0 ) && ( counter25mhz_3 == 0 ) ) {
            audio_output = ( waveform_3 == 4 ) ? staticGenerator : audio_output_3;
        }
    }
    
    while(1) {
        switch( apu_write) {
            case 1: {
                // Latch the selected note, waveform and duration
                waveform_1 = waveform;
                note_1 = note;
                duration_1 = duration;
                milliseconds_1 = 0;
                point_1 = 0;
                counter25mhz_1 = 0;
                counter1khz_1 = 25000;
            }
            case 2: {
                // Latch the selected note, waveform and duration
                waveform_2 = waveform;
                note_2 = note;
                duration_2 = duration;
                milliseconds_2 = 0;
                point_2 = 0;
                counter25mhz_2 = 0;
                counter1khz_2 = 25000;
            }
            case 3: {
                // Latch the selected note, waveform and duration
                waveform_3 = waveform;
                note_3 = note;
                duration_3 = duration;
                milliseconds_3 = 0;
                point_3 = 0;
                counter25mhz_3 = 0;
                counter1khz_3 = 25000;
            }
            default: {
                if( duration_1 != 0 ) {
                    counter25mhz_1 = ( counter25mhz_1 != 0 ) ? counter25mhz_1 - 1 : note_1_frequency;
                    point_1 = ( counter25mhz_1 != 0 ) ? point_1 : point_1 + 1;
                    counter1khz_1 = ( counter1khz_1 != 0 ) ? counter1khz_1 - 1 : 25000;
                    duration_1 = ( counter1khz_1 != 0 ) ? duration_1 : duration_1 - 1;
                } else {
                    note_1 = 0;
                }
                if( duration_2 != 0 ) {
                    counter25mhz_2 = ( counter25mhz_2 != 0 ) ? counter25mhz_2 - 1 : note_2_frequency;
                    point_2 = ( counter25mhz_2 != 0 ) ? point_2 : point_2 + 1;
                    counter1khz_2 = ( counter1khz_2 != 0 ) ? counter1khz_2 - 1 : 25000;
                    duration_2 = ( counter1khz_2 != 0 ) ? duration_2 : duration_2 - 1;
                } else {
                    note_2 = 0;
                }
                if( duration_3 != 0 ) {
                    counter25mhz_3 = ( counter25mhz_3 != 0 ) ? counter25mhz_3 - 1 : note_3_frequency;
                    point_3 = ( counter25mhz_3 != 0 ) ? point_3 : point_3 + 1;
                    counter1khz_3 = ( counter1khz_3 != 0 ) ? counter1khz_3 - 1 : 25000;
                    duration_3 = ( counter1khz_3 != 0 ) ? duration_3 : duration_3 - 1;
                } else {
                    note_3 = 0;
                }
            }
        }
   }
}


import('../common/ulx3s_clk_50_25.v')
import('../common/reset_conditioner.v')

// 7 bit colour either ALPHA (background or lower layer) or red, green, blue { Arrggbb }
bitfield colour7 {
    uint1   alpha,
    uint2   red,
    uint2   green, 
    uint2   blue
}

// 6 bit colour red, green, blue { rrggbb }
bitfield colour6 {
    uint2   red,
    uint2   green, 
    uint2   blue
}

// BITFIELDS to help with bit/field access

// Instruction is 3 bits 1xx = literal value, 000 = branch, 001 = 0branch, 010 = call, 011 = alu, followed by 13 bits of instruction specific data
bitfield instruction {
    uint3   is_litcallbranchalu,
    uint13   padding
}

// A literal instruction is 1 followed by a 15 bit UNSIGNED literal value
bitfield literal {
    uint1   is_literal,
    uint15  literalvalue
}

// A branch, 0branch or call instruction is 0 followed by 00 = branch, 01 = 0branch, 10 = call followed by 13bit target address 
bitfield callbranch {
    uint1   is_literal,
    uint2   is_callbranchalu,
    uint13  address
}
// An alu instruction is 0 (not literal) followed by 11 = alu
bitfield aluop {
    uint1   is_literal,
    uint2   is_callbranchalu,
    uint1   is_r2pc,                // return from subroutine
    uint4   operation,              // arithmetic / memory read/write operation to perform
    uint1   is_t2n,                 // top to next in stack
    uint1   is_t2r,                 // top to return stack
    uint1   is_n2memt,              // write to memory       
    uint1   is_j1j1plus,            // Original J1 or extra J1+ alu operations
    uint1   rdelta1,                // two's complement adjustment for rsp
    uint1   rdelta0,
    uint1   ddelta1,                // two's complement adjustment for dsp
    uint1   ddelta0
}

// Simplify access to high/low byte
bitfield bytes {
    uint8   byte1,
    uint8   byte0
}

// Simplify access to 4bit nibbles (used to extract shift left/right amount)
bitfield nibbles {
    uint4   nibble3,
    uint4   nibble2,
    uint4   nibble1,
    uint4   nibble0
}

algorithm main(
    // LEDS (8 of)
    output  uint8   leds,
    input   uint7 btns,
        
    output  uint4   gpdi_dp,
    output  uint4   gpdi_dn,

    // UART
    output! uint1   uart_tx,
    input   uint1   uart_rx,

    // AUDIO
    output! uint4   audio_l,
    output! uint4   audio_r,
    
    // VGA/HDMI
    output! uint6   video_r,
    output! uint6   video_g,
    output! uint6   video_b,
    output! uint1   video_hs,
    output! uint1   video_vs
) 
<@clock_50mhz> // ULX3S has a 25 MHz clock, so we use a PLL to bring it up to 50 MHz
{
    // 1hz timers (p1hz used for systemClock and systemClockMHz, timer1hz for user purposes)
    uint16 systemClock = uninitialized;
    uint32 systemClockMHz = uninitialized;
    pulse1hz p1hz ( 
        counter1hz :> systemClock,
        counter50mhz :> systemClockMHz
    );
    pulse1hz timer1hz( );

    // 1khz timers (sleepTimer used for sleep command, timer1khz for user purposes)
    pulse1khz sleepTimer( );
    pulse1khz timer1khz( );

    // RNG random number generator
    uint16 staticGenerator = 0;
    random rng (
        g_noise_out :> staticGenerator
    );
    
    // UART tx and rx
    // UART written in Silice by https://github.com/sylefeb/Silice
    uart_out uo;
    uart_sender usend (
        io      <:> uo,
        uart_tx :>  uart_tx
    );

    uart_in ui;
    uart_receiver urecv (
        io      <:> ui,
        uart_rx <:  uart_rx
    );

    // VGA/HDMI Display
    uint1   video_reset = uninitialized;
    uint1   video_clock = uninitialized;
    uint1   pll_lock = uninitialized;
    
    // Generate the 100MHz SDRAM and 25MHz VIDEO clocks
    uint1 clock_50mhz = uninitialized;
    ulx3s_clk_50_25 clk_gen (
        clkin    <: clock,
        clkout0  :> clock_50mhz,
        clkout1  :> video_clock,
        locked   :> pll_lock
    ); 

    // Video Reset
    reset_conditioner vga_rstcond (
        rcclk <: video_clock ,
        in  <: reset,
        out :> video_reset
    );

    // Status of the screen, if in range, if in vblank, actual pixel x and y
    uint1   active = uninitialized;
    uint1   vblank = uninitialized;
    uint10  pix_x  = uninitialized;
    uint10  pix_y  = uninitialized;

    // VGA or HDMI driver

    // Adjust 6 bit rgb to 8 bit rgb for HDMI output
    uint8   video_r8 := video_r << 2;
    uint8   video_g8 := video_g << 2;
    uint8   video_b8 := video_b << 2;

    hdmi video<@clock,!reset> (
        x       :> pix_x,
        y       :> pix_y,
        active  :> active,
        vblank  :> vblank,
        gpdi_dp :> gpdi_dp,
        gpdi_dn :> gpdi_dn,
        red     <: video_r8,
        green   <: video_g8,
        blue    <: video_b8
    );

    // Build up the display layers
    // BACKGROUND
    uint2   background_r = uninitialized;
    uint2   background_g = uninitialized;
    uint2   background_b = uninitialized;
    background background_generator <@video_clock,!video_reset>  (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> background_r,
        pix_green  :> background_g,
        pix_blue   :> background_b,
        staticGenerator <: staticGenerator
    );

    // TILEMAP
    uint2   tilemap_r = uninitialized;
    uint2   tilemap_g = uninitialized;
    uint2   tilemap_b = uninitialized;
    uint1   tilemap_display = uninitialized;
    
    tilemap tile_map <@video_clock,!video_reset> (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> tilemap_r,
        pix_green  :> tilemap_g,
        pix_blue   :> tilemap_b,
        tilemap_display :> tilemap_display,
    );
    
    // Bitmap Window
    uint2   bitmap_r = uninitialized;
    uint2   bitmap_g = uninitialized;
    uint2   bitmap_b = uninitialized;
    // From GPU to set a pixel
    uint1   bitmap_display = uninitialized;
    int11   bitmap_x_write = uninitialized;
    int11   bitmap_y_write = uninitialized;
    uint7   bitmap_colour_write = uninitialized;
    uint2   bitmap_write = uninitialized;
    
    bitmap bitmap_window <@video_clock,!video_reset> (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> bitmap_r,
        pix_green  :> bitmap_g,
        pix_blue   :> bitmap_b,
        bitmap_display :> bitmap_display,
        bitmap_x_write <: bitmap_x_write,
        bitmap_y_write <: bitmap_y_write,
        bitmap_colour_write <: bitmap_colour_write,
        bitmap_write <: bitmap_write
    );

    // Lower Sprite Layer - Between BACKGROUND and BITMAP
    uint2   lower_sprites_r = uninitialized;
    uint2   lower_sprites_g = uninitialized;
    uint2   lower_sprites_b = uninitialized;
    uint1   lower_sprites_display = uninitialized;
    
    sprite_layer lower_sprites <@video_clock,!video_reset> (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> lower_sprites_r,
        pix_green  :> lower_sprites_g,
        pix_blue   :> lower_sprites_b,
        sprite_layer_display :> lower_sprites_display,
        bitmap_display <: bitmap_display
    );
    
    // Upper Sprite Layer - Between BITMAP and CHARACTER MAP
    uint2   upper_sprites_r = uninitialized;
    uint2   upper_sprites_g = uninitialized;
    uint2   upper_sprites_b = uninitialized;
    uint1   upper_sprites_display = uninitialized;
    
    sprite_layer upper_sprites <@video_clock,!video_reset> (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> upper_sprites_r,
        pix_green  :> upper_sprites_g,
        pix_blue   :> upper_sprites_b,
        sprite_layer_display :> upper_sprites_display,
        bitmap_display <: bitmap_display
    );
        
    // Character Map Window
    uint2   character_map_r = uninitialized;
    uint2   character_map_g = uninitialized;
    uint2   character_map_b = uninitialized;
    uint1   character_map_display = uninitialized;
    
    character_map character_map_window <@video_clock,!video_reset> (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> character_map_r,
        pix_green  :> character_map_g,
        pix_blue   :> character_map_b,
        character_map_display :> character_map_display
    );
    
    // Terminal window at the bottom of the screen
    uint2   terminal_r = uninitialized;
    uint2   terminal_g = uninitialized;
    uint2   terminal_b = uninitialized;
    uint1   terminal_display = uninitialized;
    
    terminal terminal_window <@video_clock,!video_reset> (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> terminal_r,
        pix_green  :> terminal_g,
        pix_blue   :> terminal_b,
        terminal_display :> terminal_display,
        timer1hz   <: systemClock
    );

    // Combine the display layers for display
    multiplex_display display <@video_clock,!video_reset> (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> video_r,
        pix_green  :> video_g,
        pix_blue   :> video_b,

        background_r <: background_r,
        background_g <: background_g,
        background_b <: background_b,

        tilemap_r <: tilemap_r,
        tilemap_g <: tilemap_g,
        tilemap_b <: tilemap_b,
        tilemap_display <: tilemap_display,

        lower_sprites_r <: lower_sprites_r,
        lower_sprites_g <: lower_sprites_g,
        lower_sprites_b <: lower_sprites_b,
        lower_sprites_display <: lower_sprites_display,
     
        bitmap_r <: bitmap_r,
        bitmap_g <: bitmap_g,
        bitmap_b <: bitmap_b,
        bitmap_display <: bitmap_display,

        upper_sprites_r <: upper_sprites_r,
        upper_sprites_g <: upper_sprites_g,
        upper_sprites_b <: upper_sprites_b,
        upper_sprites_display <: upper_sprites_display,
     
        character_map_r <: character_map_r,
        character_map_g <: character_map_g,
        character_map_b <: character_map_b,
        character_map_display <: character_map_display,
     
        terminal_r <: terminal_r,
        terminal_g <: terminal_g,
        terminal_b <: terminal_b,
        terminal_display <: terminal_display
    );

    // Left and Right audio channels
    // Sync'd with video_clock
    apu apu_processor_L <@video_clock,!video_reset> (
        staticGenerator <: staticGenerator,
        audio_output :> audio_l
    );
    apu apu_processor_R <@video_clock,!video_reset> (
        staticGenerator <: staticGenerator,
        audio_output :> audio_r
    );

    // GPU, VECTOR DRAWER and DISPLAY LIST DRAWER
    // The GPU sends rendered pixels to the BITMAP LAYER
    // The VECTOR DRAWER sends lines to be rendered
    // The DISPLAY LIST DRAWER can send pixels, rectangles, lines, circles, blit1s to the GPU 
    // and vector blocks to draw to the VECTOR DRAWER
    // VECTOR DRAWER to GPU
    int11   v_gpu_x = uninitialized;
    int11   v_gpu_y = uninitialized;
    uint7   v_gpu_colour = uninitialized;
    int11   v_gpu_param0 = uninitialized;
    int11   v_gpu_param1 = uninitialized;
    uint4   v_gpu_write = uninitialized;
    // Display list to GPU or VECTOR DRAWER
    int11   dl_gpu_x = uninitialized;
    int11   dl_gpu_y = uninitialized;
    uint7   dl_gpu_colour = uninitialized;
    int11   dl_gpu_param0 = uninitialized;
    int11   dl_gpu_param1 = uninitialized;
    uint4   dl_gpu_write = uninitialized;
    uint5   dl_vector_block_number = uninitialized;
    uint7   dl_vector_block_colour = uninitialized;
    int11   dl_vector_block_xc = uninitialized;
    int11   dl_vector_block_yc =uninitialized;
    uint1   dl_draw_vector = uninitialized;   
    // Status flags
    uint3   vector_block_active = uninitialized;
    uint4   gpu_active = uninitialized;

    gpu gpu_processor <@video_clock,!video_reset> (
        bitmap_x_write :> bitmap_x_write,
        bitmap_y_write :> bitmap_y_write,
        bitmap_colour_write :> bitmap_colour_write,
        bitmap_write :> bitmap_write,
        gpu_active :> gpu_active,

        v_gpu_x <: v_gpu_x,
        v_gpu_y <: v_gpu_y,
        v_gpu_colour <: v_gpu_colour,
        v_gpu_param0 <: v_gpu_param0,
        v_gpu_param1 <: v_gpu_param1,
        v_gpu_write <: v_gpu_write,

        dl_gpu_x <: dl_gpu_x,
        dl_gpu_y <: dl_gpu_y,
        dl_gpu_colour <: dl_gpu_colour,
        dl_gpu_param0 <: dl_gpu_param0,
        dl_gpu_param1 <: dl_gpu_param1,
        dl_gpu_write <: dl_gpu_write
    );

    // Vector drawer
    vectors vector_drawer <@video_clock,!video_reset> (
        gpu_x :> v_gpu_x,
        gpu_y :> v_gpu_y,
        gpu_colour :> v_gpu_colour,
        gpu_param0 :> v_gpu_param0,
        gpu_param1 :> v_gpu_param1,
        gpu_write :> v_gpu_write,
        vector_block_active :> vector_block_active,
        gpu_active <: gpu_active,

        dl_vector_block_number <: dl_vector_block_number,
        dl_vector_block_colour <: dl_vector_block_colour,
        dl_vector_block_xc <: dl_vector_block_xc,
        dl_vector_block_yc <: dl_vector_block_yc,
        dl_draw_vector <: dl_draw_vector,
    );

    // Display list
    displaylist displaylist_drawer <@video_clock,!video_reset> (
        gpu_x :> dl_gpu_x,
        gpu_y :> dl_gpu_y,
        gpu_colour :> dl_gpu_colour,
        gpu_param0 :> dl_gpu_param0,
        gpu_param1 :> dl_gpu_param1,
        gpu_write :> dl_gpu_write,
        vector_block_number :> dl_vector_block_number,
        vector_block_colour :> dl_vector_block_colour,
        vector_block_xc :> dl_vector_block_xc,
        vector_block_yc :> dl_vector_block_yc,
        draw_vector :> dl_draw_vector,
        vector_block_active <: vector_block_active,
        gpu_active <: gpu_active
    );
    
    // J1+ CPU
    // instruction being executed, plus decoding, including 5bit deltas for dsp and rsp expanded from 2bit encoded in the alu instruction
    uint16  instruction = uninitialized;
    uint16  immediate := ( literal(instruction).literalvalue );
    uint1   is_alu := ( instruction(instruction).is_litcallbranchalu == 3b011 );
    uint1   is_call := ( instruction(instruction).is_litcallbranchalu == 3b010 );
    uint1   is_lit := literal(instruction).is_literal;
    uint1   dstackWrite := ( is_lit | (is_alu & aluop(instruction).is_t2n) );
    uint1   rstackWrite := ( is_call | (is_alu & aluop(instruction).is_t2r) );
    uint8   ddelta := { {7{aluop(instruction).ddelta1}}, aluop(instruction).ddelta0 };
    uint8   rdelta := { {7{aluop(instruction).rdelta1}}, aluop(instruction).rdelta0 };
    
    // program counter
    uint13  pc = 0;
    uint13  pcPlusOne := pc + 1;
    uint13  newPC = uninitialized;

    // dstack 257x16bit (as 3256 array + stackTop) and pointer, next pointer, write line, delta
    dualport_bram uint16 dstack[256] = uninitialized; // bram (code from @sylefeb)
    uint16  stackTop = 0;
    uint8   dsp = 0;
    uint8   newDSP = 0;
    uint16  newStackTop = uninitialized;

    // rstack 256x16bit and pointer, next pointer, write line
    dualport_bram uint16 rstack[256] = uninitialized; // bram (code from @sylefeb)
    uint8   rsp = 0;
    uint8   newRSP = 0;
    uint16  rstackWData = uninitialized;

    uint16  stackNext = uninitialized;
    uint16  rStackTop = uninitialized;
    uint16  memoryInput = uninitialized;

    // 16bit ROM with included with compiled j1eForth developed from https://github.com/samawati/j1eforth
    dualport_bram uint16 ram_0[8192] = {
16h0D38,
16h0010,
16h0000,
16h0000,
16h0000,
16h7F00,
16h0EC4,
16h0FA2,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h23A0,
16h2388,
16h0952,
16h0964,
16h1A36,
16h0C80,
16h0D6C,
16h1478,
16h14FA,
16h1522,
16h158E,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h710C,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h700C,
16h6100,
16h700C,
16h404E,
16h005E,
16h404D,
16h005D,
16h404C,
16h005C,
16h404B,
16h005B,
16h404A,
16h005A,
16h4049,
16h0059,
16h4048,
16h0058,
16h4047,
16h0057,
16h4046,
16h0056,
16h4045,
16h0055,
16h4044,
16h0054,
16h4043,
16h0053,
16h4042,
16h0052,
16h4041,
16h0051,
16h4040,
16h0050,
16h700C,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h6E04,
16h6F6F,
16h0070,
16h700C,
16h0182,
16h2B01,
16h720F,
16h018C,
16h7803,
16h726F,
16h750F,
16h0192,
16h6103,
16h646E,
16h730F,
16h019A,
16h6F02,
16h0072,
16h740F,
16h01A2,
16h6906,
16h766E,
16h7265,
16h0074,
16h760C,
16h01AA,
16h3D01,
16h770F,
16h01B6,
16h3C01,
16h780F,
16h01BC,
16h7502,
16h003C,
16h7F0F,
16h01C2,
16h7304,
16h6177,
16h0070,
16h718C,
16h01CA,
16h7502,
16h003E,
16h771F,
16h01D4,
16h6403,
16h7075,
16h708D,
16h01DC,
16h6404,
16h6F72,
16h0070,
16h710F,
16h01E4,
16h6F04,
16h6576,
16h0072,
16h718D,
16h01EE,
16h6E03,
16h7069,
16h700F,
16h01F8,
16h6C06,
16h6873,
16h6669,
16h0074,
16h7D0F,
16h0200,
16h7206,
16h6873,
16h6669,
16h0074,
16h790F,
16h020C,
16h3102,
16h002D,
16h7A0C,
16h0218,
16h3E42,
16h0072,
16h6B8D,
16h6180,
16h6147,
16h6147,
16h700C,
16h0220,
16h7242,
16h003E,
16h6B8D,
16h6B8D,
16h6180,
16h6147,
16h700C,
16h0230,
16h7242,
16h0040,
16h6B8D,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h6147,
16h700C,
16h0240,
16h4001,
16h7C0C,
16h0254,
16h2101,
16h6023,
16h710F,
16h025A,
16h3C02,
16h003E,
16h721F,
16h0262,
16h3002,
16h003C,
16h781C,
16h026A,
16h3002,
16h003D,
16h701C,
16h0272,
16h3003,
16h3E3C,
16h711C,
16h027A,
16h3E01,
16h761F,
16h0282,
16h3002,
16h003E,
16h791C,
16h0288,
16h3E02,
16h003D,
16h7F1F,
16h0290,
16h7404,
16h6375,
16h006B,
16h6180,
16h718D,
16h0298,
16h2D04,
16h6F72,
16h0074,
16h6180,
16h6147,
16h6180,
16h6B8D,
16h700C,
16h02A4,
16h3202,
16h002F,
16h8001,
16h790F,
16h02B6,
16h3202,
16h002A,
16h741C,
16h02C0,
16h3102,
16h002B,
16h731C,
16h02C8,
16h7303,
16h4070,
16h6E81,
16h80FF,
16h730F,
16h02D0,
16h6507,
16h6578,
16h7563,
16h6574,
16h6147,
16h700C,
16h02DC,
16h6203,
16h6579,
16h8FFD,
16h6600,
16h6023,
16h710F,
16h02EA,
16h6302,
16h0040,
16h6081,
16h6C00,
16h6180,
16h8001,
16h6303,
16h2187,
16h8008,
16h6903,
16h0189,
16h80FF,
16h730F,
16h700C,
16h02F8,
16h6302,
16h0021,
16h6180,
16h80FF,
16h6303,
16h6081,
16h8008,
16h6D03,
16h6403,
16h6180,
16h414F,
16h6081,
16h6C00,
16h6180,
16h8001,
16h6303,
16h8000,
16h6703,
16h80FF,
16h6503,
16h6147,
16h6181,
16h6503,
16h6B8D,
16h6303,
16h6503,
16h6180,
16h6023,
16h710F,
16h0316,
16h7503,
16h2B6D,
16h6181,
16h6181,
16h6203,
16h6147,
16h6B81,
16h8000,
16h6F13,
16h6147,
16h6181,
16h6181,
16h6303,
16h6810,
16h6B8D,
16h6403,
16h6147,
16h6403,
16h6810,
16h6B8D,
16h6303,
16h6600,
16h6310,
16h6B8D,
16h718C,
16h0352,
16h6445,
16h766F,
16h7261,
16h6B8D,
16h700C,
16h0386,
16h7502,
16h0070,
16h41C6,
16h7E8C,
16h0392,
16h6446,
16h756F,
16h6573,
16h0072,
16h41CB,
16h6C00,
16h6B8D,
16h6C00,
16h720F,
16h039C,
16h6204,
16h7361,
16h0065,
16hFE80,
16h700C,
16h03B0,
16h7404,
16h6D65,
16h0070,
16hFE82,
16h700C,
16h03BC,
16h3E03,
16h6E69,
16hFE84,
16h700C,
16h03C8,
16h2304,
16h6974,
16h0062,
16hFE86,
16h700C,
16h03D2,
16h7403,
16h6269,
16hFE88,
16h700C,
16h03DE,
16h2705,
16h7665,
16h6C61,
16hFE8A,
16h700C,
16h03E8,
16h2706,
16h6261,
16h726F,
16h0074,
16hFE8C,
16h700C,
16h03F4,
16h6803,
16h646C,
16hFE8E,
16h700C,
16h0402,
16h6307,
16h6E6F,
16h6574,
16h7478,
16hFE90,
16h700C,
16h040C,
16h660E,
16h726F,
16h6874,
16h772D,
16h726F,
16h6C64,
16h7369,
16h0074,
16hFEA2,
16h700C,
16h041A,
16h6307,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h700C,
16h0430,
16h6402,
16h0070,
16hFEAC,
16h700C,
16h043E,
16h6C04,
16h7361,
16h0074,
16hFEAE,
16h700C,
16h0448,
16h2705,
16h6B3F,
16h7965,
16hFEB0,
16h700C,
16h0454,
16h2705,
16h6D65,
16h7469,
16hFEB2,
16h700C,
16h0460,
16h2705,
16h6F62,
16h746F,
16hFEB4,
16h700C,
16h046C,
16h2702,
16h005C,
16hFEB6,
16h700C,
16h0478,
16h2706,
16h616E,
16h656D,
16h003F,
16hFEB8,
16h700C,
16h0482,
16h2704,
16h2C24,
16h006E,
16hFEBA,
16h700C,
16h0490,
16h2706,
16h766F,
16h7265,
16h0074,
16hFEBC,
16h700C,
16h049C,
16h2702,
16h003B,
16hFEBE,
16h700C,
16h04AA,
16h2707,
16h7263,
16h6165,
16h6574,
16hFEC0,
16h700C,
16h04B4,
16h3F04,
16h7564,
16h0070,
16h6081,
16h2267,
16h708D,
16h700C,
16h04C2,
16h7203,
16h746F,
16h6147,
16h6180,
16h6B8D,
16h718C,
16h04D2,
16h3205,
16h7264,
16h706F,
16h6103,
16h710F,
16h04E0,
16h3204,
16h7564,
16h0070,
16h6181,
16h718D,
16h04EC,
16h6E06,
16h6765,
16h7461,
16h0065,
16h7D1C,
16h04F8,
16h6407,
16h656E,
16h6167,
16h6574,
16h6600,
16h6147,
16h6600,
16h8001,
16h41AB,
16h6B8D,
16h720F,
16h0504,
16h2D01,
16h6D10,
16h720F,
16h051C,
16h6103,
16h7362,
16h7A1C,
16h0524,
16h6D03,
16h7861,
16h7B1F,
16h052C,
16h6D03,
16h6E69,
16h7C1F,
16h0534,
16h7706,
16h7469,
16h6968,
16h006E,
16h6181,
16h428F,
16h6147,
16h428F,
16h6B8D,
16h7F0F,
16h053C,
16h7506,
16h2F6D,
16h6F6D,
16h0064,
16h4279,
16h6F03,
16h22D6,
16h6D10,
16h800F,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6B8D,
16h6203,
16h6081,
16h6B8D,
16h6B81,
16h6180,
16h6147,
16h41AB,
16h6B8D,
16h6403,
16h22CA,
16h6147,
16h6103,
16h6310,
16h6B8D,
16h02CB,
16h6103,
16h6B8D,
16h6B81,
16h22D2,
16h6B8D,
16h6A00,
16h6147,
16h02B3,
16h6B8D,
16h6103,
16h6103,
16h718C,
16h6103,
16h4273,
16h8000,
16h6600,
16h708D,
16h0552,
16h6D05,
16h6D2F,
16h646F,
16h6081,
16h6810,
16h6081,
16h6147,
16h22E8,
16h6D10,
16h6147,
16h4286,
16h6B8D,
16h6147,
16h6081,
16h6810,
16h22EE,
16h6B81,
16h6203,
16h6B8D,
16h42AD,
16h6B8D,
16h22F5,
16h6180,
16h6D10,
16h718C,
16h700C,
16h05B8,
16h2F04,
16h6F6D,
16h0064,
16h6181,
16h6810,
16h6180,
16h02DF,
16h05EE,
16h6D03,
16h646F,
16h42FA,
16h710F,
16h05FE,
16h2F01,
16h42FA,
16h700F,
16h0608,
16h7503,
16h2A6D,
16h8000,
16h6180,
16h800F,
16h6147,
16h6081,
16h41AB,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6B8D,
16h6203,
16h6B8D,
16h231D,
16h6147,
16h6181,
16h41AB,
16h6B8D,
16h6203,
16h6B81,
16h2323,
16h6B8D,
16h6A00,
16h6147,
16h030E,
16h6B8D,
16h6103,
16h426B,
16h710F,
16h0610,
16h2A01,
16h430A,
16h710F,
16h0650,
16h6D02,
16h002A,
16h4279,
16h6503,
16h6810,
16h6147,
16h6A10,
16h6180,
16h6A10,
16h430A,
16h6B8D,
16h2339,
16h0286,
16h700C,
16h0658,
16h2A05,
16h6D2F,
16h646F,
16h6147,
16h432E,
16h6B8D,
16h02DF,
16h0676,
16h2A02,
16h002F,
16h433E,
16h700F,
16h0686,
16h6305,
16h6C65,
16h2B6C,
16h8002,
16h720F,
16h0690,
16h6305,
16h6C65,
16h2D6C,
16h8002,
16h028F,
16h069C,
16h6305,
16h6C65,
16h736C,
16h8001,
16h7D0F,
16h06A8,
16h6202,
16h006C,
16h8020,
16h700C,
16h06B4,
16h3E05,
16h6863,
16h7261,
16h807F,
16h6303,
16h6081,
16h807F,
16h435C,
16h42A2,
16h236B,
16h6103,
16h805F,
16h700C,
16h700C,
16h06BE,
16h2B02,
16h0021,
16h414F,
16h6C00,
16h6203,
16h6180,
16h6023,
16h710F,
16h06DC,
16h3202,
16h0021,
16h6180,
16h6181,
16h6023,
16h6103,
16h434B,
16h6023,
16h710F,
16h06EE,
16h3202,
16h0040,
16h6081,
16h434B,
16h6C00,
16h6180,
16h7C0C,
16h0702,
16h6305,
16h756F,
16h746E,
16h6081,
16h6310,
16h6180,
16h017E,
16h0712,
16h6804,
16h7265,
16h0065,
16hFEAC,
16h7C0C,
16h0722,
16h6107,
16h696C,
16h6E67,
16h6465,
16h6081,
16h8000,
16h8002,
16h42AD,
16h6103,
16h6081,
16h23A5,
16h8002,
16h6180,
16h428F,
16h720F,
16h072E,
16h6105,
16h696C,
16h6E67,
16h4394,
16h439B,
16hFEAC,
16h6023,
16h710F,
16h074E,
16h7003,
16h6461,
16h4394,
16h8050,
16h6203,
16h039B,
16h0760,
16h4008,
16h7865,
16h6365,
16h7475,
16h0065,
16h6C00,
16h4264,
16h23C0,
16h0172,
16h700C,
16h076E,
16h6604,
16h6C69,
16h006C,
16h6180,
16h6147,
16h6180,
16h03CC,
16h4279,
16h418D,
16h6310,
16h6B81,
16h23D2,
16h6B8D,
16h6A00,
16h6147,
16h03C9,
16h6B8D,
16h6103,
16h0273,
16h0784,
16h6505,
16h6172,
16h6573,
16h8000,
16h03C5,
16h07AC,
16h6405,
16h6769,
16h7469,
16h8009,
16h6181,
16h6803,
16h8007,
16h6303,
16h6203,
16h8030,
16h720F,
16h07B8,
16h6507,
16h7478,
16h6172,
16h7463,
16h8000,
16h6180,
16h42AD,
16h6180,
16h03DF,
16h07D0,
16h3C02,
16h0023,
16h43B2,
16hFE8E,
16h6023,
16h710F,
16h07E4,
16h6804,
16h6C6F,
16h0064,
16hFE8E,
16h6C00,
16h6A00,
16h6081,
16hFE8E,
16h6023,
16h6103,
16h018D,
16h07F2,
16h2301,
16hFE80,
16h6C00,
16h43EC,
16h03FC,
16h080A,
16h2302,
16h0073,
16h4406,
16h6081,
16h2411,
16h040D,
16h700C,
16h0816,
16h7304,
16h6769,
16h006E,
16h6810,
16h241A,
16h802D,
16h03FC,
16h700C,
16h0826,
16h2302,
16h003E,
16h6103,
16hFE8E,
16h6C00,
16h43B2,
16h6181,
16h028F,
16h0838,
16h7303,
16h7274,
16h6081,
16h6147,
16h6A10,
16h43F4,
16h440D,
16h6B8D,
16h4416,
16h041E,
16h084A,
16h6803,
16h7865,
16h8010,
16hFE80,
16h6023,
16h710F,
16h0860,
16h6407,
16h6365,
16h6D69,
16h6C61,
16h800A,
16hFE80,
16h6023,
16h710F,
16h086E,
16h6406,
16h6769,
16h7469,
16h003F,
16h6147,
16h8030,
16h428F,
16h8009,
16h6181,
16h6803,
16h2457,
16h6081,
16h8020,
16h6613,
16h2451,
16h8020,
16h428F,
16h8007,
16h428F,
16h6081,
16h800A,
16h6803,
16h6403,
16h6081,
16h6B8D,
16h7F0F,
16h0880,
16h6E07,
16h6D75,
16h6562,
16h3F72,
16hFE80,
16h6C00,
16h6147,
16h8000,
16h6181,
16h438C,
16h6181,
16h417E,
16h8024,
16h6703,
16h246F,
16h4432,
16h6180,
16h6310,
16h6180,
16h6A00,
16h6181,
16h417E,
16h802D,
16h6703,
16h6147,
16h6180,
16h6B81,
16h428F,
16h6180,
16h6B81,
16h6203,
16h4264,
16h24A0,
16h6A00,
16h6147,
16h6081,
16h6147,
16h417E,
16hFE80,
16h6C00,
16h4444,
16h249A,
16h6180,
16hFE80,
16h6C00,
16h4329,
16h6203,
16h6B8D,
16h6310,
16h6B81,
16h2492,
16h6B8D,
16h6A00,
16h6147,
16h047E,
16h6B8D,
16h6103,
16h6B81,
16h6003,
16h2498,
16h6D10,
16h6180,
16h049F,
16h6B8D,
16h6B8D,
16h4273,
16h4273,
16h8000,
16h6081,
16h6B8D,
16h4273,
16h6B8D,
16hFE80,
16h6023,
16h710F,
16h08B6,
16h3F03,
16h7872,
16h8FFE,
16h6600,
16h6C00,
16h8001,
16h6303,
16h711C,
16h094E,
16h7403,
16h2178,
16h8FFE,
16h6600,
16h6C00,
16h8002,
16h6303,
16h6010,
16h24B2,
16h6081,
16h8FFF,
16h6600,
16h6023,
16h6103,
16h80DF,
16h6600,
16h6C00,
16h6010,
16h24BE,
16h80DF,
16h6600,
16h6023,
16h6103,
16h80DF,
16h6600,
16h6C00,
16h6010,
16h24C7,
16h700C,
16h0960,
16h3F04,
16h656B,
16h0079,
16hFEB0,
16h03BC,
16h099C,
16h6504,
16h696D,
16h0074,
16hFEB2,
16h03BC,
16h09A8,
16h6B03,
16h7965,
16h44D1,
16h24DC,
16h8FFF,
16h6600,
16h7C0C,
16h09B4,
16h6E04,
16h6675,
16h003F,
16h44D1,
16h6081,
16h24EC,
16h6103,
16h44DC,
16h800D,
16h770F,
16h700C,
16h09C4,
16h7305,
16h6170,
16h6563,
16h435C,
16h04D7,
16h09DC,
16h7306,
16h6170,
16h6563,
16h0073,
16h8000,
16h6B13,
16h6147,
16h04FD,
16h44F1,
16h6B81,
16h2503,
16h6B8D,
16h6A00,
16h6147,
16h04FC,
16h6B8D,
16h710F,
16h09E8,
16h7404,
16h7079,
16h0065,
16h6147,
16h050D,
16h438C,
16h44D7,
16h6B81,
16h2513,
16h6B8D,
16h6A00,
16h6147,
16h050B,
16h6B8D,
16h6103,
16h710F,
16h0A0C,
16h6302,
16h0072,
16h800D,
16h44D7,
16h800A,
16h04D7,
16h0A2E,
16h6443,
16h246F,
16h6B8D,
16h6B81,
16h6B8D,
16h438C,
16h6203,
16h439B,
16h6147,
16h6180,
16h6147,
16h700C,
16h0A3C,
16h2443,
16h7C22,
16h4520,
16h700C,
16h0A56,
16h2E02,
16h0024,
16h438C,
16h0509,
16h0A60,
16h2E43,
16h7C22,
16h4520,
16h0532,
16h0A6A,
16h2E02,
16h0072,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h44F8,
16h0509,
16h0A74,
16h7503,
16h722E,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h44F8,
16h0509,
16h0A88,
16h7502,
16h002E,
16h43F4,
16h440D,
16h441E,
16h44F1,
16h0509,
16h0AA0,
16h2E01,
16hFE80,
16h6C00,
16h800A,
16h6503,
16h255F,
16h0552,
16h4427,
16h44F1,
16h0509,
16h0AB0,
16h2E02,
16h0023,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h4559,
16hFE80,
16h6023,
16h710F,
16h0AC6,
16h7503,
16h232E,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h43F4,
16h440D,
16h441E,
16h44F1,
16h4509,
16hFE80,
16h6023,
16h710F,
16h0ADC,
16h7504,
16h722E,
16h0023,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h44F8,
16h4509,
16hFE80,
16h6023,
16h710F,
16h0AFA,
16h2E03,
16h2372,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h44F8,
16h4509,
16hFE80,
16h6023,
16h710F,
16h0B24,
16h6305,
16h6F6D,
16h6576,
16h6147,
16h05B1,
16h6147,
16h6081,
16h417E,
16h6B81,
16h418D,
16h6310,
16h6B8D,
16h6310,
16h6B81,
16h25B7,
16h6B8D,
16h6A00,
16h6147,
16h05A9,
16h6B8D,
16h6103,
16h0273,
16h0B48,
16h7005,
16h6361,
16h246B,
16h6081,
16h6147,
16h4279,
16h6023,
16h6103,
16h6310,
16h6180,
16h45A7,
16h6B8D,
16h700C,
16h0B76,
16h3F01,
16h6C00,
16h0559,
16h0B92,
16h2807,
16h6170,
16h7372,
16h2965,
16hFE82,
16h6023,
16h6103,
16h6181,
16h6147,
16h6081,
16h261C,
16h6A00,
16hFE82,
16h6C00,
16h435C,
16h6703,
16h25F8,
16h6147,
16h438C,
16hFE82,
16h6C00,
16h6180,
16h428F,
16h6810,
16h6600,
16h6B81,
16h6910,
16h6303,
16h25F6,
16h6B81,
16h25F0,
16h6B8D,
16h6A00,
16h6147,
16h05DF,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h8000,
16h708D,
16h6A00,
16h6B8D,
16h6181,
16h6180,
16h6147,
16h438C,
16hFE82,
16h6C00,
16h6180,
16h428F,
16hFE82,
16h6C00,
16h435C,
16h6703,
16h2606,
16h6810,
16h2612,
16h6B81,
16h260D,
16h6B8D,
16h6A00,
16h6147,
16h05FB,
16h6B8D,
16h6103,
16h6081,
16h6147,
16h0617,
16h6B8D,
16h6103,
16h6081,
16h6147,
16h6A00,
16h6181,
16h428F,
16h6B8D,
16h6B8D,
16h028F,
16h6181,
16h6B8D,
16h028F,
16h0B9A,
16h7005,
16h7261,
16h6573,
16h6147,
16hFE88,
16h6C00,
16hFE84,
16h6C00,
16h6203,
16hFE86,
16h6C00,
16hFE84,
16h6C00,
16h428F,
16h6B8D,
16h45D1,
16hFE84,
16h0370,
16h0C40,
16h2E82,
16h0028,
16h8029,
16h4623,
16h0509,
16h0C66,
16h2881,
16h8029,
16h4623,
16h0273,
16h0C72,
16h3C83,
16h3E5C,
16hFE86,
16h6C00,
16hFE84,
16h6023,
16h710F,
16h0C7C,
16h5C81,
16hFEB6,
16h03BC,
16h0C8C,
16h7704,
16h726F,
16h0064,
16h4623,
16h4394,
16h434B,
16h05BE,
16h0C94,
16h7405,
16h6B6F,
16h6E65,
16h435C,
16h064D,
16h0CA4,
16h6E05,
16h6D61,
16h3E65,
16h438C,
16h801F,
16h6303,
16h6203,
16h039B,
16h0CB0,
16h7305,
16h6D61,
16h3F65,
16h6A00,
16h6147,
16h0674,
16h6181,
16h6B81,
16h6203,
16h417E,
16h6181,
16h6B81,
16h6203,
16h417E,
16h428F,
16h4264,
16h2674,
16h6B8D,
16h710F,
16h6B81,
16h267A,
16h6B8D,
16h6A00,
16h6147,
16h0667,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h0CC2,
16h6604,
16h6E69,
16h0064,
16h6180,
16h6081,
16h417E,
16hFE82,
16h6023,
16h6103,
16h6081,
16h6C00,
16h6147,
16h434B,
16h6180,
16h6C00,
16h6081,
16h26A0,
16h6081,
16h6C00,
16hFF1F,
16h6303,
16h6B81,
16h6503,
16h269B,
16h434B,
16h8000,
16h6600,
16h069F,
16h434B,
16hFE82,
16h6C00,
16h4664,
16h06A5,
16h6B8D,
16h6103,
16h6180,
16h4351,
16h718C,
16h26AA,
16h8002,
16h4357,
16h428F,
16h068D,
16h6B8D,
16h6103,
16h6003,
16h4351,
16h6081,
16h465B,
16h718C,
16h0CFE,
16h3C07,
16h616E,
16h656D,
16h3E3F,
16hFE90,
16h6081,
16h4383,
16h6503,
16h26BC,
16h4351,
16h6147,
16h6B8D,
16h434B,
16h6081,
16h6147,
16h6C00,
16h4264,
16h26C9,
16h4682,
16h4264,
16h26BD,
16h6B8D,
16h710F,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h0D64,
16h6E05,
16h6D61,
16h3F65,
16hFEB8,
16h03BC,
16h0D9C,
16h5E02,
16h0068,
16h6147,
16h6181,
16h6B81,
16h6803,
16h6081,
16h26E1,
16h8008,
16h6081,
16h44D7,
16h44F1,
16h44D7,
16h6B8D,
16h720F,
16h0DA8,
16h7403,
16h7061,
16h6081,
16h44D7,
16h6181,
16h418D,
16h731C,
16h0DC8,
16h6B04,
16h6174,
16h0070,
16h6081,
16h800D,
16h6503,
16h26F9,
16h8008,
16h6503,
16h26F8,
16h435C,
16h06E6,
16h06D6,
16h6103,
16h6003,
16h708D,
16h0DD8,
16h6106,
16h6363,
16h7065,
16h0074,
16h6181,
16h6203,
16h6181,
16h4279,
16h6503,
16h2712,
16h44DC,
16h6081,
16h435C,
16h428F,
16h807F,
16h6F03,
16h2710,
16h46E6,
16h0711,
16h46EF,
16h0704,
16h6103,
16h6181,
16h028F,
16h0DFA,
16h7105,
16h6575,
16h7972,
16hFE88,
16h6C00,
16h8050,
16h4701,
16hFE86,
16h6023,
16h6103,
16h6103,
16h8000,
16hFE84,
16h6023,
16h710F,
16h0E2C,
16h6106,
16h6F62,
16h7472,
16h0032,
16h4520,
16h710F,
16h0E4C,
16h6106,
16h6F62,
16h7472,
16h0031,
16h44F1,
16h4532,
16h803F,
16h44D7,
16h4519,
16hFE8C,
16h43BC,
16h072A,
16h0E5A,
16h3C49,
16h613F,
16h6F62,
16h7472,
16h3E22,
16h2742,
16h4520,
16h0731,
16h072A,
16h0E74,
16h6606,
16h726F,
16h6567,
16h0074,
16h4655,
16h46D1,
16h4264,
16h275A,
16h4351,
16h6081,
16hFEAC,
16h6023,
16h6103,
16h6C00,
16h6081,
16hFE90,
16h6023,
16h6103,
16hFEAE,
16h6023,
16h6103,
16h710F,
16h0731,
16h0E88,
16h240A,
16h6E69,
16h6574,
16h7072,
16h6572,
16h0074,
16h46D1,
16h4264,
16h2772,
16h6C00,
16h8040,
16h6303,
16h473F,
16h630C,
16h6D6F,
16h6970,
16h656C,
16h6F2D,
16h6C6E,
16h0079,
16h0172,
16h0776,
16h445F,
16h2775,
16h700C,
16h0731,
16h0EB8,
16h5B81,
16h8EC4,
16hFE8A,
16h6023,
16h710F,
16h0EEE,
16h2E03,
16h6B6F,
16h8EC4,
16hFE8A,
16h6C00,
16h6703,
16h2787,
16h4537,
16h2003,
16h6B6F,
16h0519,
16h0EFA,
16h6504,
16h6176,
16h006C,
16h4655,
16h6081,
16h417E,
16h2793,
16hFE8A,
16h43BC,
16h078C,
16h6103,
16h077F,
16h0F12,
16h2445,
16h7665,
16h6C61,
16hFE84,
16h6C00,
16h6147,
16hFE86,
16h6C00,
16h6147,
16hFE88,
16h6C00,
16h6147,
16hFE84,
16h8000,
16h6180,
16h6023,
16h6103,
16hFE86,
16h6023,
16h6103,
16hFE88,
16h6023,
16h6103,
16h478C,
16h6B8D,
16hFE88,
16h6023,
16h6103,
16h6B8D,
16hFE86,
16h6023,
16h6103,
16h6B8D,
16hFE84,
16h6023,
16h710F,
16h0F2C,
16h7006,
16h6572,
16h6573,
16h0074,
16hFF00,
16hFE86,
16h434B,
16h6023,
16h710F,
16h0F76,
16h7104,
16h6975,
16h0074,
16h4778,
16h4719,
16h478C,
16h07C9,
16h700C,
16h0F8A,
16h6105,
16h6F62,
16h7472,
16h6103,
16h47BF,
16h477F,
16h07C8,
16h0F9C,
16h2701,
16h4655,
16h46D1,
16h27DB,
16h700C,
16h0731,
16h0FAC,
16h6105,
16h6C6C,
16h746F,
16h439B,
16hFEAC,
16h0370,
16h0FBA,
16h2C01,
16h4394,
16h6081,
16h434B,
16hFEAC,
16h6023,
16h6103,
16h6023,
16h710F,
16h0FC8,
16h6345,
16h6C61,
16h2C6C,
16h8001,
16h6903,
16hC000,
16h6403,
16h07E5,
16h0FDC,
16h3F47,
16h7262,
16h6E61,
16h6863,
16h8001,
16h6903,
16hA000,
16h6403,
16h07E5,
16h0FEE,
16h6246,
16h6172,
16h636E,
16h0068,
16h8001,
16h6903,
16h8000,
16h6403,
16h07E5,
16h1002,
16h5B89,
16h6F63,
16h706D,
16h6C69,
16h5D65,
16h47D7,
16h07F1,
16h1016,
16h6347,
16h6D6F,
16h6970,
16h656C,
16h6B8D,
16h6081,
16h6C00,
16h47E5,
16h434B,
16h6147,
16h700C,
16h1026,
16h7287,
16h6365,
16h7275,
16h6573,
16hFEAE,
16h6C00,
16h465B,
16h07F1,
16h103E,
16h7004,
16h6369,
16h006B,
16h6081,
16h6410,
16h6410,
16h80C0,
16h6203,
16h6147,
16h700C,
16h1050,
16h6C87,
16h7469,
16h7265,
16h6C61,
16h6081,
16hFFFF,
16h6600,
16h6303,
16h2843,
16h8000,
16h6600,
16h6503,
16h4837,
16h4817,
16h6600,
16h0847,
16hFFFF,
16h6600,
16h6403,
16h07E5,
16h700C,
16h1066,
16h5B83,
16h5D27,
16h47D7,
16h0837,
16h1092,
16h2403,
16h222C,
16h8022,
16h4623,
16h4394,
16h45BE,
16h438C,
16h6203,
16h439B,
16hFEAC,
16h6023,
16h710F,
16h109C,
16h66C3,
16h726F,
16h4817,
16h4112,
16h0394,
16h10B6,
16h62C5,
16h6765,
16h6E69,
16h0394,
16h10C2,
16h2846,
16h656E,
16h7478,
16h0029,
16h6B8D,
16h6B8D,
16h4264,
16h2873,
16h6A00,
16h6147,
16h6C00,
16h6147,
16h700C,
16h434B,
16h6147,
16h700C,
16h10CC,
16h6EC4,
16h7865,
16h0074,
16h4817,
16h486A,
16h07E5,
16h10EE,
16h2844,
16h6F64,
16h0029,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h426B,
16h6147,
16h6147,
16h434B,
16h6147,
16h700C,
16h10FC,
16h64C2,
16h006F,
16h4817,
16h4881,
16h8000,
16h47E5,
16h0394,
16h1118,
16h2847,
16h656C,
16h7661,
16h2965,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6B8D,
16h710F,
16h1128,
16h6CC5,
16h6165,
16h6576,
16h4817,
16h4898,
16h700C,
16h113E,
16h2846,
16h6F6C,
16h706F,
16h0029,
16h6B8D,
16h6B8D,
16h6310,
16h6B8D,
16h4279,
16h6213,
16h28B6,
16h6147,
16h6147,
16h6C00,
16h6147,
16h700C,
16h6147,
16h6A00,
16h6147,
16h434B,
16h6147,
16h700C,
16h114C,
16h2848,
16h6E75,
16h6F6C,
16h706F,
16h0029,
16h6B8D,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6147,
16h700C,
16h117A,
16h75C6,
16h6C6E,
16h6F6F,
16h0070,
16h4817,
16h48C2,
16h700C,
16h1198,
16h2845,
16h643F,
16h296F,
16h4279,
16h6213,
16h28E4,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h426B,
16h6147,
16h6147,
16h434B,
16h6147,
16h700C,
16h0273,
16h700C,
16h11A8,
16h3FC3,
16h6F64,
16h4817,
16h48D7,
16h8000,
16h47E5,
16h0394,
16h11CE,
16h6CC4,
16h6F6F,
16h0070,
16h4817,
16h48AA,
16h6081,
16h47E5,
16h4817,
16h48C2,
16h4351,
16h4394,
16h8001,
16h6903,
16h6180,
16h6023,
16h710F,
16h11DE,
16h2847,
16h6C2B,
16h6F6F,
16h2970,
16h6B8D,
16h6180,
16h6B8D,
16h6B8D,
16h4279,
16h428F,
16h6147,
16h8002,
16h482B,
16h6B81,
16h6203,
16h6B81,
16h6503,
16h6810,
16h6010,
16h8003,
16h482B,
16h6B8D,
16h6503,
16h6810,
16h6010,
16h6403,
16h2921,
16h6147,
16h6203,
16h6147,
16h6C00,
16h6147,
16h700C,
16h6147,
16h6147,
16h6103,
16h434B,
16h6147,
16h700C,
16h1200,
16h2BC5,
16h6F6C,
16h706F,
16h4817,
16h4904,
16h6081,
16h47E5,
16h4817,
16h48C2,
16h4351,
16h4394,
16h8001,
16h6903,
16h6180,
16h6023,
16h710F,
16h1250,
16h2843,
16h2969,
16h6B8D,
16h6B8D,
16h414F,
16h6147,
16h6147,
16h700C,
16h1272,
16h69C1,
16h4817,
16h493B,
16h700C,
16h1284,
16h75C5,
16h746E,
16h6C69,
16h07FB,
16h128E,
16h61C5,
16h6167,
16h6E69,
16h0805,
16h1298,
16h69C2,
16h0066,
16h4394,
16h8000,
16h07FB,
16h12A2,
16h74C4,
16h6568,
16h006E,
16h4394,
16h8001,
16h6903,
16h6181,
16h6C00,
16h6403,
16h6180,
16h6023,
16h710F,
16h12AE,
16h72C6,
16h7065,
16h6165,
16h0074,
16h4805,
16h095A,
16h12C8,
16h73C4,
16h696B,
16h0070,
16h4394,
16h8000,
16h0805,
16h12D6,
16h61C3,
16h7466,
16h6103,
16h496E,
16h4864,
16h718C,
16h12E4,
16h65C4,
16h736C,
16h0065,
16h496E,
16h6180,
16h095A,
16h12F2,
16h77C5,
16h6968,
16h656C,
16h4953,
16h718C,
16h1300,
16h2846,
16h6163,
16h6573,
16h0029,
16h6B8D,
16h6180,
16h6147,
16h6147,
16h700C,
16h130C,
16h63C4,
16h7361,
16h0065,
16h4817,
16h498A,
16h8030,
16h700C,
16h1320,
16h2844,
16h666F,
16h0029,
16h6B8D,
16h6B81,
16h6180,
16h6147,
16h770F,
16h1330,
16h6FC2,
16h0066,
16h4817,
16h499B,
16h0953,
16h1342,
16h65C5,
16h646E,
16h666F,
16h497C,
16h8031,
16h700C,
16h134E,
16h2809,
16h6E65,
16h6364,
16h7361,
16h2965,
16h6B8D,
16h6B8D,
16h6103,
16h6147,
16h700C,
16h135C,
16h65C7,
16h646E,
16h6163,
16h6573,
16h6081,
16h8031,
16h6703,
16h29C4,
16h6103,
16h495A,
16h09BD,
16h8030,
16h6213,
16h473F,
16h6213,
16h6461,
16h6320,
16h7361,
16h2065,
16h6F63,
16h736E,
16h7274,
16h6375,
16h2E74,
16h4817,
16h49B3,
16h700C,
16h1372,
16h24C2,
16h0022,
16h4817,
16h452D,
16h0850,
16h13AA,
16h2EC2,
16h0022,
16h4817,
16h4537,
16h0850,
16h13B6,
16h3E05,
16h6F62,
16h7964,
16h034B,
16h13C2,
16h2844,
16h6F74,
16h0029,
16h6B8D,
16h6081,
16h434B,
16h6147,
16h6C00,
16h6023,
16h710F,
16h13CC,
16h74C2,
16h006F,
16h4817,
16h49E9,
16h47D7,
16h49E4,
16h07E5,
16h13E2,
16h2845,
16h742B,
16h296F,
16h6B8D,
16h6081,
16h434B,
16h6147,
16h6C00,
16h0370,
16h13F2,
16h2BC3,
16h6F74,
16h4817,
16h49FC,
16h47D7,
16h49E4,
16h07E5,
16h1406,
16h670B,
16h7465,
16h632D,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h7C0C,
16h1416,
16h730B,
16h7465,
16h632D,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h6023,
16h710F,
16h1428,
16h640B,
16h6665,
16h6E69,
16h7469,
16h6F69,
16h736E,
16hFE90,
16h6C00,
16h0A1A,
16h143C,
16h3F07,
16h6E75,
16h7169,
16h6575,
16h6081,
16h4A11,
16h4682,
16h2A37,
16h4537,
16h2007,
16h6572,
16h6564,
16h2066,
16h6181,
16h4532,
16h710F,
16h1450,
16h3C05,
16h2C24,
16h3E6E,
16h6081,
16h417E,
16h2A51,
16h4A2C,
16h6081,
16h438C,
16h6203,
16h439B,
16hFEAC,
16h6023,
16h6103,
16h6081,
16hFEAE,
16h6023,
16h6103,
16h4351,
16h4A11,
16h6C00,
16h6180,
16h6023,
16h710F,
16h6103,
16h452D,
16h6E04,
16h6D61,
16h0065,
16h0731,
16h1472,
16h2403,
16h6E2C,
16hFEBA,
16h03BC,
16h14B0,
16h2408,
16h6F63,
16h706D,
16h6C69,
16h0065,
16h46D1,
16h4264,
16h2A6C,
16h6C00,
16h8080,
16h6303,
16h2A6B,
16h0172,
16h0A6C,
16h07F1,
16h445F,
16h2A6F,
16h0837,
16h0731,
16h14BA,
16h6186,
16h6F62,
16h7472,
16h0022,
16h4817,
16h473F,
16h0850,
16h14E2,
16h3C07,
16h766F,
16h7265,
16h3E74,
16hFEAE,
16h6C00,
16h4A11,
16h6023,
16h710F,
16h14F2,
16h6F05,
16h6576,
16h7472,
16hFEBC,
16h03BC,
16h1506,
16h6504,
16h6978,
16h0074,
16h6B8D,
16h710F,
16h1512,
16h3CC3,
16h3E3B,
16h4817,
16h4A8C,
16h4778,
16h4A86,
16h8000,
16h4394,
16h6023,
16h710F,
16h151E,
16h3BC1,
16hFEBE,
16h03BC,
16h1534,
16h5D01,
16h94C4,
16hFE8A,
16h6023,
16h710F,
16h153C,
16h3A01,
16h4655,
16h4A5A,
16h0A9F,
16h1548,
16h6909,
16h6D6D,
16h6465,
16h6169,
16h6574,
16h8080,
16hFEAE,
16h6C00,
16h6C00,
16h6403,
16hFEAE,
16h6C00,
16h6023,
16h710F,
16h1552,
16h7504,
16h6573,
16h0072,
16h4655,
16h4A5A,
16h4A86,
16h4817,
16h41D2,
16h07E5,
16h1570,
16h3C08,
16h7263,
16h6165,
16h6574,
16h003E,
16h4655,
16h4A5A,
16h4A86,
16h838C,
16h07F1,
16h1584,
16h6306,
16h6572,
16h7461,
16h0065,
16hFEC0,
16h03BC,
16h159A,
16h7608,
16h7261,
16h6169,
16h6C62,
16h0065,
16h4AD1,
16h8000,
16h07E5,
16h15A8,
16h3209,
16h6176,
16h6972,
16h6261,
16h656C,
16h4AD1,
16h8000,
16h47E5,
16h8001,
16h4357,
16h07E0,
16h15BA,
16h2847,
16h6F64,
16h7365,
16h293E,
16h6B8D,
16h8001,
16h6903,
16h4394,
16h8001,
16h6903,
16hFEAE,
16h6C00,
16h465B,
16h6081,
16h434B,
16hFFFF,
16h6600,
16h6403,
16h47E5,
16h6023,
16h6103,
16h07E5,
16h15D2,
16h630C,
16h6D6F,
16h6970,
16h656C,
16h6F2D,
16h6C6E,
16h0079,
16h8040,
16hFEAE,
16h6C00,
16h6C00,
16h6403,
16hFEAE,
16h6C00,
16h6023,
16h710F,
16h1600,
16h6485,
16h656F,
16h3E73,
16h4817,
16h4AED,
16h700C,
16h1622,
16h6304,
16h6168,
16h0072,
16h435C,
16h464D,
16h6310,
16h017E,
16h1630,
16h5B86,
16h6863,
16h7261,
16h005D,
16h4B1B,
16h0837,
16h1640,
16h6308,
16h6E6F,
16h7473,
16h6E61,
16h0074,
16h4AD1,
16h47E5,
16h4AED,
16h7C0C,
16h164E,
16h6405,
16h6665,
16h7265,
16h4AD1,
16h8000,
16h47E5,
16h4AED,
16h6C00,
16h4264,
16h8000,
16h6703,
16h473F,
16h750D,
16h696E,
16h696E,
16h6974,
16h6C61,
16h7A69,
16h6465,
16h0172,
16h1662,
16h6982,
16h0073,
16h47D7,
16h49E4,
16h6023,
16h710F,
16h168C,
16h2E03,
16h6469,
16h4264,
16h2B55,
16h438C,
16h801F,
16h6303,
16h0509,
16h4519,
16h4537,
16h7B08,
16h6F6E,
16h616E,
16h656D,
16h007D,
16h700C,
16h169A,
16h7708,
16h726F,
16h6C64,
16h7369,
16h0074,
16h43AA,
16h4394,
16h8000,
16h47E5,
16h6081,
16hFEA8,
16h434B,
16h6081,
16h6C00,
16h47E5,
16h6023,
16h6103,
16h8000,
16h07E5,
16h16BC,
16h6F06,
16h6472,
16h7265,
16h0040,
16h6081,
16h6C00,
16h6081,
16h2B80,
16h6147,
16h434B,
16h4B76,
16h6B8D,
16h6180,
16h731C,
16h700F,
16h16E4,
16h6709,
16h7465,
16h6F2D,
16h6472,
16h7265,
16hFE90,
16h0B76,
16h1704,
16h3E04,
16h6977,
16h0064,
16h034B,
16h1714,
16h2E04,
16h6977,
16h0064,
16h44F1,
16h6081,
16h4B8D,
16h434B,
16h6C00,
16h4264,
16h2B9B,
16h4B4F,
16h710F,
16h8000,
16h0546,
16h171E,
16h2104,
16h6977,
16h0064,
16h4B8D,
16h434B,
16hFEAE,
16h6C00,
16h6180,
16h6023,
16h710F,
16h173C,
16h7604,
16h636F,
16h0073,
16h4519,
16h4537,
16h7605,
16h636F,
16h3A73,
16hFEA8,
16h434B,
16h6C00,
16h4264,
16h2BBA,
16h6081,
16h4B92,
16h4B8D,
16h0BB3,
16h700C,
16h1752,
16h6F05,
16h6472,
16h7265,
16h4519,
16h4537,
16h7307,
16h6165,
16h6372,
16h3A68,
16h4B87,
16h4264,
16h2BCC,
16h6180,
16h4B92,
16h6A00,
16h0BC6,
16h4519,
16h4537,
16h6407,
16h6665,
16h6E69,
16h3A65,
16h4A11,
16h0B92,
16h1778,
16h7309,
16h7465,
16h6F2D,
16h6472,
16h7265,
16h6081,
16h8000,
16h6600,
16h6703,
16h2BE2,
16h6103,
16hFEA2,
16h8001,
16h8008,
16h6181,
16h6F03,
16h473F,
16h6F12,
16h6576,
16h2072,
16h6973,
16h657A,
16h6F20,
16h2066,
16h7623,
16h636F,
16h0073,
16hFE90,
16h6180,
16h6081,
16h2BFD,
16h6147,
16h6180,
16h6181,
16h6023,
16h6103,
16h434B,
16h6B8D,
16h6A00,
16h0BF2,
16h6180,
16h6023,
16h710F,
16h17AA,
16h6F04,
16h6C6E,
16h0079,
16h8000,
16h6600,
16h0BDA,
16h1802,
16h6104,
16h736C,
16h006F,
16h4B87,
16h6181,
16h6180,
16h6310,
16h0BDA,
16h1810,
16h7008,
16h6572,
16h6976,
16h756F,
16h0073,
16h4B87,
16h6180,
16h6103,
16h6A00,
16h0BDA,
16h1822,
16h3E04,
16h6F76,
16h0063,
16h4AD1,
16h6081,
16h47E5,
16h4BA1,
16h4AED,
16h6C00,
16h6147,
16h4B87,
16h6180,
16h6103,
16h6B8D,
16h6180,
16h0BDA,
16h1838,
16h7705,
16h6469,
16h666F,
16h47D7,
16h49E4,
16h7C0C,
16h185A,
16h760A,
16h636F,
16h6261,
16h6C75,
16h7261,
16h0079,
16h4B63,
16h0C1F,
16h1868,
16h5F05,
16h7974,
16h6570,
16h6147,
16h0C45,
16h438C,
16h4362,
16h44D7,
16h6B81,
16h2C4B,
16h6B8D,
16h6A00,
16h6147,
16h0C42,
16h6B8D,
16h6103,
16h710F,
16h187A,
16h6403,
16h2B6D,
16h6181,
16h8004,
16h4546,
16h44F1,
16h6147,
16h0C5A,
16h438C,
16h8003,
16h4546,
16h6B81,
16h2C60,
16h6B8D,
16h6A00,
16h6147,
16h0C57,
16h6B8D,
16h710F,
16h189E,
16h6404,
16h6D75,
16h0070,
16hFE80,
16h6C00,
16h6147,
16h4432,
16h8010,
16h4305,
16h6147,
16h4519,
16h8010,
16h4279,
16h4C51,
16h4155,
16h8002,
16h44F8,
16h4C40,
16h6B81,
16h2C7B,
16h6B8D,
16h6A00,
16h6147,
16h0C6D,
16h6B8D,
16h6103,
16h6103,
16h6B8D,
16hFE80,
16h6023,
16h710F,
16h18C6,
16h2E02,
16h0073,
16h4519,
16h416A,
16h6A00,
16h800F,
16h6303,
16h6147,
16h6B81,
16h482B,
16h4559,
16h6B81,
16h2C94,
16h6B8D,
16h6A00,
16h6147,
16h0C8B,
16h6B8D,
16h6103,
16h4537,
16h3C04,
16h6F74,
16h0073,
16h700C,
16h1906,
16h2807,
16h6E3E,
16h6D61,
16h2965,
16h6C00,
16h4264,
16h2CAA,
16h4279,
16h465B,
16h6503,
16h2CA9,
16h4351,
16h0CA0,
16h700F,
16h6103,
16h8000,
16h700C,
16h1938,
16h3E05,
16h616E,
16h656D,
16h6147,
16h4B87,
16h4264,
16h2CCD,
16h6180,
16h6B81,
16h6180,
16h4CA0,
16h4264,
16h2CCB,
16h6147,
16h6A00,
16h6147,
16h0CC0,
16h6103,
16h6B81,
16h2CC6,
16h6B8D,
16h6A00,
16h6147,
16h0CBF,
16h6B8D,
16h6103,
16h6B8D,
16h6B8D,
16h710F,
16h6A00,
16h0CB3,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h195C,
16h7303,
16h6565,
16h47D7,
16h4519,
16h6081,
16h6C00,
16h4264,
16hF00C,
16h6503,
16h2CED,
16hBFFF,
16h6303,
16h8001,
16h6D03,
16h4CB1,
16h4264,
16h2CE6,
16h44F1,
16h4B4F,
16h0CEB,
16h6081,
16h6C00,
16hFFFF,
16h6303,
16h4552,
16h434B,
16h0CD6,
16h0273,
16h19A4,
16h2807,
16h6F77,
16h6472,
16h2973,
16h4519,
16h6C00,
16h4264,
16h2CFC,
16h6081,
16h4B4F,
16h44F1,
16h4351,
16h0CF4,
16h700C,
16h19DE,
16h7705,
16h726F,
16h7364,
16h4B87,
16h4264,
16h2D0F,
16h6180,
16h4519,
16h4519,
16h4537,
16h3A01,
16h6081,
16h4B92,
16h4519,
16h4CF3,
16h6A00,
16h0D02,
16h700C,
16h19FC,
16h7603,
16h7265,
16h8001,
16h8100,
16h4329,
16h8008,
16h720F,
16h1A22,
16h6802,
16h0069,
16h4519,
16h4537,
16h650C,
16h6F66,
16h7472,
16h2068,
16h316A,
16h202B,
16h0076,
16hFE80,
16h6C00,
16h4432,
16h4D13,
16h43F4,
16h4406,
16h4406,
16h802E,
16h43FC,
16h4406,
16h441E,
16h4509,
16hFE80,
16h6023,
16h6103,
16h0519,
16h1A32,
16h6304,
16h6C6F,
16h0064,
16h8002,
16hFE80,
16h8042,
16h45A7,
16h47BF,
16hFEA2,
16h6081,
16hFE90,
16h6023,
16h6103,
16h6081,
16hFEA8,
16h4379,
16h4A86,
16hC000,
16h434B,
16h6081,
16h4351,
16h6C00,
16h4799,
16hFEB4,
16h43BC,
16h47C8,
16h0D38,
16h1A6A,
16h3205,
16h766F,
16h7265,
16h6147,
16h6147,
16h4279,
16h6B8D,
16h6B8D,
16h426B,
16h6147,
16h426B,
16h6B8D,
16h700C,
16h1AA2,
16h3205,
16h7773,
16h7061,
16h426B,
16h6147,
16h426B,
16h6B8D,
16h700C,
16h1ABE,
16h3204,
16h696E,
16h0070,
16h426B,
16h6103,
16h426B,
16h710F,
16h1AD0,
16h3204,
16h6F72,
16h0074,
16h6180,
16h6147,
16h6147,
16h4D62,
16h6B8D,
16h6B8D,
16h6180,
16h0D62,
16h1AE0,
16h6403,
16h3D30,
16h6403,
16h701C,
16h1AF8,
16h6402,
16h003D,
16h6147,
16h426B,
16h6503,
16h6180,
16h6B8D,
16h6503,
16h6403,
16h701C,
16h1B02,
16h6402,
16h002B,
16h426B,
16h6203,
16h6147,
16h6181,
16h6203,
16h6081,
16h426B,
16h6F03,
16h2D9A,
16h6B8D,
16h6310,
16h0D9B,
16h6B8D,
16h700C,
16h1B18,
16h6402,
16h002D,
16h4286,
16h0D8E,
16h1B3A,
16h7303,
16h643E,
16h6081,
16h781C,
16h1B44,
16h6403,
16h2B31,
16h8001,
16h4DA4,
16h0D8E,
16h1B4E,
16h6403,
16h2D31,
16h8001,
16h4DA4,
16h4286,
16h0D8E,
16h1B5A,
16h6404,
16h6F78,
16h0072,
16h426B,
16h6503,
16h4155,
16h6503,
16h718C,
16h1B68,
16h6404,
16h6E61,
16h0064,
16h426B,
16h6303,
16h4155,
16h6303,
16h718C,
16h1B7A,
16h6403,
16h726F,
16h426B,
16h6403,
16h4155,
16h6403,
16h718C,
16h1B8C,
16h6407,
16h6E69,
16h6576,
16h7472,
16h6600,
16h6180,
16h6600,
16h718C,
16h1B9C,
16h6403,
16h2A32,
16h4279,
16h0D8E,
16h1BAE,
16h6403,
16h2F32,
16h6081,
16h800F,
16h6D03,
16h6147,
16h415D,
16h6180,
16h415D,
16h6B8D,
16h6403,
16h718C,
16h1BB8,
16h6C04,
16h6465,
16h0040,
16h8FFD,
16h6600,
16h7C0C,
16h1BD2,
16h6C04,
16h6465,
16h0021,
16h8FFD,
16h6600,
16h6023,
16h710F,
16h1BE0,
16h6208,
16h7475,
16h6F74,
16h736E,
16h0040,
16h8FFC,
16h6600,
16h7C0C,
16h1BF0,
16h6205,
16h6565,
16h2170,
16h6081,
16h801D,
16h6600,
16h6023,
16h6103,
16h8019,
16h6600,
16h6023,
16h6103,
16h6081,
16h801E,
16h6600,
16h6023,
16h6103,
16h801A,
16h6600,
16h6023,
16h6103,
16h6081,
16h801F,
16h6600,
16h6023,
16h6103,
16h801B,
16h6600,
16h6023,
16h6103,
16h6081,
16h801C,
16h6600,
16h6023,
16h6103,
16h8018,
16h6600,
16h6023,
16h710F,
16h1C02,
16h6205,
16h6565,
16h3F70,
16h801C,
16h6600,
16h6C00,
16h6010,
16h2E2C,
16h8018,
16h6600,
16h6C00,
16h6010,
16h2E31,
16h700C,
16h1C52,
16h6206,
16h6565,
16h4C70,
16h0021,
16h801D,
16h6600,
16h6023,
16h6103,
16h801E,
16h6600,
16h6023,
16h6103,
16h801F,
16h6600,
16h6023,
16h6103,
16h801C,
16h6600,
16h6023,
16h710F,
16h1C70,
16h6206,
16h6565,
16h5270,
16h0021,
16h8019,
16h6600,
16h6023,
16h6103,
16h801A,
16h6600,
16h6023,
16h6103,
16h801B,
16h6600,
16h6023,
16h6103,
16h8018,
16h6600,
16h6023,
16h710F,
16h1C9A,
16h6206,
16h6565,
16h4C70,
16h003F,
16h801C,
16h6600,
16h6C00,
16h6010,
16h2E66,
16h700C,
16h1CC4,
16h6206,
16h6565,
16h5270,
16h003F,
16h8018,
16h6600,
16h6C00,
16h6010,
16h2E71,
16h700C,
16h1CDA,
16h6306,
16h6F6C,
16h6B63,
16h0040,
16h8FFB,
16h6600,
16h7C0C,
16h1CF0,
16h7409,
16h6D69,
16h7265,
16h6831,
16h217A,
16h8001,
16h8012,
16h6600,
16h6023,
16h710F,
16h1D00,
16h7409,
16h6D69,
16h7265,
16h6831,
16h407A,
16h8012,
16h6600,
16h7C0C,
16h1D16,
16h740A,
16h6D69,
16h7265,
16h6B31,
16h7A68,
16h0021,
16h8011,
16h6600,
16h6023,
16h710F,
16h1D28,
16h740A,
16h6D69,
16h7265,
16h6B31,
16h7A68,
16h003F,
16h8011,
16h6600,
16h6C00,
16h6010,
16h2EA5,
16h700C,
16h1D3E,
16h7305,
16h656C,
16h7065,
16h8010,
16h6600,
16h6023,
16h6103,
16h8010,
16h6600,
16h6C00,
16h6010,
16h2EB3,
16h700C,
16h1D58,
16h7203,
16h676E,
16h801F,
16h6600,
16h6C00,
16h6180,
16h42FA,
16h710F,
16h1D74,
16h7607,
16h6C62,
16h6E61,
16h3F6B,
16h8000,
16h6600,
16h6C00,
16h6110,
16h2EC7,
16h700C,
16h1D86,
16h620B,
16h6361,
16h676B,
16h6F72,
16h6E75,
16h2164,
16h800D,
16h6600,
16h6023,
16h6103,
16h800E,
16h6600,
16h6023,
16h6103,
16h800F,
16h6600,
16h6023,
16h710F,
16h1D9C,
16h6704,
16h7570,
16h003F,
16h80F8,
16h6600,
16h6C00,
16h6010,
16h2EE4,
16h700C,
16h1DC2,
16h6704,
16h7570,
16h0021,
16h4EE4,
16h80F8,
16h6600,
16h6023,
16h710F,
16h1DD6,
16h7006,
16h7869,
16h6C65,
16h0021,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8001,
16h0EEE,
16h1DE8,
16h720A,
16h6365,
16h6174,
16h676E,
16h656C,
16h0021,
16h80FB,
16h6600,
16h6023,
16h6103,
16h80FC,
16h6600,
16h6023,
16h6103,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8002,
16h0EEE,
16h1E0E,
16h6C05,
16h6E69,
16h2165,
16h80FB,
16h6600,
16h6023,
16h6103,
16h80FC,
16h6600,
16h6023,
16h6103,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8003,
16h0EEE,
16h1E48,
16h6307,
16h7269,
16h6C63,
16h2165,
16h80FC,
16h6600,
16h6023,
16h6103,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8004,
16h0EEE,
16h1E7C,
16h6206,
16h696C,
16h3174,
16h0021,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FC,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8005,
16h0EEE,
16h1EAA,
16h620A,
16h696C,
16h3174,
16h6974,
16h656C,
16h0021,
16h80F4,
16h6600,
16h6023,
16h6103,
16h8010,
16h6A00,
16h6081,
16h80F3,
16h6600,
16h6023,
16h6103,
16h6180,
16h80F2,
16h6600,
16h6023,
16h6103,
16h6081,
16h6010,
16h2F77,
16h710F,
16h1ED8,
16h6303,
16h2173,
16h8040,
16h8000,
16h8000,
16h82F7,
16h81DF,
16h0F0D,
16h1F0E,
16h6C08,
16h6C73,
16h6974,
16h656C,
16h0021,
16h80C7,
16h6600,
16h6023,
16h6103,
16h8040,
16h6A00,
16h6081,
16h80C6,
16h6600,
16h6023,
16h6103,
16h6180,
16h80C5,
16h6600,
16h6023,
16h6103,
16h6081,
16h6010,
16h2F9A,
16h710F,
16h1F20,
16h6C0A,
16h6C73,
16h7073,
16h6972,
16h6574,
16h0021,
16h80CF,
16h6600,
16h6023,
16h6103,
16h80C9,
16h6600,
16h6023,
16h6103,
16h80CE,
16h6600,
16h6023,
16h6103,
16h80CD,
16h6600,
16h6023,
16h6103,
16h80CA,
16h6600,
16h6023,
16h6103,
16h80CB,
16h6600,
16h6023,
16h6103,
16h80CC,
16h6600,
16h6023,
16h710F,
16h1F54,
16h6C0A,
16h6C73,
16h7075,
16h6164,
16h6574,
16h0021,
16h80CF,
16h6600,
16h6023,
16h6103,
16h80C1,
16h6600,
16h6023,
16h710F,
16h1F9A,
16h7508,
16h6C73,
16h6974,
16h656C,
16h0021,
16h80B7,
16h6600,
16h6023,
16h6103,
16h8040,
16h6A00,
16h6081,
16h80B6,
16h6600,
16h6023,
16h6103,
16h6180,
16h80B5,
16h6600,
16h6023,
16h6103,
16h6081,
16h6010,
16h2FE6,
16h710F,
16h1FB8,
16h750A,
16h6C73,
16h7073,
16h6972,
16h6574,
16h0021,
16h80BF,
16h6600,
16h6023,
16h6103,
16h80B9,
16h6600,
16h6023,
16h6103,
16h80BE,
16h6600,
16h6023,
16h6103,
16h80BD,
16h6600,
16h6023,
16h6103,
16h80BA,
16h6600,
16h6023,
16h6103,
16h80BB,
16h6600,
16h6023,
16h6103,
16h80BC,
16h6600,
16h6023,
16h710F,
16h1FEC,
16h750A,
16h6C73,
16h7075,
16h6164,
16h6574,
16h0021,
16h80BF,
16h6600,
16h6023,
16h6103,
16h80B1,
16h6600,
16h6023,
16h710F,
16h2032,
16h760D,
16h6365,
16h6F74,
16h7672,
16h7265,
16h6574,
16h2178,
16h8089,
16h6600,
16h6023,
16h6103,
16h808A,
16h6600,
16h6023,
16h6103,
16h8087,
16h6600,
16h6023,
16h6103,
16h8088,
16h6600,
16h6023,
16h6103,
16h8086,
16h6600,
16h6023,
16h6103,
16h8001,
16h8085,
16h6600,
16h6023,
16h710F,
16h2050,
16h7607,
16h6365,
16h6F74,
16h3F72,
16h808B,
16h6600,
16h6C00,
16h6010,
16h304D,
16h700C,
16h2092,
16h7607,
16h6365,
16h6F74,
16h2172,
16h504D,
16h808F,
16h6600,
16h6023,
16h6103,
16h808C,
16h6600,
16h6023,
16h6103,
16h808D,
16h6600,
16h6023,
16h6103,
16h808E,
16h6600,
16h6023,
16h6103,
16h8001,
16h808B,
16h6600,
16h6023,
16h710F,
16h20A8,
16h6408,
16h656C,
16h746E,
16h7972,
16h0021,
16h807C,
16h6600,
16h6023,
16h6103,
16h8075,
16h6600,
16h6023,
16h6103,
16h8076,
16h6600,
16h6023,
16h6103,
16h8077,
16h6600,
16h6023,
16h6103,
16h8078,
16h6600,
16h6023,
16h6103,
16h8079,
16h6600,
16h6023,
16h6103,
16h807A,
16h6600,
16h6023,
16h6103,
16h807B,
16h6600,
16h6023,
16h6103,
16h8001,
16h8074,
16h6600,
16h6023,
16h710F,
16h20DE,
16h6408,
16h736C,
16h6174,
16h7472,
16h0021,
16h807E,
16h6600,
16h6023,
16h6103,
16h807F,
16h6600,
16h6023,
16h6103,
16h8001,
16h807D,
16h6600,
16h6023,
16h710F,
16h2134,
16h6403,
16h3F6C,
16h807D,
16h6600,
16h6C00,
16h6010,
16h30AF,
16h700C,
16h215A,
16h7404,
16h7570,
16h0021,
16h80EA,
16h6600,
16h6023,
16h710F,
16h216C,
16h7406,
16h7570,
16h7978,
16h0021,
16h80EE,
16h6600,
16h6023,
16h6103,
16h80EF,
16h6600,
16h6023,
16h6103,
16h8001,
16h10B9,
16h217C,
16h740E,
16h7570,
16h6F66,
16h6572,
16h7267,
16h756F,
16h646E,
16h0021,
16h80EB,
16h6600,
16h6023,
16h710F,
16h219A,
16h740E,
16h7570,
16h6162,
16h6B63,
16h7267,
16h756F,
16h646E,
16h0021,
16h80EC,
16h6600,
16h6023,
16h710F,
16h21B4,
16h7407,
16h7570,
16h6D65,
16h7469,
16h80ED,
16h6600,
16h6023,
16h6103,
16h8002,
16h10B9,
16h21CE,
16h7406,
16h7570,
16h7363,
16h0021,
16h8000,
16h8000,
16h50C2,
16h8000,
16h50D5,
16h8040,
16h50E2,
16h8960,
16h6147,
16h1102,
16h8000,
16h50EB,
16h6B81,
16h3108,
16h6B8D,
16h6A00,
16h6147,
16h1100,
16h6B8D,
16h6103,
16h8000,
16h8000,
16h10C2,
16h21E4,
16h7408,
16h7570,
16h7073,
16h6361,
16h0065,
16h435C,
16h10EB,
16h221C,
16h7409,
16h7570,
16h7073,
16h6361,
16h7365,
16h8000,
16h6B13,
16h6147,
16h1120,
16h5113,
16h6B81,
16h3126,
16h6B8D,
16h6A00,
16h6147,
16h111F,
16h6B8D,
16h710F,
16h222C,
16h7407,
16h7570,
16h7974,
16h6570,
16h6147,
16h1131,
16h438C,
16h50EB,
16h6B81,
16h3137,
16h6B8D,
16h6A00,
16h6147,
16h112F,
16h6B8D,
16h6103,
16h710F,
16h2252,
16h7405,
16h7570,
16h242E,
16h438C,
16h112D,
16h2276,
16h7405,
16h7570,
16h722E,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h511B,
16h112D,
16h2282,
16h7406,
16h7570,
16h2E75,
16h0072,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h511B,
16h112D,
16h2298,
16h7405,
16h7570,
16h2E75,
16h43F4,
16h440D,
16h441E,
16h5113,
16h112D,
16h22B4,
16h7404,
16h7570,
16h002E,
16hFE80,
16h6C00,
16h800A,
16h6503,
16h316C,
16h115D,
16h4427,
16h5113,
16h112D,
16h22C6,
16h7405,
16h7570,
16h232E,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h5166,
16hFE80,
16h6023,
16h710F,
16h22E0,
16h7406,
16h7570,
16h2E75,
16h0023,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h43F4,
16h440D,
16h441E,
16h5113,
16h512D,
16hFE80,
16h6023,
16h710F,
16h22F8,
16h7407,
16h7570,
16h2E75,
16h2372,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h511B,
16h512D,
16hFE80,
16h6023,
16h710F,
16h231A,
16h7406,
16h7570,
16h722E,
16h0023,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h511B,
16h512D,
16hFE80,
16h6023,
16h710F,
16h2346,
16h740D,
16h7265,
16h696D,
16h616E,
16h736C,
16h6F68,
16h2177,
16h8001,
16h80DE,
16h6600,
16h6023,
16h710F,
16h236E,
16h740D,
16h7265,
16h696D,
16h616E,
16h686C,
16h6469,
16h2165,
16h8000,
16h80DE,
16h6600,
16h6023,
16h710F

        , pad(uninitialized)
    };
    dualport_bram uint16 ram_1[8192] = uninitialized;

    // CYCLE to control each stage
    // CYCLE allows 1 clock cycle for BRAM access
    uint2 CYCLE = 0;
    
    // UART input FIFO (4096 character) as dualport bram (code from @sylefeb)
    dualport_bram uint8 uartInBuffer[4096] = uninitialized;
    uint13  uartInBufferNext = 0;
    uint13  uartInBufferTop = 0;

    // UART output FIFO (16 character) as dualport bram (code from @sylefeb)
    dualport_bram uint8 uartOutBuffer[16] = uninitialized;
    uint4   uartOutBufferNext = 0;
    uint4   uartOutBufferTop = 0;
    uint4   newuartOutBufferTop = 0;
    
    // register buttons
    uint7 reg_btns = 0;
    reg_btns ::= btns;

    // Setup addresses for the ram
    // General memory accessed via port 0, Instruction data accessed via port 1
    ram_0.addr0 := stackTop >> 1;
    ram_0.wdata0 := stackNext;
    ram_0.wenable0 := 0;
    ram_1.addr0 := stackTop >> 1;
    ram_1.wdata0 := stackNext;
    ram_1.wenable0 := 0;
    ram_1.wenable1 := 0;
    // PC for instruction
    ram_0.addr1 := pc;
    ram_0.wenable1 := 0;

    // Setup addresses for the dstack and rstack
    // Read via port 0, write via port 1
    dstack.addr0 := dsp;
    dstack.wenable0 := 0;  
    dstack.addr1 := newDSP;
    dstack.wdata1 := stackTop;
    dstack.wenable1 := 0;  
    rstack.addr0 := rsp;
    rstack.wenable0 := 0;
    rstack.addr1 := newRSP;
    rstack.wdata1 := rstackWData;
    rstack.wenable1 := 0;

    // UART Buffers
    uartInBuffer.wenable0  := 0;  // always read  on port 0
    uartInBuffer.wenable1  := 1;  // always write on port 1
    uartInBuffer.addr0     := uartInBufferNext; // FIFO reads on next
    uartInBuffer.addr1     := uartInBufferTop;  // FIFO writes on top
    
    uartOutBuffer.wenable0 := 0; // always read  on port 0
    uartOutBuffer.wenable1 := 1; // always write on port 1    
    uartOutBuffer.addr0    := uartOutBufferNext; // FIFO reads on next
    uartOutBuffer.addr1    := uartOutBufferTop;  // FIFO writes on top

    // Setup the UART
    uo.data_in_ready := 0; // maintain low
    
    // UART input and output buffering
    always {
        // READ from UART if character available and store
        if( ui.data_out_ready ) {
            // writes at uartInBufferTop (code from @sylefeb)
            uartInBuffer.wdata1  = ui.data_out;            
            uartInBufferTop      = uartInBufferTop + 1;
        }
        // WRITE to UART if characters in buffer and UART is ready
        if( (uartOutBufferNext != uartOutBufferTop) && ( !uo.busy ) ) {
            // reads at uartOutBufferNext (code from @sylefeb)
            uo.data_in      = uartOutBuffer.rdata0; 
            uo.data_in_ready     = 1;
            uartOutBufferNext = uartOutBufferNext + 1;
        }
    }
    
    // Setup the terminal
    terminal_window.showterminal = 1;
    terminal_window.showcursor = 1;

    // EXECUTE J1 CPU
    while( 1 ) {
        // Update UART output buffer top if character has been put into buffer
        uartOutBufferTop = newuartOutBufferTop;        
        
        switch( CYCLE ) {
            // Read stackNext, rStackTop
            case 0: {
                // read dstack and rstack brams (code from @sylefeb)
                stackNext = dstack.rdata0;
                rStackTop = rstack.rdata0;

                // read instruction and pre-emptively the memory
                instruction = ram_0.rdata1;
                memoryInput = ( stackTop > 16383 ) ? ram_1.rdata0 : ram_0.rdata0;
            }
            
            // J1 CPU Instruction Execute
            case 1: {
                // +---------------------------------------------------------------+
                // | F | E | D | C | B | A | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
                // +---------------------------------------------------------------+
                // | 1 |                    LITERAL VALUE                          |
                // +---------------------------------------------------------------+
                // | 0 | 0 | 0 |            BRANCH TARGET ADDRESS                  |
                // +---------------------------------------------------------------+
                // | 0 | 0 | 1 |            CONDITIONAL BRANCH TARGET ADDRESS      |
                // +---------------------------------------------------------------+
                // | 0 | 1 | 0 |            CALL TARGET ADDRESS                    |
                // +---------------------------------------------------------------+
                // | 0 | 1 | 1 |R2P| ALU OPERATION |T2N|T2R|N2A|J1P| RSTACK| DSTACK|
                // +---------------------------------------------------------------+
                // | F | E | D | C | B | A | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
                // +---------------------------------------------------------------+
                // 
                // T   : Top of data stack
                // N   : Next on data stack
                // PC  : Program Counter
                // 
                // LITERAL VALUES : push a value onto the data stack
                // CONDITIONAL    : BRANCHS pop and test the T
                // CALLS          : PC+1 onto the return stack
                // 
                // T2N : Move T to N
                // T2R : Move T to top of return stack
                // N2A : STORE T to memory location addressed by N
                // R2P : Move top of return stack to PC
                // 
                // RSTACK and DSTACK are signed values (twos compliment) that are
                // the stack delta (the amount to increment or decrement the stack
                // by for their respective stacks: return and data)

                if(is_lit) {
                    // LITERAL Push value onto stack
                    newStackTop = immediate;
                    newPC = pcPlusOne;
                    newDSP = dsp + 1;
                    newRSP = rsp;
                } else {
                    switch( callbranch(instruction).is_callbranchalu ) { // BRANCH 0BRANCH CALL ALU
                        case 2b00: {
                            // BRANCH
                            newStackTop = stackTop;
                            newPC = callbranch(instruction).address;
                            newDSP = dsp;
                            newRSP = rsp;
                        }
                        case 2b01: {
                            // 0BRANCH
                            newStackTop = stackNext;
                            newPC = ( stackTop == 0 ) ? callbranch(instruction).address : pcPlusOne;
                            newDSP = dsp - 1;
                            newRSP = rsp;
                        }
                        case 2b10: {
                            // CALL
                            newStackTop = stackTop;
                            newPC = callbranch(instruction).address;
                            newDSP = dsp;
                            newRSP = rsp + 1;
                            rstackWData = pcPlusOne << 1;
                        }
                        case 2b11: {
                            // ALU
                            switch( aluop(instruction).is_j1j1plus ) {
                                case 1b0: {
                                    switch( aluop(instruction).operation ) {
                                        case 4b0000: {newStackTop = stackTop;}
                                        case 4b0001: {newStackTop = stackNext;}
                                        case 4b0010: {newStackTop = stackTop + stackNext;}
                                        case 4b0011: {newStackTop = stackTop & stackNext;}
                                        case 4b0100: {newStackTop = stackTop | stackNext;}
                                        case 4b0101: {newStackTop = stackTop ^ stackNext;}
                                        case 4b0110: {newStackTop = ~stackTop;}
                                        case 4b0111: {newStackTop = {16{(stackNext == stackTop)}};}
                                        case 4b1000: {newStackTop = {16{(__signed(stackNext) < __signed(stackTop))}};}
                                        case 4b1001: {newStackTop = stackNext >> nibbles(stackTop).nibble0;}
                                        case 4b1010: {newStackTop = stackTop - 1;}
                                        case 4b1011: {newStackTop = rStackTop;}
                                        case 4b1100: {
                                            switch( stackTop[12,4] ) {
                                                default: { newStackTop = memoryInput; }
                                                case 4hf: {
                                                    switch( stackTop[8,4] ) {
                                                        case 4h0: {
                                                            switch( stackTop[0,4] ) {
                                                                // f000
                                                                case 4h0: { newStackTop = { 8b0, uartInBuffer.rdata0 }; uartInBufferNext = uartInBufferNext + 1; } 
                                                                case 4h1: { newStackTop = { 14b0, ( uartOutBufferTop + 1 == uartOutBufferNext ), ( uartInBufferNext != uartInBufferTop )}; }
                                                                case 4h2: { newStackTop = leds; }
                                                                case 4h3: { newStackTop = {9b0, reg_btns[0,7]}; }
                                                                case 4h4: { newStackTop = systemClock; }
                                                            }
                                                        }
                                                        case 4hf: {
                                                            switch( stackTop[4,4] ) {
                                                                case 4h0: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ff00 -
                                                                        case 4h7: { newStackTop = gpu_processor.gpu_active; }
                                                                        case 4h8: { newStackTop = bitmap_window.bitmap_colour_read; }
                                                                    }
                                                                }
                                                                case 4h2: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ff20 -
                                                                        case 4h0: { newStackTop = terminal_window.terminal_active; }
                                                                    }
                                                                }
                                                                case 4h3: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ff30 -
                                                                        case 4h1: { newStackTop = lower_sprites.sprite_read_active; }
                                                                        case 4h2: { newStackTop = lower_sprites.sprite_read_tile; }
                                                                        case 4h3: { newStackTop = lower_sprites.sprite_read_colour; }
                                                                        case 4h4: { newStackTop = lower_sprites.sprite_read_x; }
                                                                        case 4h5: { newStackTop = lower_sprites.sprite_read_y; }
                                                                        case 4h6: { newStackTop = lower_sprites.sprite_read_double; }
                                                                        case 4h7: { newStackTop = lower_sprites.sprite_read_colmode; }
                                                                    }
                                                                }
                                                                case 4h4: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ff40 -
                                                                        case 4h1: { newStackTop = upper_sprites.sprite_read_active; }
                                                                        case 4h2: { newStackTop = upper_sprites.sprite_read_tile; }
                                                                        case 4h3: { newStackTop = upper_sprites.sprite_read_colour; }
                                                                        case 4h4: { newStackTop = upper_sprites.sprite_read_x; }
                                                                        case 4h5: { newStackTop = upper_sprites.sprite_read_y; }
                                                                        case 4h6: { newStackTop = upper_sprites.sprite_read_double; }
                                                                        case 4h7: { newStackTop = upper_sprites.sprite_read_colmode; }
                                                                    }
                                                                }
                                                                case 4h5: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ff50 -
                                                                        case 4h0: { newStackTop = lower_sprites.collision_0; }
                                                                        case 4h1: { newStackTop = lower_sprites.collision_1; }
                                                                        case 4h2: { newStackTop = lower_sprites.collision_2; }
                                                                        case 4h3: { newStackTop = lower_sprites.collision_3; }
                                                                        case 4h4: { newStackTop = lower_sprites.collision_4; }
                                                                        case 4h5: { newStackTop = lower_sprites.collision_5; }
                                                                        case 4h6: { newStackTop = lower_sprites.collision_6; }
                                                                        case 4h7: { newStackTop = lower_sprites.collision_7; }
                                                                        case 4h8: { newStackTop = lower_sprites.collision_8; }
                                                                        case 4h9: { newStackTop = lower_sprites.collision_9; }
                                                                        case 4ha: { newStackTop = lower_sprites.collision_10; }
                                                                        case 4hb: { newStackTop = lower_sprites.collision_11; }
                                                                        case 4hc: { newStackTop = lower_sprites.collision_12; }
                                                                        case 4hd: { newStackTop = lower_sprites.collision_13; }
                                                                        case 4he: { newStackTop = lower_sprites.collision_14; }
                                                                    }
                                                                }
                                                                case 4h6: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ff60 -
                                                                        case 4h0: { newStackTop = upper_sprites.collision_0; }
                                                                        case 4h1: { newStackTop = upper_sprites.collision_1; }
                                                                        case 4h2: { newStackTop = upper_sprites.collision_2; }
                                                                        case 4h3: { newStackTop = upper_sprites.collision_3; }
                                                                        case 4h4: { newStackTop = upper_sprites.collision_4; }
                                                                        case 4h5: { newStackTop = upper_sprites.collision_5; }
                                                                        case 4h6: { newStackTop = upper_sprites.collision_6; }
                                                                        case 4h7: { newStackTop = upper_sprites.collision_7; }
                                                                        case 4h8: { newStackTop = upper_sprites.collision_8; }
                                                                        case 4h9: { newStackTop = upper_sprites.collision_9; }
                                                                        case 4ha: { newStackTop = upper_sprites.collision_10; }
                                                                        case 4hb: { newStackTop = upper_sprites.collision_11; }
                                                                        case 4hc: { newStackTop = upper_sprites.collision_12; }
                                                                        case 4hd: { newStackTop = upper_sprites.collision_13; }
                                                                        case 4he: { newStackTop = upper_sprites.collision_14; }
                                                                    }
                                                                }
                                                                case 4h7: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ff70 -
                                                                        case 4h4: { newStackTop = vector_drawer.vector_block_active; }
                                                                    }
                                                                }
                                                                case 4h8: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ff80 -
                                                                        case 4h2: { newStackTop = displaylist_drawer.display_list_active; }
                                                                    }
                                                                }
                                                                case 4he: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // ffe0 -
                                                                        case 4h0: { newStackTop = staticGenerator; }
                                                                        case 4h3: { newStackTop = apu_processor_L.audio_active; }
                                                                        case 4h7: { newStackTop = apu_processor_R.audio_active; }
                                                                        case 4hd: { newStackTop = timer1hz.counter1hz; }
                                                                        case 4he: { newStackTop = timer1khz.counter1khz; }
                                                                        case 4hf: { newStackTop = sleepTimer.counter1khz; }
                                                                    }
                                                                }
                                                                case 4hf: {
                                                                    switch( stackTop[0,4] ) {
                                                                        // fff0 -
                                                                        case 4hf: { newStackTop = vblank; }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        case 4b1101: {newStackTop = stackNext << nibbles(stackTop).nibble0;}
                                        case 4b1110: {newStackTop = {rsp, dsp};}
                                        case 4b1111: {newStackTop = {16{(__unsigned(stackNext) < __unsigned(stackTop))}};}
                                    }
                                }
                                
                                case 1b1: {
                                    switch( aluop(instruction).operation ) {
                                        case 4b0000: {newStackTop = {16{(stackTop == 0)}};}
                                        case 4b0001: {newStackTop = ~{16{(stackTop == 0)}};}
                                        case 4b0010: {newStackTop = ~{16{(stackNext == stackTop)}};}
                                        case 4b0011: {newStackTop = stackTop + 1;}
                                        case 4b0100: {newStackTop = stackTop << 1;}
                                        case 4b0101: {newStackTop = stackTop >> 1;}
                                        case 4b0110: {newStackTop = {16{(__signed(stackNext) > __signed(stackTop))}};}
                                        case 4b0111: {newStackTop = {16{(__unsigned(stackNext) > __unsigned(stackTop))}};}
                                        case 4b1000: {newStackTop = {16{(__signed(stackTop) < __signed(0))}};}
                                        case 4b1001: {newStackTop = {16{(__signed(stackTop) > __signed(0))}};}
                                        case 4b1010: {newStackTop = ( __signed(stackTop) < __signed(0) ) ?  - stackTop : stackTop;}
                                        case 4b1011: {newStackTop = ( __signed(stackNext) > __signed(stackTop) ) ? stackNext : stackTop;}
                                        case 4b1100: {newStackTop = ( __signed(stackNext) < __signed(stackTop) ) ? stackNext : stackTop;}
                                        case 4b1101: {newStackTop = -stackTop;}
                                        case 4b1110: {newStackTop = stackNext - stackTop;}
                                        case 4b1111: {newStackTop = {16{(__signed(stackNext) >= __signed(stackTop))}};}
                                    }
                                }
                            } // ALU Operation
                            
                            // UPDATE newDSP newRSP
                            newDSP = dsp + ddelta;
                            newRSP = rsp + rdelta;
                            rstackWData = stackTop;

                            // Update PC for next instruction, return from call or next instruction
                            newPC = ( aluop(instruction).is_r2pc ) ? rStackTop >> 1 : pcPlusOne;

                            // n2memt mem[t] = n        
                            if( aluop(instruction).is_n2memt ) {
                                switch( stackTop[12,4] ) {
                                    case 4hf: {
                                        switch( stackTop[8,4] ) {
                                            case 4h0: {
                                                switch( stackTop[0,4] ) {
                                                    // f000 -
                                                    case 4h0: { uartOutBuffer.wdata1 = bytes(stackNext).byte0; newuartOutBufferTop = uartOutBufferTop + 1; }
                                                    case 4h2: { leds = stackNext; }
                                                }
                                            }
                                            case 4hf: {
                                                switch( stackTop[4,4] ) {
                                                    case 4h0: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff00 -
                                                            case 4h0: { gpu_processor.gpu_x = stackNext; }
                                                            case 4h1: { gpu_processor.gpu_y = stackNext; }
                                                            case 4h2: { gpu_processor.gpu_colour = stackNext; }
                                                            case 4h3: { gpu_processor.gpu_param0 = stackNext; }
                                                            case 4h4: { gpu_processor.gpu_param1 = stackNext; }
                                                            case 4h5: { gpu_processor.gpu_param2 = stackNext; }
                                                            case 4h6: { gpu_processor.gpu_param3 = stackNext; }
                                                            case 4h7: { gpu_processor.gpu_write = stackNext; }
                                                            case 4h9: { bitmap_window.bitmap_x_read = stackNext; }
                                                            case 4ha: { bitmap_window.bitmap_y_read = stackNext; }
                                                            case 4hb: { gpu_processor.blit1_writer_tile = stackNext; }
                                                            case 4hc: { gpu_processor.blit1_writer_line = stackNext; }
                                                            case 4hd: { gpu_processor.blit1_writer_bitmap = stackNext;  gpu_processor.blit1_writer_active = 1; }
                                                            case 14hf: { gpu_processor.gpu_param0 = stackNext; gpu_processor.gpu_write = 7; }
                                                        }
                                                    }
                                                   case 4h1: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff10 -
                                                            case 4h0: { character_map_window.tpu_x = stackNext; }
                                                            case 4h1: { character_map_window.tpu_y = stackNext; }
                                                            case 4h2: { character_map_window.tpu_character = stackNext; }
                                                            case 4h3: { character_map_window.tpu_background = stackNext; }
                                                            case 4h4: { character_map_window.tpu_foreground = stackNext; }
                                                            case 4h5: { character_map_window.tpu_write = stackNext; }
                                                        }
                                                    }
                                                   case 4h2: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff20 -
                                                            case 4h0: { terminal_window.terminal_character = stackNext; terminal_window.terminal_write = 1; }
                                                            case 4h1: { terminal_window.showterminal = stackNext; }
                                                        }
                                                    }
                                                   case 4h3: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff30 -
                                                            case 4h0: { lower_sprites.sprite_set_number = stackNext; }
                                                            case 4h1: { lower_sprites.sprite_set_active = stackNext; lower_sprites.sprite_layer_write = 1; }
                                                            case 4h2: { lower_sprites.sprite_set_tile = stackNext; lower_sprites.sprite_layer_write = 2; }
                                                            case 4h3: { lower_sprites.sprite_set_colour = stackNext; lower_sprites.sprite_layer_write = 3; }
                                                            case 4h4: { lower_sprites.sprite_set_x = stackNext; lower_sprites.sprite_layer_write = 4; }
                                                            case 4h5: { lower_sprites.sprite_set_y = stackNext; lower_sprites.sprite_layer_write = 5; }
                                                            case 4h6: { lower_sprites.sprite_set_double = stackNext; lower_sprites.sprite_layer_write = 6; }
                                                            case 4h7: { lower_sprites.sprite_set_colmode = stackNext; lower_sprites.sprite_layer_write = 7; }
                                                            case 4h8: { lower_sprites.sprite_writer_sprite = stackNext; }
                                                            case 4h9: { lower_sprites.sprite_writer_line = stackNext; }
                                                            case 4ha: { lower_sprites.sprite_writer_bitmap = stackNext; lower_sprites.sprite_writer_active = 1; }
                                                            case 4he: { lower_sprites.sprite_update = stackNext; lower_sprites.sprite_layer_write = 10; }
                                                        }
                                                    }
                                                   case 4h4: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff40 -
                                                            case 4h0: { upper_sprites.sprite_set_number = stackNext; }
                                                            case 4h1: { upper_sprites.sprite_set_active = stackNext; upper_sprites.sprite_layer_write = 1; }
                                                            case 4h2: { upper_sprites.sprite_set_tile = stackNext; upper_sprites.sprite_layer_write = 2; }
                                                            case 4h3: { upper_sprites.sprite_set_colour = stackNext; upper_sprites.sprite_layer_write = 3; }
                                                            case 4h4: { upper_sprites.sprite_set_x = stackNext; upper_sprites.sprite_layer_write = 4; }
                                                            case 4h5: { upper_sprites.sprite_set_y = stackNext; upper_sprites.sprite_layer_write = 5; }
                                                            case 4h6: { upper_sprites.sprite_set_double = stackNext; upper_sprites.sprite_layer_write = 6; }
                                                            case 4h7: { upper_sprites.sprite_set_colmode = stackNext; upper_sprites.sprite_layer_write = 7; }
                                                            case 4h8: { upper_sprites.sprite_writer_sprite = stackNext; }
                                                            case 4h9: { upper_sprites.sprite_writer_line = stackNext; }
                                                            case 4ha: { upper_sprites.sprite_writer_bitmap = stackNext; upper_sprites.sprite_writer_active = 1; }
                                                            case 4he: { upper_sprites.sprite_update = stackNext; upper_sprites.sprite_layer_write = 10; }
                                                        }
                                                    }
                                                   case 4h5: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff50 -
                                                            case 4h1: { lower_sprites.sprite_palette_1 = stackNext; }
                                                            case 4h2: { lower_sprites.sprite_palette_2 = stackNext; }
                                                            case 4h3: { lower_sprites.sprite_palette_3 = stackNext; }
                                                            case 4h4: { lower_sprites.sprite_palette_4 = stackNext; }
                                                            case 4h5: { lower_sprites.sprite_palette_5 = stackNext; }
                                                            case 4h6: { lower_sprites.sprite_palette_6 = stackNext; }
                                                            case 4h7: { lower_sprites.sprite_palette_7 = stackNext; }
                                                            case 4h8: { lower_sprites.sprite_palette_8 = stackNext; }
                                                            case 4h9: { lower_sprites.sprite_palette_9 = stackNext; }
                                                            case 4ha: { lower_sprites.sprite_palette_10 = stackNext; }
                                                            case 4hb: { lower_sprites.sprite_palette_11 = stackNext; }
                                                            case 4hc: { lower_sprites.sprite_palette_12 = stackNext; }
                                                            case 4hd: { lower_sprites.sprite_palette_13 = stackNext; }
                                                            case 4he: { lower_sprites.sprite_palette_14 = stackNext; }
                                                            case 4hf: { lower_sprites.sprite_palette_15 = stackNext; }
                                                        }
                                                    }
                                                   case 4h6: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff60 -
                                                            case 4h1: { upper_sprites.sprite_palette_1 = stackNext; }
                                                            case 4h2: { upper_sprites.sprite_palette_2 = stackNext; }
                                                            case 4h3: { upper_sprites.sprite_palette_3 = stackNext; }
                                                            case 4h4: { upper_sprites.sprite_palette_4 = stackNext; }
                                                            case 4h5: { upper_sprites.sprite_palette_5 = stackNext; }
                                                            case 4h6: { upper_sprites.sprite_palette_6 = stackNext; }
                                                            case 4h7: { upper_sprites.sprite_palette_7 = stackNext; }
                                                            case 4h8: { upper_sprites.sprite_palette_8 = stackNext; }
                                                            case 4h9: { upper_sprites.sprite_palette_9 = stackNext; }
                                                            case 4ha: { upper_sprites.sprite_palette_10 = stackNext; }
                                                            case 4hb: { upper_sprites.sprite_palette_11 = stackNext; }
                                                            case 4hc: { upper_sprites.sprite_palette_12 = stackNext; }
                                                            case 4hd: { upper_sprites.sprite_palette_13 = stackNext; }
                                                            case 4he: { upper_sprites.sprite_palette_14 = stackNext; }
                                                            case 4hf: { upper_sprites.sprite_palette_15 = stackNext; }
                                                        }
                                                    }
                                                   case 4h7: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff70 -
                                                            case 4h0: { vector_drawer.vector_block_number = stackNext; }
                                                            case 4h1: { vector_drawer.vector_block_colour = stackNext; }
                                                            case 4h2: { vector_drawer.vector_block_xc = stackNext; }
                                                            case 4h3: { vector_drawer.vector_block_yc = stackNext; }
                                                            case 4h4: { vector_drawer.draw_vector = 1; }
                                                            case 4h5: { vector_drawer.vertices_writer_block = stackNext; }
                                                            case 4h6: { vector_drawer.vertices_writer_vertex = stackNext; }
                                                            case 4h7: { vector_drawer.vertices_writer_xdelta = stackNext; }
                                                            case 4h8: { vector_drawer.vertices_writer_ydelta = stackNext; }
                                                            case 4h9: { vector_drawer.vertices_writer_active = stackNext; }
                                                            case 4ha: { vector_drawer.vertices_writer_write = 1; }
                                                        }
                                                    }
                                                   case 4h8: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff80 -
                                                            case 4h0: { displaylist_drawer.start_entry = stackNext; }
                                                            case 4h1: { displaylist_drawer.finish_entry = stackNext; }
                                                            case 4h2: { displaylist_drawer.start_displaylist = 1; }
                                                            case 4h3: { displaylist_drawer.writer_entry_number = stackNext; }
                                                            case 4h4: { displaylist_drawer.writer_active = stackNext; }
                                                            case 4h5: { displaylist_drawer.writer_command = stackNext; }
                                                            case 4h6: { displaylist_drawer.writer_colour = stackNext; }
                                                            case 4h7: { displaylist_drawer.writer_x = stackNext; }
                                                            case 4h8: { displaylist_drawer.writer_y = stackNext; }
                                                            case 4h9: { displaylist_drawer.writer_p0 = stackNext; }
                                                            case 4ha: { displaylist_drawer.writer_p1 = stackNext; }
                                                            case 4hb: { displaylist_drawer.writer_write = stackNext; }
                                                        }
                                                    }
                                                   case 4h9: {
                                                        switch( stackTop[0,4] ) {
                                                            // ff90 -
                                                            case 4h0: { tile_map.tm_x = stackNext; }
                                                            case 4h1: { tile_map.tm_y = stackNext; }
                                                            case 4h2: { tile_map.tm_character = stackNext; }
                                                            case 4h3: { tile_map.tm_background = stackNext; }
                                                            case 4h4: { tile_map.tm_foreground = stackNext; }
                                                            case 4h5: { tile_map.tm_write = 1; }
                                                            case 4h6: { tile_map.tile_writer_tile = stackNext; }
                                                            case 4h7: { tile_map.tile_writer_line = stackNext; }
                                                            case 4h8: { tile_map.tile_writer_bitmap = stackNext; tile_map.tile_writer_write = 1; }
                                                            case 4h9: { tile_map.tm_scrollwrap = stackNext; }
                                                        }
                                                    }
                                                   case 4he: {
                                                        switch( stackTop[0,4] ) {
                                                            // ffe0 -
                                                            case 4h0: { apu_processor_L.waveform = stackNext; }
                                                            case 4h1: { apu_processor_L.note = stackNext; }
                                                            case 4h2: { apu_processor_L.duration = stackNext; }
                                                            case 4h3: { apu_processor_L.apu_write = stackNext; }
                                                            case 4h4: { apu_processor_R.waveform = stackNext; }
                                                            case 4h5: { apu_processor_R.note = stackNext; }
                                                            case 4h6: { apu_processor_R.duration = stackNext; }
                                                            case 4h7: { apu_processor_R.apu_write = stackNext; }
                                                            case 4h8: { rng.resetRandom = 1; }
                                                            case 4hd: { timer1hz.resetCounter = 1; }
                                                            case 4he: { timer1khz.resetCount = stackNext; timer1khz.resetCounter = 1; }
                                                            case 4hf: { sleepTimer.resetCount = stackNext; sleepTimer.resetCounter = 1; }
                                                        }
                                                    }
                                                   case 4hf: {
                                                        switch( stackTop[0,4] ) {
                                                            // fff0 -
                                                            case 4h0: { background_generator.backgroundcolour = stackNext; background_generator.background_write = 1; }
                                                            case 4h1: { background_generator.backgroundcolour_alt = stackNext; background_generator.background_write = 2; }
                                                            case 4h2: { background_generator.backgroundcolour_mode = stackNext; background_generator.background_write = 3; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    default: {
                                        // WRITE to RAM
                                        ram_0.wenable0 = ( stackTop < 16384 );
                                        ram_1.wenable0 = ( stackTop > 16383 ) && ( stackTop < 32768 );
                                    }
                                }
                            }
                        } // ALU
                    }
                }
            } // J1 CPU Instruction Execute

            // update pc and perform mem[t] = n
            case 2: {
                // Commit to dstack and rstack
                dstack.wenable1 = dstackWrite;
                rstack.wenable1 = rstackWrite;

                // Update dsp, rsp, pc, stackTop
                dsp = newDSP;
                pc = newPC;
                stackTop = newStackTop;
                rsp = newRSP;
            }
            
            case 3: {
                // RESET Co-Processor ControlsZ
                background_generator.background_write = 0;
                tile_map.tile_writer_write = 0; 
                tile_map.tm_write = 0;
                tile_map.tm_scrollwrap = 0;
                lower_sprites.sprite_layer_write = 0;
                lower_sprites.sprite_writer_active = 0;
                gpu_processor.gpu_write = 0;
                gpu_processor.blit1_writer_active = 0;
                upper_sprites.sprite_layer_write = 0;
                upper_sprites.sprite_writer_active = 0;
                character_map_window.tpu_write = 0;
                terminal_window.terminal_write = 0;
                vector_drawer.draw_vector = 0;
                vector_drawer.vertices_writer_write = 0;
                displaylist_drawer.start_displaylist = 0;
                displaylist_drawer.writer_write = 0;
                apu_processor_L.apu_write = 0;
                apu_processor_R.apu_write = 0;
                p1hz.resetCounter = 0;
                sleepTimer.resetCounter = 0;
                timer1hz.resetCounter = 0;
                timer1khz.resetCounter = 0;
                rng.resetRandom = 0;
            }
        } // switch(CYCLE)
        
        // Move to next CYCLE ( 0 to 3 , then back to 0 )
        CYCLE = ( CYCLE == 3 ) ? 0 : CYCLE + 1;
    } // execute J1 CPU
}


