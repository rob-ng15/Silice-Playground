// ----------------------- memory_ports.ice -----------
// @sylefeb - Silice standard library
// Memory port interfaces
// 2020-09-03

// single port BRAM

interface bram_port {
  output! addr,
  output! wenable,
  input   rdata,
  output! wdata,
}

// single port BROM

interface brom_port {
  output! addr,
  input   rdata,
}

// dual port BRAM

interface bram_port0 {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
}

interface bram_port1 {
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

interface bram_ports {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

// ----------------------- end of memory_ports.ice ----

// BITFIELDS to help with bit/field access

// Instruction is 3 bits 1xx = literal value, 000 = branch, 001 = 0branch, 010 = call, 011 = alu, followed by 13 bits of instruction specific data
bitfield instruction {
    uint3 is_litcallbranchalu,
    uint13 padding
}

// A literal instruction is 1 followed by a 15 bit UNSIGNED literal value
bitfield literal {
    uint1  is_literal,
    uint15 literalvalue
}

// A branch, 0branch or call instruction is 0 followed by 00 = branch, 01 = 0branch, 10 = call followed by 13bit target address 
bitfield callbranch {
    uint1  is_literal,
    uint2  is_callbranchalu,
    uint13 address
}
// An alu instruction is 0 (not literal) followed by 11 = alu
bitfield aluop {
    uint1   is_literal,
    uint2   is_callbranchalu,
    uint1   is_r2pc,                // return from subroutine
    uint4   operation,              // arithmetic / memory read/write operation to perform
    uint1   is_t2n,                 // top to next in stack
    uint1   is_t2r,                 // top to return stack
    uint1   is_n2memt,              // write to memory       
    uint1   is_j1j1plus,            // Original J1 or extra J1+ alu operations
    uint1   rdelta1,                // two's complement adjustment for rsp
    uint1   rdelta0,
    uint1   ddelta1,                // two's complement adjustment for dsp
    uint1   ddelta0
}

// Simplify access to high/low byte
bitfield bytes {
    uint8   byte1,
    uint8   byte0
}

// Simplify access to 4bit nibbles (used to extract shift left/right amount)
bitfield nibbles {
    uint4   nibble3,
    uint4   nibble2,
    uint4   nibble1,
    uint4   nibble0
}

algorithm main(
    // RGB LED
    output  uint3   rgbLED,
    
    // USER buttons
   input   uint4   buttons,

    // SPRAM Interface
    output uint16   sram_address,
    output uint16   sram_data_write,
    input  uint16   sram_data_read,
    output uint1    sram_readwrite,

    // UART Interface
    output   uint8  uart_in_data,
    output   uint1  uart_in_valid,
    input    uint1  uart_in_ready,
    input    uint8  uart_out_data,
    input    uint1  uart_out_valid,
    output   uint1  uart_out_ready,
    
    // 1hz timer
    input   uint16 timer1hz
) {
    // instruction being executed, plus decoding, including 5bit deltas for dsp and rsp expanded from 2bit encoded in the alu instruction
    uint16  instruction = uninitialized;
    uint16  immediate := ( literal(instruction).literalvalue );
    uint1   is_alu := ( instruction(instruction).is_litcallbranchalu == 3b011 );
    uint1   is_call := ( instruction(instruction).is_litcallbranchalu == 3b010 );
    uint1   is_lit := literal(instruction).is_literal;
    uint1   dstackWrite := ( is_lit | (is_alu & aluop(instruction).is_t2n) );
    uint1   rstackWrite := ( is_call | (is_alu & aluop(instruction).is_t2r) );
    uint8   ddelta := { {7{aluop(instruction).ddelta1}}, aluop(instruction).ddelta0 };
    uint8   rdelta := { {7{aluop(instruction).rdelta1}}, aluop(instruction).rdelta0 };
    
    // program counter
    uint13  pc = 0;
    uint13  pcPlusOne := pc + 1;
    uint13  newPC = uninitialized;

    // dstack 257x16bit (as 3256 array + stackTop) and pointer, next pointer, write line, delta
    bram uint16 dstack[256] = uninitialized; // bram (code from @sylefeb)
    uint16  stackTop = 0;
    uint8   dsp = 0;
    uint8   newDSP = uninitialized;
    uint16  newStackTop = uninitialized;

    // rstack 256x16bit and pointer, next pointer, write line
    bram uint16 rstack[256] = uninitialized; // bram (code from @sylefeb)
    uint8   rsp = 0;
    uint8   newRSP = uninitialized;
    uint16  rstackWData = uninitialized;

    uint16  stackNext = uninitialized;
    uint16  rStackTop = uninitialized;
    uint16  memoryInput = uninitialized;

    // 16bit ROM with included compiled j1eForth from https://github.com/samawati/j1eforth
    bram uint16 rom[] = {
16h0E02,
16h0010,
16h0000,
16h0000,
16h0000,
16h7F00,
16h1058,
16h1136,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h1C34,
16h1BFE,
16h0952,
16h0964,
16h1BCA,
16h0E14,
16h0F00,
16h160C,
16h168E,
16h16B6,
16h1722,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h710C,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h700C,
16h6100,
16h700C,
16h404E,
16h005E,
16h404D,
16h005D,
16h404C,
16h005C,
16h404B,
16h005B,
16h404A,
16h005A,
16h4049,
16h0059,
16h4048,
16h0058,
16h4047,
16h0057,
16h4046,
16h0056,
16h4045,
16h0055,
16h4044,
16h0054,
16h4043,
16h0053,
16h4042,
16h0052,
16h4041,
16h0051,
16h4040,
16h0050,
16h700C,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h6E04,
16h6F6F,
16h0070,
16h700C,
16h0182,
16h2B01,
16h720F,
16h018C,
16h7803,
16h726F,
16h750F,
16h0192,
16h6103,
16h646E,
16h730F,
16h019A,
16h6F02,
16h0072,
16h740F,
16h01A2,
16h6906,
16h766E,
16h7265,
16h0074,
16h760C,
16h01AA,
16h3D01,
16h770F,
16h01B6,
16h3C01,
16h780F,
16h01BC,
16h7502,
16h003C,
16h7F0F,
16h01C2,
16h7304,
16h6177,
16h0070,
16h718C,
16h01CA,
16h7502,
16h003E,
16h771F,
16h01D4,
16h6403,
16h7075,
16h708D,
16h01DC,
16h6404,
16h6F72,
16h0070,
16h710F,
16h01E4,
16h6F04,
16h6576,
16h0072,
16h718D,
16h01EE,
16h6E03,
16h7069,
16h700F,
16h01F8,
16h6C06,
16h6873,
16h6669,
16h0074,
16h7D0F,
16h0200,
16h7206,
16h6873,
16h6669,
16h0074,
16h790F,
16h020C,
16h3102,
16h002D,
16h7A0C,
16h0218,
16h3E42,
16h0072,
16h6B8D,
16h6180,
16h6147,
16h6147,
16h700C,
16h0220,
16h7242,
16h003E,
16h6B8D,
16h6B8D,
16h6180,
16h6147,
16h700C,
16h0230,
16h7242,
16h0040,
16h6B8D,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h6147,
16h700C,
16h0240,
16h4001,
16h7C0C,
16h0254,
16h2101,
16h6023,
16h710F,
16h025A,
16h3C02,
16h003E,
16h721F,
16h0262,
16h3002,
16h003C,
16h781C,
16h026A,
16h3002,
16h003D,
16h701C,
16h0272,
16h3003,
16h3E3C,
16h711C,
16h027A,
16h3E01,
16h761F,
16h0282,
16h3002,
16h003E,
16h791C,
16h0288,
16h3E02,
16h003D,
16h7F1F,
16h0290,
16h7404,
16h6375,
16h006B,
16h6180,
16h718D,
16h0298,
16h2D04,
16h6F72,
16h0074,
16h6180,
16h6147,
16h6180,
16h6B8D,
16h700C,
16h02A4,
16h3202,
16h002F,
16h8001,
16h790F,
16h02B6,
16h3202,
16h002A,
16h741C,
16h02C0,
16h3102,
16h002B,
16h731C,
16h02C8,
16h7303,
16h4070,
16h6E81,
16h80FF,
16h730F,
16h02D0,
16h6507,
16h6578,
16h7563,
16h6574,
16h6147,
16h700C,
16h02DC,
16h6203,
16h6579,
16h8FFD,
16h6600,
16h6023,
16h710F,
16h02EA,
16h6302,
16h0040,
16h6081,
16h6C00,
16h6180,
16h8001,
16h6303,
16h2187,
16h8008,
16h6903,
16h0189,
16h80FF,
16h730F,
16h700C,
16h02F8,
16h6302,
16h0021,
16h6180,
16h80FF,
16h6303,
16h6081,
16h8008,
16h6D03,
16h6403,
16h6180,
16h414F,
16h6081,
16h6C00,
16h6180,
16h8001,
16h6303,
16h8000,
16h6703,
16h80FF,
16h6503,
16h6147,
16h6181,
16h6503,
16h6B8D,
16h6303,
16h6503,
16h6180,
16h6023,
16h710F,
16h0316,
16h7503,
16h2B6D,
16h6181,
16h6181,
16h6203,
16h6147,
16h6B81,
16h8000,
16h6F13,
16h6147,
16h6181,
16h6181,
16h6303,
16h6810,
16h6B8D,
16h6403,
16h6147,
16h6403,
16h6810,
16h6B8D,
16h6303,
16h6600,
16h6310,
16h6B8D,
16h718C,
16h0352,
16h6445,
16h766F,
16h7261,
16h6B8D,
16h700C,
16h0386,
16h7502,
16h0070,
16h41C6,
16h7E8C,
16h0392,
16h6446,
16h756F,
16h6573,
16h0072,
16h41CB,
16h6C00,
16h6B8D,
16h6C00,
16h720F,
16h039C,
16h6204,
16h7361,
16h0065,
16hFE80,
16h700C,
16h03B0,
16h7404,
16h6D65,
16h0070,
16hFE82,
16h700C,
16h03BC,
16h3E03,
16h6E69,
16hFE84,
16h700C,
16h03C8,
16h2304,
16h6974,
16h0062,
16hFE86,
16h700C,
16h03D2,
16h7403,
16h6269,
16hFE88,
16h700C,
16h03DE,
16h2705,
16h7665,
16h6C61,
16hFE8A,
16h700C,
16h03E8,
16h2706,
16h6261,
16h726F,
16h0074,
16hFE8C,
16h700C,
16h03F4,
16h6803,
16h646C,
16hFE8E,
16h700C,
16h0402,
16h6307,
16h6E6F,
16h6574,
16h7478,
16hFE90,
16h700C,
16h040C,
16h660E,
16h726F,
16h6874,
16h772D,
16h726F,
16h6C64,
16h7369,
16h0074,
16hFEA2,
16h700C,
16h041A,
16h6307,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h700C,
16h0430,
16h6402,
16h0070,
16hFEAC,
16h700C,
16h043E,
16h6C04,
16h7361,
16h0074,
16hFEAE,
16h700C,
16h0448,
16h2705,
16h6B3F,
16h7965,
16hFEB0,
16h700C,
16h0454,
16h2705,
16h6D65,
16h7469,
16hFEB2,
16h700C,
16h0460,
16h2705,
16h6F62,
16h746F,
16hFEB4,
16h700C,
16h046C,
16h2702,
16h005C,
16hFEB6,
16h700C,
16h0478,
16h2706,
16h616E,
16h656D,
16h003F,
16hFEB8,
16h700C,
16h0482,
16h2704,
16h2C24,
16h006E,
16hFEBA,
16h700C,
16h0490,
16h2706,
16h766F,
16h7265,
16h0074,
16hFEBC,
16h700C,
16h049C,
16h2702,
16h003B,
16hFEBE,
16h700C,
16h04AA,
16h2707,
16h7263,
16h6165,
16h6574,
16hFEC0,
16h700C,
16h04B4,
16h3F04,
16h7564,
16h0070,
16h6081,
16h2267,
16h708D,
16h700C,
16h04C2,
16h7203,
16h746F,
16h6147,
16h6180,
16h6B8D,
16h718C,
16h04D2,
16h3205,
16h7264,
16h706F,
16h6103,
16h710F,
16h04E0,
16h3204,
16h7564,
16h0070,
16h6181,
16h718D,
16h04EC,
16h6E06,
16h6765,
16h7461,
16h0065,
16h7D1C,
16h04F8,
16h6407,
16h656E,
16h6167,
16h6574,
16h6600,
16h6147,
16h6600,
16h8001,
16h41AB,
16h6B8D,
16h720F,
16h0504,
16h2D01,
16h6D10,
16h720F,
16h051C,
16h6103,
16h7362,
16h7A1C,
16h0524,
16h6D03,
16h7861,
16h7B1F,
16h052C,
16h6D03,
16h6E69,
16h7C1F,
16h0534,
16h7706,
16h7469,
16h6968,
16h006E,
16h6181,
16h428F,
16h6147,
16h428F,
16h6B8D,
16h7F0F,
16h053C,
16h7506,
16h2F6D,
16h6F6D,
16h0064,
16h4279,
16h6F03,
16h22D6,
16h6D10,
16h800F,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6B8D,
16h6203,
16h6081,
16h6B8D,
16h6B81,
16h6180,
16h6147,
16h41AB,
16h6B8D,
16h6403,
16h22CA,
16h6147,
16h6103,
16h6310,
16h6B8D,
16h02CB,
16h6103,
16h6B8D,
16h6B81,
16h22D2,
16h6B8D,
16h6A00,
16h6147,
16h02B3,
16h6B8D,
16h6103,
16h6103,
16h718C,
16h6103,
16h4273,
16h8000,
16h6600,
16h708D,
16h0552,
16h6D05,
16h6D2F,
16h646F,
16h6081,
16h6810,
16h6081,
16h6147,
16h22E8,
16h6D10,
16h6147,
16h4286,
16h6B8D,
16h6147,
16h6081,
16h6810,
16h22EE,
16h6B81,
16h6203,
16h6B8D,
16h42AD,
16h6B8D,
16h22F5,
16h6180,
16h6D10,
16h718C,
16h700C,
16h05B8,
16h2F04,
16h6F6D,
16h0064,
16h6181,
16h6810,
16h6180,
16h02DF,
16h05EE,
16h6D03,
16h646F,
16h42FA,
16h710F,
16h05FE,
16h2F01,
16h42FA,
16h700F,
16h0608,
16h7503,
16h2A6D,
16h8000,
16h6180,
16h800F,
16h6147,
16h6081,
16h41AB,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6B8D,
16h6203,
16h6B8D,
16h231D,
16h6147,
16h6181,
16h41AB,
16h6B8D,
16h6203,
16h6B81,
16h2323,
16h6B8D,
16h6A00,
16h6147,
16h030E,
16h6B8D,
16h6103,
16h426B,
16h710F,
16h0610,
16h2A01,
16h430A,
16h710F,
16h0650,
16h6D02,
16h002A,
16h4279,
16h6503,
16h6810,
16h6147,
16h6A10,
16h6180,
16h6A10,
16h430A,
16h6B8D,
16h2339,
16h0286,
16h700C,
16h0658,
16h2A05,
16h6D2F,
16h646F,
16h6147,
16h432E,
16h6B8D,
16h02DF,
16h0676,
16h2A02,
16h002F,
16h433E,
16h700F,
16h0686,
16h6305,
16h6C65,
16h2B6C,
16h8002,
16h720F,
16h0690,
16h6305,
16h6C65,
16h2D6C,
16h8002,
16h028F,
16h069C,
16h6305,
16h6C65,
16h736C,
16h8001,
16h7D0F,
16h06A8,
16h6202,
16h006C,
16h8020,
16h700C,
16h06B4,
16h3E05,
16h6863,
16h7261,
16h807F,
16h6303,
16h6081,
16h807F,
16h435C,
16h42A2,
16h236B,
16h6103,
16h805F,
16h700C,
16h700C,
16h06BE,
16h2B02,
16h0021,
16h414F,
16h6C00,
16h6203,
16h6180,
16h6023,
16h710F,
16h06DC,
16h3202,
16h0021,
16h6180,
16h6181,
16h6023,
16h6103,
16h434B,
16h6023,
16h710F,
16h06EE,
16h3202,
16h0040,
16h6081,
16h434B,
16h6C00,
16h6180,
16h7C0C,
16h0702,
16h6305,
16h756F,
16h746E,
16h6081,
16h6310,
16h6180,
16h017E,
16h0712,
16h6804,
16h7265,
16h0065,
16hFEAC,
16h7C0C,
16h0722,
16h6107,
16h696C,
16h6E67,
16h6465,
16h6081,
16h8000,
16h8002,
16h42AD,
16h6103,
16h6081,
16h23A5,
16h8002,
16h6180,
16h428F,
16h720F,
16h072E,
16h6105,
16h696C,
16h6E67,
16h4394,
16h439B,
16hFEAC,
16h6023,
16h710F,
16h074E,
16h7003,
16h6461,
16h4394,
16h8050,
16h6203,
16h039B,
16h0760,
16h4008,
16h7865,
16h6365,
16h7475,
16h0065,
16h6C00,
16h4264,
16h23C0,
16h0172,
16h700C,
16h076E,
16h6604,
16h6C69,
16h006C,
16h6180,
16h6147,
16h6180,
16h03CC,
16h4279,
16h418D,
16h6310,
16h6B81,
16h23D2,
16h6B8D,
16h6A00,
16h6147,
16h03C9,
16h6B8D,
16h6103,
16h0273,
16h0784,
16h6505,
16h6172,
16h6573,
16h8000,
16h03C5,
16h07AC,
16h6405,
16h6769,
16h7469,
16h8009,
16h6181,
16h6803,
16h8007,
16h6303,
16h6203,
16h8030,
16h720F,
16h07B8,
16h6507,
16h7478,
16h6172,
16h7463,
16h8000,
16h6180,
16h42AD,
16h6180,
16h03DF,
16h07D0,
16h3C02,
16h0023,
16h43B2,
16hFE8E,
16h6023,
16h710F,
16h07E4,
16h6804,
16h6C6F,
16h0064,
16hFE8E,
16h6C00,
16h6A00,
16h6081,
16hFE8E,
16h6023,
16h6103,
16h018D,
16h07F2,
16h2301,
16hFE80,
16h6C00,
16h43EC,
16h03FC,
16h080A,
16h2302,
16h0073,
16h4406,
16h6081,
16h2411,
16h040D,
16h700C,
16h0816,
16h7304,
16h6769,
16h006E,
16h6810,
16h241A,
16h802D,
16h03FC,
16h700C,
16h0826,
16h2302,
16h003E,
16h6103,
16hFE8E,
16h6C00,
16h43B2,
16h6181,
16h028F,
16h0838,
16h7303,
16h7274,
16h6081,
16h6147,
16h6A10,
16h43F4,
16h440D,
16h6B8D,
16h4416,
16h041E,
16h084A,
16h6803,
16h7865,
16h8010,
16hFE80,
16h6023,
16h710F,
16h0860,
16h6407,
16h6365,
16h6D69,
16h6C61,
16h800A,
16hFE80,
16h6023,
16h710F,
16h086E,
16h6406,
16h6769,
16h7469,
16h003F,
16h6147,
16h8030,
16h428F,
16h8009,
16h6181,
16h6803,
16h2457,
16h6081,
16h8020,
16h6613,
16h2451,
16h8020,
16h428F,
16h8007,
16h428F,
16h6081,
16h800A,
16h6803,
16h6403,
16h6081,
16h6B8D,
16h7F0F,
16h0880,
16h6E07,
16h6D75,
16h6562,
16h3F72,
16hFE80,
16h6C00,
16h6147,
16h8000,
16h6181,
16h438C,
16h6181,
16h417E,
16h8024,
16h6703,
16h246F,
16h4432,
16h6180,
16h6310,
16h6180,
16h6A00,
16h6181,
16h417E,
16h802D,
16h6703,
16h6147,
16h6180,
16h6B81,
16h428F,
16h6180,
16h6B81,
16h6203,
16h4264,
16h24A0,
16h6A00,
16h6147,
16h6081,
16h6147,
16h417E,
16hFE80,
16h6C00,
16h4444,
16h249A,
16h6180,
16hFE80,
16h6C00,
16h4329,
16h6203,
16h6B8D,
16h6310,
16h6B81,
16h2492,
16h6B8D,
16h6A00,
16h6147,
16h047E,
16h6B8D,
16h6103,
16h6B81,
16h6003,
16h2498,
16h6D10,
16h6180,
16h049F,
16h6B8D,
16h6B8D,
16h4273,
16h4273,
16h8000,
16h6081,
16h6B8D,
16h4273,
16h6B8D,
16hFE80,
16h6023,
16h710F,
16h08B6,
16h3F03,
16h7872,
16h8FFE,
16h6600,
16h6C00,
16h8001,
16h6303,
16h711C,
16h094E,
16h7403,
16h2178,
16h8FFE,
16h6600,
16h6C00,
16h8002,
16h6303,
16h6010,
16h24B2,
16h8FFF,
16h6600,
16h6023,
16h710F,
16h0960,
16h3F04,
16h656B,
16h0079,
16hFEB0,
16h03BC,
16h097C,
16h6504,
16h696D,
16h0074,
16hFEB2,
16h03BC,
16h0988,
16h6B03,
16h7965,
16h44C1,
16h24CC,
16h8FFF,
16h6600,
16h7C0C,
16h0994,
16h6E04,
16h6675,
16h003F,
16h44C1,
16h6081,
16h24DC,
16h6103,
16h44CC,
16h800D,
16h770F,
16h700C,
16h09A4,
16h7406,
16h6D69,
16h7265,
16h0040,
16h8FFB,
16h6600,
16h7C0C,
16h09BC,
16h6C04,
16h6465,
16h0040,
16h8FFD,
16h6600,
16h7C0C,
16h09CC,
16h6C04,
16h6465,
16h0021,
16h8FFD,
16h6600,
16h6023,
16h710F,
16h09DA,
16h6208,
16h7475,
16h6F74,
16h736E,
16h0040,
16h8FFC,
16h6600,
16h7C0C,
16h09EA,
16h7305,
16h6170,
16h6563,
16h435C,
16h04C7,
16h09FC,
16h7306,
16h6170,
16h6563,
16h0073,
16h8000,
16h6B13,
16h6147,
16h050D,
16h4501,
16h6B81,
16h2513,
16h6B8D,
16h6A00,
16h6147,
16h050C,
16h6B8D,
16h710F,
16h0A08,
16h7404,
16h7079,
16h0065,
16h6147,
16h051D,
16h438C,
16h44C7,
16h6B81,
16h2523,
16h6B8D,
16h6A00,
16h6147,
16h051B,
16h6B8D,
16h6103,
16h710F,
16h0A2C,
16h6302,
16h0072,
16h800D,
16h44C7,
16h800A,
16h04C7,
16h0A4E,
16h6443,
16h246F,
16h6B8D,
16h6B81,
16h6B8D,
16h438C,
16h6203,
16h439B,
16h6147,
16h6180,
16h6147,
16h700C,
16h0A5C,
16h2443,
16h7C22,
16h4530,
16h700C,
16h0A76,
16h2E02,
16h0024,
16h438C,
16h0519,
16h0A80,
16h2E43,
16h7C22,
16h4530,
16h0542,
16h0A8A,
16h2E02,
16h0072,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h4508,
16h0519,
16h0A94,
16h7503,
16h722E,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h4508,
16h0519,
16h0AA8,
16h7502,
16h002E,
16h43F4,
16h440D,
16h441E,
16h4501,
16h0519,
16h0AC0,
16h2E01,
16hFE80,
16h6C00,
16h800A,
16h6503,
16h256F,
16h0562,
16h4427,
16h4501,
16h0519,
16h0AD0,
16h2E02,
16h0023,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h4569,
16hFE80,
16h6023,
16h710F,
16h0AE6,
16h7503,
16h232E,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h43F4,
16h440D,
16h441E,
16h4501,
16h4519,
16hFE80,
16h6023,
16h710F,
16h0AFC,
16h7504,
16h722E,
16h0023,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h4508,
16h4519,
16hFE80,
16h6023,
16h710F,
16h0B1A,
16h2E03,
16h2372,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h4508,
16h4519,
16hFE80,
16h6023,
16h710F,
16h0B44,
16h6305,
16h6F6D,
16h6576,
16h6147,
16h05C1,
16h6147,
16h6081,
16h417E,
16h6B81,
16h418D,
16h6310,
16h6B8D,
16h6310,
16h6B81,
16h25C7,
16h6B8D,
16h6A00,
16h6147,
16h05B9,
16h6B8D,
16h6103,
16h0273,
16h0B68,
16h7005,
16h6361,
16h246B,
16h6081,
16h6147,
16h4279,
16h6023,
16h6103,
16h6310,
16h6180,
16h45B7,
16h6B8D,
16h700C,
16h0B96,
16h3F01,
16h6C00,
16h0569,
16h0BB2,
16h3205,
16h766F,
16h7265,
16h6147,
16h6147,
16h4279,
16h6B8D,
16h6B8D,
16h426B,
16h6147,
16h426B,
16h6B8D,
16h700C,
16h0BBA,
16h3205,
16h7773,
16h7061,
16h426B,
16h6147,
16h426B,
16h6B8D,
16h700C,
16h0BD6,
16h3204,
16h696E,
16h0070,
16h426B,
16h6103,
16h426B,
16h710F,
16h0BE8,
16h3204,
16h6F72,
16h0074,
16h6180,
16h6147,
16h6147,
16h45EE,
16h6B8D,
16h6B8D,
16h6180,
16h05EE,
16h0BF8,
16h6402,
16h003D,
16h6147,
16h426B,
16h6503,
16h6180,
16h6B8D,
16h6503,
16h6403,
16h701C,
16h0C10,
16h6403,
16h3E3C,
16h460A,
16h760C,
16h0C26,
16h6402,
16h002B,
16h426B,
16h6203,
16h6147,
16h6181,
16h6203,
16h6081,
16h426B,
16h6F03,
16h2626,
16h6B8D,
16h6310,
16h0627,
16h6B8D,
16h700C,
16h0C30,
16h6402,
16h002D,
16h4286,
16h061A,
16h0C52,
16h7303,
16h643E,
16h6081,
16h781C,
16h0C5C,
16h6403,
16h2B31,
16h8001,
16h4630,
16h061A,
16h0C66,
16h6404,
16h6F78,
16h0072,
16h426B,
16h6503,
16h4155,
16h6503,
16h718C,
16h0C72,
16h6404,
16h6E61,
16h0064,
16h426B,
16h6303,
16h4155,
16h6303,
16h718C,
16h0C84,
16h6403,
16h726F,
16h426B,
16h6403,
16h4155,
16h6403,
16h718C,
16h0C96,
16h6407,
16h6E69,
16h6576,
16h7472,
16h6600,
16h6180,
16h6600,
16h718C,
16h0CA6,
16h6402,
16h003C,
16h426B,
16h4279,
16h6703,
16h2665,
16h4273,
16h6F03,
16h0667,
16h45F7,
16h761F,
16h0CB8,
16h6402,
16h003E,
16h45EE,
16h065E,
16h0CD0,
16h6403,
16h3D30,
16h6403,
16h701C,
16h0CDA,
16h6403,
16h3C30,
16h8000,
16h4630,
16h065E,
16h0CE4,
16h6404,
16h3C30,
16h003E,
16h466F,
16h760C,
16h0CF0,
16h6403,
16h2A32,
16h4279,
16h061A,
16h0CFC,
16h6403,
16h2F32,
16h6081,
16h800F,
16h6D03,
16h6147,
16h415D,
16h6180,
16h415D,
16h6B8D,
16h6403,
16h718C,
16h0D06,
16h6403,
16h2D31,
16h8001,
16h4630,
16h4286,
16h061A,
16h0D20,
16h2807,
16h6170,
16h7372,
16h2965,
16hFE82,
16h6023,
16h6103,
16h6181,
16h6147,
16h6081,
16h26E6,
16h6A00,
16hFE82,
16h6C00,
16h435C,
16h6703,
16h26C2,
16h6147,
16h438C,
16hFE82,
16h6C00,
16h6180,
16h428F,
16h6810,
16h6600,
16h6B81,
16h6910,
16h6303,
16h26C0,
16h6B81,
16h26BA,
16h6B8D,
16h6A00,
16h6147,
16h06A9,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h8000,
16h708D,
16h6A00,
16h6B8D,
16h6181,
16h6180,
16h6147,
16h438C,
16hFE82,
16h6C00,
16h6180,
16h428F,
16hFE82,
16h6C00,
16h435C,
16h6703,
16h26D0,
16h6810,
16h26DC,
16h6B81,
16h26D7,
16h6B8D,
16h6A00,
16h6147,
16h06C5,
16h6B8D,
16h6103,
16h6081,
16h6147,
16h06E1,
16h6B8D,
16h6103,
16h6081,
16h6147,
16h6A00,
16h6181,
16h428F,
16h6B8D,
16h6B8D,
16h028F,
16h6181,
16h6B8D,
16h028F,
16h0D2E,
16h7005,
16h7261,
16h6573,
16h6147,
16hFE88,
16h6C00,
16hFE84,
16h6C00,
16h6203,
16hFE86,
16h6C00,
16hFE84,
16h6C00,
16h428F,
16h6B8D,
16h469B,
16hFE84,
16h0370,
16h0DD4,
16h2E82,
16h0028,
16h8029,
16h46ED,
16h0519,
16h0DFA,
16h2881,
16h8029,
16h46ED,
16h0273,
16h0E06,
16h3C83,
16h3E5C,
16hFE86,
16h6C00,
16hFE84,
16h6023,
16h710F,
16h0E10,
16h5C81,
16hFEB6,
16h03BC,
16h0E20,
16h7704,
16h726F,
16h0064,
16h46ED,
16h4394,
16h434B,
16h05CE,
16h0E28,
16h7405,
16h6B6F,
16h6E65,
16h435C,
16h0717,
16h0E38,
16h6E05,
16h6D61,
16h3E65,
16h438C,
16h801F,
16h6303,
16h6203,
16h039B,
16h0E44,
16h7305,
16h6D61,
16h3F65,
16h6A00,
16h6147,
16h073E,
16h6181,
16h6B81,
16h6203,
16h417E,
16h6181,
16h6B81,
16h6203,
16h417E,
16h428F,
16h4264,
16h273E,
16h6B8D,
16h710F,
16h6B81,
16h2744,
16h6B8D,
16h6A00,
16h6147,
16h0731,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h0E56,
16h6604,
16h6E69,
16h0064,
16h6180,
16h6081,
16h417E,
16hFE82,
16h6023,
16h6103,
16h6081,
16h6C00,
16h6147,
16h434B,
16h6180,
16h6C00,
16h6081,
16h276A,
16h6081,
16h6C00,
16hFF1F,
16h6303,
16h6B81,
16h6503,
16h2765,
16h434B,
16h8000,
16h6600,
16h0769,
16h434B,
16hFE82,
16h6C00,
16h472E,
16h076F,
16h6B8D,
16h6103,
16h6180,
16h4351,
16h718C,
16h2774,
16h8002,
16h4357,
16h428F,
16h0757,
16h6B8D,
16h6103,
16h6003,
16h4351,
16h6081,
16h4725,
16h718C,
16h0E92,
16h3C07,
16h616E,
16h656D,
16h3E3F,
16hFE90,
16h6081,
16h4383,
16h6503,
16h2786,
16h4351,
16h6147,
16h6B8D,
16h434B,
16h6081,
16h6147,
16h6C00,
16h4264,
16h2793,
16h474C,
16h4264,
16h2787,
16h6B8D,
16h710F,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h0EF8,
16h6E05,
16h6D61,
16h3F65,
16hFEB8,
16h03BC,
16h0F30,
16h5E02,
16h0068,
16h6147,
16h6181,
16h6B81,
16h6803,
16h6081,
16h27AB,
16h8008,
16h6081,
16h44C7,
16h4501,
16h44C7,
16h6B8D,
16h720F,
16h0F3C,
16h7403,
16h7061,
16h6081,
16h44C7,
16h6181,
16h418D,
16h731C,
16h0F5C,
16h6B04,
16h6174,
16h0070,
16h6081,
16h800D,
16h6503,
16h27C3,
16h8008,
16h6503,
16h27C2,
16h435C,
16h07B0,
16h07A0,
16h6103,
16h6003,
16h708D,
16h0F6C,
16h6106,
16h6363,
16h7065,
16h0074,
16h6181,
16h6203,
16h6181,
16h4279,
16h6503,
16h27DC,
16h44CC,
16h6081,
16h435C,
16h428F,
16h807F,
16h6F03,
16h27DA,
16h47B0,
16h07DB,
16h47B9,
16h07CE,
16h6103,
16h6181,
16h028F,
16h0F8E,
16h7105,
16h6575,
16h7972,
16hFE88,
16h6C00,
16h8050,
16h47CB,
16hFE86,
16h6023,
16h6103,
16h6103,
16h8000,
16hFE84,
16h6023,
16h710F,
16h0FC0,
16h6106,
16h6F62,
16h7472,
16h0032,
16h4530,
16h710F,
16h0FE0,
16h6106,
16h6F62,
16h7472,
16h0031,
16h4501,
16h4542,
16h803F,
16h44C7,
16h4529,
16hFE8C,
16h43BC,
16h07F4,
16h0FEE,
16h3C49,
16h613F,
16h6F62,
16h7472,
16h3E22,
16h280C,
16h4530,
16h07FB,
16h07F4,
16h1008,
16h6606,
16h726F,
16h6567,
16h0074,
16h471F,
16h479B,
16h4264,
16h2824,
16h4351,
16h6081,
16hFEAC,
16h6023,
16h6103,
16h6C00,
16h6081,
16hFE90,
16h6023,
16h6103,
16hFEAE,
16h6023,
16h6103,
16h710F,
16h07FB,
16h101C,
16h240A,
16h6E69,
16h6574,
16h7072,
16h6572,
16h0074,
16h479B,
16h4264,
16h283C,
16h6C00,
16h8040,
16h6303,
16h4809,
16h630C,
16h6D6F,
16h6970,
16h656C,
16h6F2D,
16h6C6E,
16h0079,
16h0172,
16h0840,
16h445F,
16h283F,
16h700C,
16h07FB,
16h104C,
16h5B81,
16h9058,
16hFE8A,
16h6023,
16h710F,
16h1082,
16h2E03,
16h6B6F,
16h9058,
16hFE8A,
16h6C00,
16h6703,
16h2851,
16h4547,
16h2003,
16h6B6F,
16h0529,
16h108E,
16h6504,
16h6176,
16h006C,
16h471F,
16h6081,
16h417E,
16h285D,
16hFE8A,
16h43BC,
16h0856,
16h6103,
16h0849,
16h10A6,
16h2445,
16h7665,
16h6C61,
16hFE84,
16h6C00,
16h6147,
16hFE86,
16h6C00,
16h6147,
16hFE88,
16h6C00,
16h6147,
16hFE84,
16h8000,
16h6180,
16h6023,
16h6103,
16hFE86,
16h6023,
16h6103,
16hFE88,
16h6023,
16h6103,
16h4856,
16h6B8D,
16hFE88,
16h6023,
16h6103,
16h6B8D,
16hFE86,
16h6023,
16h6103,
16h6B8D,
16hFE84,
16h6023,
16h710F,
16h10C0,
16h7006,
16h6572,
16h6573,
16h0074,
16hFF00,
16hFE86,
16h434B,
16h6023,
16h710F,
16h110A,
16h7104,
16h6975,
16h0074,
16h4842,
16h47E3,
16h4856,
16h0893,
16h700C,
16h111E,
16h6105,
16h6F62,
16h7472,
16h6103,
16h4889,
16h4849,
16h0892,
16h1130,
16h2701,
16h471F,
16h479B,
16h28A5,
16h700C,
16h07FB,
16h1140,
16h6105,
16h6C6C,
16h746F,
16h439B,
16hFEAC,
16h0370,
16h114E,
16h2C01,
16h4394,
16h6081,
16h434B,
16hFEAC,
16h6023,
16h6103,
16h6023,
16h710F,
16h115C,
16h6345,
16h6C61,
16h2C6C,
16h8001,
16h6903,
16hC000,
16h6403,
16h08AF,
16h1170,
16h3F47,
16h7262,
16h6E61,
16h6863,
16h8001,
16h6903,
16hA000,
16h6403,
16h08AF,
16h1182,
16h6246,
16h6172,
16h636E,
16h0068,
16h8001,
16h6903,
16h8000,
16h6403,
16h08AF,
16h1196,
16h5B89,
16h6F63,
16h706D,
16h6C69,
16h5D65,
16h48A1,
16h08BB,
16h11AA,
16h6347,
16h6D6F,
16h6970,
16h656C,
16h6B8D,
16h6081,
16h6C00,
16h48AF,
16h434B,
16h6147,
16h700C,
16h11BA,
16h7287,
16h6365,
16h7275,
16h6573,
16hFEAE,
16h6C00,
16h4725,
16h08BB,
16h11D2,
16h7004,
16h6369,
16h006B,
16h6081,
16h6410,
16h6410,
16h80C0,
16h6203,
16h6147,
16h700C,
16h11E4,
16h6C87,
16h7469,
16h7265,
16h6C61,
16h6081,
16hFFFF,
16h6600,
16h6303,
16h290D,
16h8000,
16h6600,
16h6503,
16h4901,
16h48E1,
16h6600,
16h0911,
16hFFFF,
16h6600,
16h6403,
16h08AF,
16h700C,
16h11FA,
16h5B83,
16h5D27,
16h48A1,
16h0901,
16h1226,
16h2403,
16h222C,
16h8022,
16h46ED,
16h4394,
16h45CE,
16h438C,
16h6203,
16h439B,
16hFEAC,
16h6023,
16h710F,
16h1230,
16h66C3,
16h726F,
16h48E1,
16h4112,
16h0394,
16h124A,
16h62C5,
16h6765,
16h6E69,
16h0394,
16h1256,
16h2846,
16h656E,
16h7478,
16h0029,
16h6B8D,
16h6B8D,
16h4264,
16h293D,
16h6A00,
16h6147,
16h6C00,
16h6147,
16h700C,
16h434B,
16h6147,
16h700C,
16h1260,
16h6EC4,
16h7865,
16h0074,
16h48E1,
16h4934,
16h08AF,
16h1282,
16h2844,
16h6F64,
16h0029,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h426B,
16h6147,
16h6147,
16h434B,
16h6147,
16h700C,
16h1290,
16h64C2,
16h006F,
16h48E1,
16h494B,
16h8000,
16h48AF,
16h0394,
16h12AC,
16h2847,
16h656C,
16h7661,
16h2965,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6B8D,
16h710F,
16h12BC,
16h6CC5,
16h6165,
16h6576,
16h48E1,
16h4962,
16h700C,
16h12D2,
16h2846,
16h6F6C,
16h706F,
16h0029,
16h6B8D,
16h6B8D,
16h6310,
16h6B8D,
16h4279,
16h6213,
16h2980,
16h6147,
16h6147,
16h6C00,
16h6147,
16h700C,
16h6147,
16h6A00,
16h6147,
16h434B,
16h6147,
16h700C,
16h12E0,
16h2848,
16h6E75,
16h6F6C,
16h706F,
16h0029,
16h6B8D,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6147,
16h700C,
16h130E,
16h75C6,
16h6C6E,
16h6F6F,
16h0070,
16h48E1,
16h498C,
16h700C,
16h132C,
16h2845,
16h643F,
16h296F,
16h4279,
16h6213,
16h29AE,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h426B,
16h6147,
16h6147,
16h434B,
16h6147,
16h700C,
16h0273,
16h700C,
16h133C,
16h3FC3,
16h6F64,
16h48E1,
16h49A1,
16h8000,
16h48AF,
16h0394,
16h1362,
16h6CC4,
16h6F6F,
16h0070,
16h48E1,
16h4974,
16h6081,
16h48AF,
16h48E1,
16h498C,
16h4351,
16h4394,
16h8001,
16h6903,
16h6180,
16h6023,
16h710F,
16h1372,
16h2847,
16h6C2B,
16h6F6F,
16h2970,
16h6B8D,
16h6180,
16h6B8D,
16h6B8D,
16h4279,
16h428F,
16h6147,
16h8002,
16h48F5,
16h6B81,
16h6203,
16h6B81,
16h6503,
16h6810,
16h6010,
16h8003,
16h48F5,
16h6B8D,
16h6503,
16h6810,
16h6010,
16h6403,
16h29EB,
16h6147,
16h6203,
16h6147,
16h6C00,
16h6147,
16h700C,
16h6147,
16h6147,
16h6103,
16h434B,
16h6147,
16h700C,
16h1394,
16h2BC5,
16h6F6C,
16h706F,
16h48E1,
16h49CE,
16h6081,
16h48AF,
16h48E1,
16h498C,
16h4351,
16h4394,
16h8001,
16h6903,
16h6180,
16h6023,
16h710F,
16h13E4,
16h2843,
16h2969,
16h6B8D,
16h6B8D,
16h414F,
16h6147,
16h6147,
16h700C,
16h1406,
16h69C1,
16h48E1,
16h4A05,
16h700C,
16h1418,
16h75C5,
16h746E,
16h6C69,
16h08C5,
16h1422,
16h61C5,
16h6167,
16h6E69,
16h08CF,
16h142C,
16h69C2,
16h0066,
16h4394,
16h8000,
16h08C5,
16h1436,
16h74C4,
16h6568,
16h006E,
16h4394,
16h8001,
16h6903,
16h6181,
16h6C00,
16h6403,
16h6180,
16h6023,
16h710F,
16h1442,
16h72C6,
16h7065,
16h6165,
16h0074,
16h48CF,
16h0A24,
16h145C,
16h73C4,
16h696B,
16h0070,
16h4394,
16h8000,
16h08CF,
16h146A,
16h61C3,
16h7466,
16h6103,
16h4A38,
16h492E,
16h718C,
16h1478,
16h65C4,
16h736C,
16h0065,
16h4A38,
16h6180,
16h0A24,
16h1486,
16h77C5,
16h6968,
16h656C,
16h4A1D,
16h718C,
16h1494,
16h2846,
16h6163,
16h6573,
16h0029,
16h6B8D,
16h6180,
16h6147,
16h6147,
16h700C,
16h14A0,
16h63C4,
16h7361,
16h0065,
16h48E1,
16h4A54,
16h8030,
16h700C,
16h14B4,
16h2844,
16h666F,
16h0029,
16h6B8D,
16h6B81,
16h6180,
16h6147,
16h770F,
16h14C4,
16h6FC2,
16h0066,
16h48E1,
16h4A65,
16h0A1D,
16h14D6,
16h65C5,
16h646E,
16h666F,
16h4A46,
16h8031,
16h700C,
16h14E2,
16h2809,
16h6E65,
16h6364,
16h7361,
16h2965,
16h6B8D,
16h6B8D,
16h6103,
16h6147,
16h700C,
16h14F0,
16h65C7,
16h646E,
16h6163,
16h6573,
16h6081,
16h8031,
16h6703,
16h2A8E,
16h6103,
16h4A24,
16h0A87,
16h8030,
16h6213,
16h4809,
16h6213,
16h6461,
16h6320,
16h7361,
16h2065,
16h6F63,
16h736E,
16h7274,
16h6375,
16h2E74,
16h48E1,
16h4A7D,
16h700C,
16h1506,
16h24C2,
16h0022,
16h48E1,
16h453D,
16h091A,
16h153E,
16h2EC2,
16h0022,
16h48E1,
16h4547,
16h091A,
16h154A,
16h3E05,
16h6F62,
16h7964,
16h034B,
16h1556,
16h2844,
16h6F74,
16h0029,
16h6B8D,
16h6081,
16h434B,
16h6147,
16h6C00,
16h6023,
16h710F,
16h1560,
16h74C2,
16h006F,
16h48E1,
16h4AB3,
16h48A1,
16h4AAE,
16h08AF,
16h1576,
16h2845,
16h742B,
16h296F,
16h6B8D,
16h6081,
16h434B,
16h6147,
16h6C00,
16h0370,
16h1586,
16h2BC3,
16h6F74,
16h48E1,
16h4AC6,
16h48A1,
16h4AAE,
16h08AF,
16h159A,
16h670B,
16h7465,
16h632D,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h7C0C,
16h15AA,
16h730B,
16h7465,
16h632D,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h6023,
16h710F,
16h15BC,
16h640B,
16h6665,
16h6E69,
16h7469,
16h6F69,
16h736E,
16hFE90,
16h6C00,
16h0AE4,
16h15D0,
16h3F07,
16h6E75,
16h7169,
16h6575,
16h6081,
16h4ADB,
16h474C,
16h2B01,
16h4547,
16h2007,
16h6572,
16h6564,
16h2066,
16h6181,
16h4542,
16h710F,
16h15E4,
16h3C05,
16h2C24,
16h3E6E,
16h6081,
16h417E,
16h2B1B,
16h4AF6,
16h6081,
16h438C,
16h6203,
16h439B,
16hFEAC,
16h6023,
16h6103,
16h6081,
16hFEAE,
16h6023,
16h6103,
16h4351,
16h4ADB,
16h6C00,
16h6180,
16h6023,
16h710F,
16h6103,
16h453D,
16h6E04,
16h6D61,
16h0065,
16h07FB,
16h1606,
16h2403,
16h6E2C,
16hFEBA,
16h03BC,
16h1644,
16h2408,
16h6F63,
16h706D,
16h6C69,
16h0065,
16h479B,
16h4264,
16h2B36,
16h6C00,
16h8080,
16h6303,
16h2B35,
16h0172,
16h0B36,
16h08BB,
16h445F,
16h2B39,
16h0901,
16h07FB,
16h164E,
16h6186,
16h6F62,
16h7472,
16h0022,
16h48E1,
16h4809,
16h091A,
16h1676,
16h3C07,
16h766F,
16h7265,
16h3E74,
16hFEAE,
16h6C00,
16h4ADB,
16h6023,
16h710F,
16h1686,
16h6F05,
16h6576,
16h7472,
16hFEBC,
16h03BC,
16h169A,
16h6504,
16h6978,
16h0074,
16h6B8D,
16h710F,
16h16A6,
16h3CC3,
16h3E3B,
16h48E1,
16h4B56,
16h4842,
16h4B50,
16h8000,
16h4394,
16h6023,
16h710F,
16h16B2,
16h3BC1,
16hFEBE,
16h03BC,
16h16C8,
16h5D01,
16h9658,
16hFE8A,
16h6023,
16h710F,
16h16D0,
16h3A01,
16h471F,
16h4B24,
16h0B69,
16h16DC,
16h6909,
16h6D6D,
16h6465,
16h6169,
16h6574,
16h8080,
16hFEAE,
16h6C00,
16h6C00,
16h6403,
16hFEAE,
16h6C00,
16h6023,
16h710F,
16h16E6,
16h7504,
16h6573,
16h0072,
16h471F,
16h4B24,
16h4B50,
16h48E1,
16h41D2,
16h08AF,
16h1704,
16h3C08,
16h7263,
16h6165,
16h6574,
16h003E,
16h471F,
16h4B24,
16h4B50,
16h838C,
16h08BB,
16h1718,
16h6306,
16h6572,
16h7461,
16h0065,
16hFEC0,
16h03BC,
16h172E,
16h7608,
16h7261,
16h6169,
16h6C62,
16h0065,
16h4B9B,
16h8000,
16h08AF,
16h173C,
16h3209,
16h6176,
16h6972,
16h6261,
16h656C,
16h4B9B,
16h8000,
16h48AF,
16h8001,
16h4357,
16h08AA,
16h174E,
16h2847,
16h6F64,
16h7365,
16h293E,
16h6B8D,
16h8001,
16h6903,
16h4394,
16h8001,
16h6903,
16hFEAE,
16h6C00,
16h4725,
16h6081,
16h434B,
16hFFFF,
16h6600,
16h6403,
16h48AF,
16h6023,
16h6103,
16h08AF,
16h1766,
16h630C,
16h6D6F,
16h6970,
16h656C,
16h6F2D,
16h6C6E,
16h0079,
16h8040,
16hFEAE,
16h6C00,
16h6C00,
16h6403,
16hFEAE,
16h6C00,
16h6023,
16h710F,
16h1794,
16h6485,
16h656F,
16h3E73,
16h48E1,
16h4BB7,
16h700C,
16h17B6,
16h6304,
16h6168,
16h0072,
16h435C,
16h4717,
16h6310,
16h017E,
16h17C4,
16h5B86,
16h6863,
16h7261,
16h005D,
16h4BE5,
16h0901,
16h17D4,
16h6308,
16h6E6F,
16h7473,
16h6E61,
16h0074,
16h4B9B,
16h48AF,
16h4BB7,
16h7C0C,
16h17E2,
16h6405,
16h6665,
16h7265,
16h4B9B,
16h8000,
16h48AF,
16h4BB7,
16h6C00,
16h4264,
16h8000,
16h6703,
16h4809,
16h750D,
16h696E,
16h696E,
16h6974,
16h6C61,
16h7A69,
16h6465,
16h0172,
16h17F6,
16h6982,
16h0073,
16h48A1,
16h4AAE,
16h6023,
16h710F,
16h1820,
16h2E03,
16h6469,
16h4264,
16h2C1F,
16h438C,
16h801F,
16h6303,
16h0519,
16h4529,
16h4547,
16h7B08,
16h6F6E,
16h616E,
16h656D,
16h007D,
16h700C,
16h182E,
16h7708,
16h726F,
16h6C64,
16h7369,
16h0074,
16h43AA,
16h4394,
16h8000,
16h48AF,
16h6081,
16hFEA8,
16h434B,
16h6081,
16h6C00,
16h48AF,
16h6023,
16h6103,
16h8000,
16h08AF,
16h1850,
16h6F06,
16h6472,
16h7265,
16h0040,
16h6081,
16h6C00,
16h6081,
16h2C4A,
16h6147,
16h434B,
16h4C40,
16h6B8D,
16h6180,
16h731C,
16h700F,
16h1878,
16h6709,
16h7465,
16h6F2D,
16h6472,
16h7265,
16hFE90,
16h0C40,
16h1898,
16h3E04,
16h6977,
16h0064,
16h034B,
16h18A8,
16h2E04,
16h6977,
16h0064,
16h4501,
16h6081,
16h4C57,
16h434B,
16h6C00,
16h4264,
16h2C65,
16h4C19,
16h710F,
16h8000,
16h0556,
16h18B2,
16h2104,
16h6977,
16h0064,
16h4C57,
16h434B,
16hFEAE,
16h6C00,
16h6180,
16h6023,
16h710F,
16h18D0,
16h7604,
16h636F,
16h0073,
16h4529,
16h4547,
16h7605,
16h636F,
16h3A73,
16hFEA8,
16h434B,
16h6C00,
16h4264,
16h2C84,
16h6081,
16h4C5C,
16h4C57,
16h0C7D,
16h700C,
16h18E6,
16h6F05,
16h6472,
16h7265,
16h4529,
16h4547,
16h7307,
16h6165,
16h6372,
16h3A68,
16h4C51,
16h4264,
16h2C96,
16h6180,
16h4C5C,
16h6A00,
16h0C90,
16h4529,
16h4547,
16h6407,
16h6665,
16h6E69,
16h3A65,
16h4ADB,
16h0C5C,
16h190C,
16h7309,
16h7465,
16h6F2D,
16h6472,
16h7265,
16h6081,
16h8000,
16h6600,
16h6703,
16h2CAC,
16h6103,
16hFEA2,
16h8001,
16h8008,
16h6181,
16h6F03,
16h4809,
16h6F12,
16h6576,
16h2072,
16h6973,
16h657A,
16h6F20,
16h2066,
16h7623,
16h636F,
16h0073,
16hFE90,
16h6180,
16h6081,
16h2CC7,
16h6147,
16h6180,
16h6181,
16h6023,
16h6103,
16h434B,
16h6B8D,
16h6A00,
16h0CBC,
16h6180,
16h6023,
16h710F,
16h193E,
16h6F04,
16h6C6E,
16h0079,
16h8000,
16h6600,
16h0CA4,
16h1996,
16h6104,
16h736C,
16h006F,
16h4C51,
16h6181,
16h6180,
16h6310,
16h0CA4,
16h19A4,
16h7008,
16h6572,
16h6976,
16h756F,
16h0073,
16h4C51,
16h6180,
16h6103,
16h6A00,
16h0CA4,
16h19B6,
16h3E04,
16h6F76,
16h0063,
16h4B9B,
16h6081,
16h48AF,
16h4C6B,
16h4BB7,
16h6C00,
16h6147,
16h4C51,
16h6180,
16h6103,
16h6B8D,
16h6180,
16h0CA4,
16h19CC,
16h7705,
16h6469,
16h666F,
16h48A1,
16h4AAE,
16h7C0C,
16h19EE,
16h760A,
16h636F,
16h6261,
16h6C75,
16h7261,
16h0079,
16h4C2D,
16h0CE9,
16h19FC,
16h5F05,
16h7974,
16h6570,
16h6147,
16h0D0F,
16h438C,
16h4362,
16h44C7,
16h6B81,
16h2D15,
16h6B8D,
16h6A00,
16h6147,
16h0D0C,
16h6B8D,
16h6103,
16h710F,
16h1A0E,
16h6403,
16h2B6D,
16h6181,
16h8004,
16h4556,
16h4501,
16h6147,
16h0D24,
16h438C,
16h8003,
16h4556,
16h6B81,
16h2D2A,
16h6B8D,
16h6A00,
16h6147,
16h0D21,
16h6B8D,
16h710F,
16h1A32,
16h6404,
16h6D75,
16h0070,
16hFE80,
16h6C00,
16h6147,
16h4432,
16h8010,
16h4305,
16h6147,
16h4529,
16h8010,
16h4279,
16h4D1B,
16h4155,
16h8002,
16h4508,
16h4D0A,
16h6B81,
16h2D45,
16h6B8D,
16h6A00,
16h6147,
16h0D37,
16h6B8D,
16h6103,
16h6103,
16h6B8D,
16hFE80,
16h6023,
16h710F,
16h1A5A,
16h2E02,
16h0073,
16h4529,
16h416A,
16h6A00,
16h800F,
16h6303,
16h6147,
16h6B81,
16h48F5,
16h4569,
16h6B81,
16h2D5E,
16h6B8D,
16h6A00,
16h6147,
16h0D55,
16h6B8D,
16h6103,
16h4547,
16h3C04,
16h6F74,
16h0073,
16h700C,
16h1A9A,
16h2807,
16h6E3E,
16h6D61,
16h2965,
16h6C00,
16h4264,
16h2D74,
16h4279,
16h4725,
16h6503,
16h2D73,
16h4351,
16h0D6A,
16h700F,
16h6103,
16h8000,
16h700C,
16h1ACC,
16h3E05,
16h616E,
16h656D,
16h6147,
16h4C51,
16h4264,
16h2D97,
16h6180,
16h6B81,
16h6180,
16h4D6A,
16h4264,
16h2D95,
16h6147,
16h6A00,
16h6147,
16h0D8A,
16h6103,
16h6B81,
16h2D90,
16h6B8D,
16h6A00,
16h6147,
16h0D89,
16h6B8D,
16h6103,
16h6B8D,
16h6B8D,
16h710F,
16h6A00,
16h0D7D,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h1AF0,
16h7303,
16h6565,
16h48A1,
16h4529,
16h6081,
16h6C00,
16h4264,
16hF00C,
16h6503,
16h2DB7,
16hBFFF,
16h6303,
16h8001,
16h6D03,
16h4D7B,
16h4264,
16h2DB0,
16h4501,
16h4C19,
16h0DB5,
16h6081,
16h6C00,
16hFFFF,
16h6303,
16h4562,
16h434B,
16h0DA0,
16h0273,
16h1B38,
16h2807,
16h6F77,
16h6472,
16h2973,
16h4529,
16h6C00,
16h4264,
16h2DC6,
16h6081,
16h4C19,
16h4501,
16h4351,
16h0DBE,
16h700C,
16h1B72,
16h7705,
16h726F,
16h7364,
16h4C51,
16h4264,
16h2DD9,
16h6180,
16h4529,
16h4529,
16h4547,
16h3A01,
16h6081,
16h4C5C,
16h4529,
16h4DBD,
16h6A00,
16h0DCC,
16h700C,
16h1B90,
16h7603,
16h7265,
16h8001,
16h8100,
16h4329,
16h8006,
16h720F,
16h1BB6,
16h6802,
16h0069,
16h4529,
16h4547,
16h650C,
16h6F66,
16h7472,
16h2068,
16h316A,
16h202B,
16h0076,
16hFE80,
16h6C00,
16h4432,
16h4DDD,
16h43F4,
16h4406,
16h4406,
16h802E,
16h43FC,
16h4406,
16h441E,
16h4519,
16hFE80,
16h6023,
16h6103,
16h0529,
16h1BC6,
16h6304,
16h6C6F,
16h0064,
16h8002,
16hFE80,
16h8042,
16h45B7,
16h4889,
16hFEA2,
16h6081,
16hFE90,
16h6023,
16h6103,
16h6081,
16hFEA8,
16h4379,
16h4B50,
16hC000,
16h434B,
16h6081,
16h4351,
16h6C00,
16h4863,
16hFEB4,
16h43BC,
16h4892,
16h0E02

    };
    
    // CYCLE to control each stage
    // CYCLE allows 1 clock cycle for BRAM access and 3 clock cycles for SPRAM access
    // INIT to determine if copying rom to ram or executing
    // INIT 0 SPRAM, INIT 1 ROM to SPRAM, INIT 2 J1 CPU
    uint4 CYCLE = 0;
    uint2 INIT = 0;
    
    // Address for 0 to SPRAM, copying ROM, plus storage
    uint16 copyaddress = 0;
    uint16 bramREAD = 0;

    // UART input FIFO (32 character) as dualport bram (code from @sylefeb)
    dualport_bram uint8 uartInBuffer[512] = uninitialized;
    uint9 uartInBufferNext = 0;
    uint9 uartInBufferTop = 0;

    // UART output FIFO (32 character) as dualport bram (code from @sylefeb)
    dualport_bram uint8 uartOutBuffer[512] = uninitialized;
    uint9 uartOutBufferNext = 0;
    uint9 uartOutBufferTop = 0;
    uint9 newuartOutBufferTop = 0;
    
    // bram for dstack and rstack write enable, maintained low, pulsed high (code from @sylefeb)
    dstack.wenable         := 0;  
    rstack.wenable         := 0;

    // dual port bram for dtsack and strack
    uartInBuffer.wenable0  := 0;  // always read  on port 0
    uartInBuffer.wenable1  := 1;  // always write on port 1
    uartInBuffer.addr0     := uartInBufferNext; // FIFO reads on next
    uartInBuffer.addr1     := uartInBufferTop;  // FIFO writes on top
    
    uartOutBuffer.wenable0 := 0; // always read  on port 0
    uartOutBuffer.wenable1 := 1; // always write on port 1    
    uartOutBuffer.addr0    := uartOutBufferNext; // FIFO reads on next
    uartOutBuffer.addr1    := uartOutBufferTop;  // FIFO writes on top

    always {
        // READ from UART if character available and store
        if( uart_out_valid ) {
            // writes at uartInBufferTop (code from @sylefeb)
            uartInBuffer.wdata1  = uart_out_data;            
            uart_out_ready       = 1;
            uartInBufferTop      = uartInBufferTop + 1; 
        }
    }
    
    // INIT is 0 ZERO SPRAM
    while( INIT == 0 ) {
        switch(CYCLE) {
            case 0: {
                // Setup WRITE to SPRAM
                sram_address = copyaddress;
                sram_data_write = 0;
                sram_readwrite = 1;
            }
            case 3: {
                sram_readwrite = 0;
                copyaddress = copyaddress + 1;
            }
            case 15: {
                if( copyaddress == 32768 ) {
                    INIT = 1;
                    copyaddress = 0;
                }
            }
        }
        CYCLE = CYCLE + 1;
    }
    
    // INIT is 1 COPY ROM TO SPRAM
    while( INIT == 1) {
        switch(CYCLE) {
            case 0: {
                // Setup READ from ROM
                rom.addr = copyaddress;
                rom.wenable = 0;
            }
            case 1: {
                // READ from ROM
                bramREAD = rom.rdata;
            }
            case 2: {
                // WRITE to SPRAM
                sram_address = copyaddress;
                sram_data_write = bramREAD;
                sram_readwrite = 1;
            }
            case 14: {
                copyaddress = copyaddress + 1;
                sram_readwrite = 0;
            }
            case 15: {
                if( copyaddress == 4096 ) {
                    INIT = 3;
                    copyaddress = 0;
                }
            }
            default: {
            }
        }
        CYCLE = CYCLE + 1;
    }

    // INIT is 3 EXECUTE J1 CPU
    while( INIT == 3 ) {
        // WRITE to UART if characters in buffer and UART is ready
        if( ~(uartOutBufferNext == uartOutBufferTop) & ~( uart_in_valid ) ) {
            // reads at uartOutBufferNext (code from @sylefeb)
            uart_in_data      = uartOutBuffer.rdata0; 
            uart_in_valid     = 1;
            uartOutBufferNext = uartOutBufferNext + 1;
        }
        uartOutBufferTop = newuartOutBufferTop;
        
        switch( CYCLE ) {
            // Read stackNext, rStackTop
            case 0: {
               // read dtsack and rstack brams (code from @sylefeb)
                stackNext = dstack.rdata;
                rStackTop = rstack.rdata;
            
                // start READ memoryInput = [stackTop] result ready in 2 cycles
                sram_address = stackTop >> 1;
                sram_readwrite = 0;
            }
            case 3: {
                // wait then read the data from SPRAM
                memoryInput = sram_data_read;
            }
            
            case 4: {
                // start READ instruction = [pc] result ready in 2 cycles
                sram_address = pc;
                sram_readwrite = 0;
            }

            case 7: {
                // wait then read the instruction from SPRAM
                instruction = sram_data_read;
            }

            // J1 CPU Instruction Execute
            case 8: {
                // +---------------------------------------------------------------+
                // | F | E | D | C | B | A | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
                // +---------------------------------------------------------------+
                // | 1 |                    LITERAL VALUE                          |
                // +---------------------------------------------------------------+
                // | 0 | 0 | 0 |            BRANCH TARGET ADDRESS                  |
                // +---------------------------------------------------------------+
                // | 0 | 0 | 1 |            CONDITIONAL BRANCH TARGET ADDRESS      |
                // +---------------------------------------------------------------+
                // | 0 | 1 | 0 |            CALL TARGET ADDRESS                    |
                // +---------------------------------------------------------------+
                // | 0 | 1 | 1 |R2P| ALU OPERATION |T2N|T2R|N2A|J1P| RSTACK| DSTACK|
                // +---------------------------------------------------------------+
                // | F | E | D | C | B | A | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
                // +---------------------------------------------------------------+
                // 
                // T   : Top of data stack
                // N   : Next on data stack
                // PC  : Program Counter
                // 
                // LITERAL VALUES : push a value onto the data stack
                // CONDITIONAL    : BRANCHS pop and test the T
                // CALLS          : PC+1 onto the return stack
                // 
                // T2N : Move T to N
                // T2R : Move T to top of return stack
                // N2A : STORE T to memory location addressed by N
                // R2P : Move top of return stack to PC
                // 
                // RSTACK and DSTACK are signed values (twos compliment) that are
                // the stack delta (the amount to increment or decrement the stack
                // by for their respective stacks: return and data)

                if(is_lit) {
                    // LITERAL Push value onto stack
                    newStackTop = immediate;
                    newPC = pcPlusOne;
                    newDSP = dsp + 1;
                    newRSP = rsp;
                } else {
                    switch( callbranch(instruction).is_callbranchalu ) { // BRANCH 0BRANCH CALL ALU
                        case 2b00: {
                            // BRANCH
                            newStackTop = stackTop;
                            newPC = callbranch(instruction).address;
                            newDSP = dsp;
                            newRSP = rsp;
                        }
                        case 2b01: {
                            // 0BRANCH
                            newStackTop = stackNext;
                            newPC = ( stackTop == 0 ) ? callbranch(instruction).address : pcPlusOne;
                            newDSP = dsp - 1;
                            newRSP = rsp;
                        }
                        case 2b10: {
                            // CALL
                            newStackTop = stackTop;
                            newPC = callbranch(instruction).address;
                            newDSP = dsp;
                            newRSP = rsp + 1;
                            rstackWData = pcPlusOne << 1;
                        }
                        case 2b11: {
                            // ALU
                            switch( aluop(instruction).is_j1j1plus ) {
                                case 1b0: {
                                    switch( aluop(instruction).operation ) {
                                        case 4b0000: {newStackTop = stackTop;}
                                        case 4b0001: {newStackTop = stackNext;}
                                        case 4b0010: {newStackTop = stackTop + stackNext;}
                                        case 4b0011: {newStackTop = stackTop & stackNext;}
                                        case 4b0100: {newStackTop = stackTop | stackNext;}
                                        case 4b0101: {newStackTop = stackTop ^ stackNext;}
                                        case 4b0110: {newStackTop = ~stackTop;}
                                        case 4b0111: {newStackTop = {16{(stackNext == stackTop)}};}
                                        case 4b1000: {newStackTop = {16{(__signed(stackNext) < __signed(stackTop))}};}
                                        case 4b1001: {newStackTop = stackNext >> nibbles(stackTop).nibble0;}
                                        case 4b1010: {newStackTop = stackTop - 1;}
                                        case 4b1011: {newStackTop = rStackTop;}
                                        case 4b1100: {
                                        // UART or memoryInput
                                            switch( stackTop ) {
                                                case 16hf000: {
                                                    // INPUT from UART reads at uartInBufferNext (code from @sylefeb)
                                                    newStackTop = { 8b0, uartInBuffer.rdata0 };
                                                    uartInBufferNext = uartInBufferNext + 1;
                                                } 
                                                case 16hf001: {
                                                    // UART status register { 14b0, tx full, rx available }
                                                    newStackTop = {14b0, uart_in_valid, ~(uartInBufferNext == uartInBufferTop)};
                                                }
                                                case 16hf002: {
                                                    // RGB LED status
                                                    newStackTop = rgbLED;
                                                }
                                                case 16hf003: {
                                                    // user buttons
                                                    newStackTop = {12b0, buttons};
                                                }
                                                case 16hf004: {
                                                    // 1hz timer
                                                    newStackTop = timer1hz;
                                                }
                                                default: {newStackTop = memoryInput;}
                                            }
                                        }
                                        case 4b1101: {newStackTop = stackNext << nibbles(stackTop).nibble0;}
                                        case 4b1110: {newStackTop = {rsp, dsp};}
                                        case 4b1111: {newStackTop = {16{(__unsigned(stackNext) < __unsigned(stackTop))}};}
                                    }
                                }
                                
                                case 1b1: {
                                    switch( aluop(instruction).operation ) {
                                        case 4b0000: {newStackTop = {16{(stackTop == 0)}};}
                                        case 4b0001: {newStackTop = ~{16{(stackTop == 0)}};}
                                        case 4b0010: {newStackTop = ~{16{(stackNext == stackTop)}};}
                                        case 4b0011: {newStackTop = stackTop + 1;}
                                        case 4b0100: {newStackTop = stackTop << 1;}
                                        case 4b0101: {newStackTop = stackTop >> 1;}
                                        case 4b0110: {newStackTop = {16{(__signed(stackNext) > __signed(stackTop))}};}
                                        case 4b0111: {newStackTop = {16{(__unsigned(stackNext) > __unsigned(stackTop))}};}
                                        case 4b1000: {newStackTop = {16{(__signed(stackTop) < __signed(0))}};}
                                        case 4b1001: {newStackTop = {16{(__signed(stackTop) > __signed(0))}};}
                                        case 4b1010: {newStackTop = ( __signed(stackTop) < __signed(0) ) ?  - stackTop : stackTop;}
                                        case 4b1011: {newStackTop = ( __signed(stackNext) > __signed(stackTop) ) ? stackNext : stackTop;}
                                        case 4b1100: {newStackTop = ( __signed(stackNext) < __signed(stackTop) ) ? stackNext : stackTop;}
                                        case 4b1101: {newStackTop = -stackTop;}
                                        case 4b1110: {newStackTop = stackNext - stackTop;}
                                        case 4b1111: {newStackTop = {16{(__signed(stackNext) >= __signed(stackTop))}};}
                                    }
                                }
                            } // ALU Operation
                            
                            // UPDATE newDSP newRSP
                            newDSP = dsp + ddelta;
                            newRSP = rsp + rdelta;
                            rstackWData = stackTop;

                            // Update PC for next instruction, return from call or next instruction
                            newPC = ( aluop(instruction).is_r2pc ) ? rStackTop >> 1 : pcPlusOne;

                            // n2memt mem[t] = n        
                            if( aluop(instruction).is_n2memt ) {
                                switch( stackTop ) {
                                    default: {
                                        // WRITE to SPRAM
                                        sram_address = stackTop >> 1;
                                        sram_data_write = stackNext;
                                        sram_readwrite = 1;
                                    }
                                    case 16hf000: {
                                        // OUTPUT to UART (dualport blockram code from @sylefeb)
                                        uartOutBuffer.wdata1 = bytes(stackNext).byte0;
                                        newuartOutBufferTop = uartOutBufferTop + 1;
                                    }
                                    case 16hf002: {
                                        // OUTPUT to rgbLED
                                        rgbLED = stackNext;
                                    }
                                }
                            }
                        } // ALU
                    }
                }
            } // J1 CPU Instruction Execute

            // update pc and perform mem[t] = n
            case 9: {
                // Write to dstack and rstack
                if( dstackWrite ) {
                    // bram code for dstack (code from @sylefeb)
                    dstack.wenable = 1;
                    dstack.addr    = newDSP;
                    dstack.wdata   = stackTop;
                }
                if( rstackWrite ) {
                    // bram code for rstack (code from @sylefeb)
                    rstack.wenable = 1;
                    rstack.addr    = newRSP;
                    rstack.wdata   = rstackWData;
                }
            }
            
            // Update dsp, rsp, pc, stackTop
            case 10: {
                dsp = newDSP;
                pc = newPC;
                stackTop = newStackTop;
                rsp = newRSP;
                
                // Setup addresses for dstack and rstack brams (code from @sylefeb)
                dstack.addr = newDSP;
                rstack.addr = newRSP;
            }
            
            // reset sram_readwrite
            case 12: {
                sram_readwrite = 0;
            }
            
            default: {}
        } // switch(CYCLE)
        
        // Reset UART
        if(uart_in_ready & uart_in_valid) {
            uart_in_valid = 0;
        }
    
        // Move to next CYCLE ( 0 to 12 , then back to 0 )
        CYCLE = ( CYCLE == 12 ) ? 0 : CYCLE + 1;
    } // (INIT==3 execute J1 CPU)

}

