// ----------------------- memory_ports.ice -----------
// @sylefeb - Silice standard library
// Memory port interfaces
// 2020-09-03

// single port BRAM

interface bram_port {
  output! addr,
  output! wenable,
  input   rdata,
  output! wdata,
}

// single port BROM

interface brom_port {
  output! addr,
  input   rdata,
}

// dual port BRAM

interface bram_port0 {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
}

interface bram_port1 {
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

interface bram_ports {
  output! addr0,
  output! wenable0,
  input   rdata0,
  output! wdata0,
  output! addr1,
  output! wenable1,
  input   rdata1,
  output! wdata1,
}

// ----------------------- end of memory_ports.ice ----

// VGA/HDMI Driver Includes
// SL 2019-10
// -------------------------

algorithm vga(
  output! uint1  vga_hs,
  output! uint1  vga_vs,
  output! uint1  active,
  output! uint1  vblank,
  output! uint10 vga_x,
  output! uint10 vga_y
) <autorun> {

  uint10 H_FRT_PORCH = 16;
  uint10 H_SYNCH     = 96;
  uint10 H_BCK_PORCH = 48;
  uint10 H_RES       = 640;

  uint10 V_FRT_PORCH = 10;
  uint10 V_SYNCH     = 2;
  uint10 V_BCK_PORCH = 33;
  uint10 V_RES       = 480;

  uint10 HS_START = 0;
  uint10 HS_END   = 0;
  uint10 HA_START = 0;
  uint10 H_END    = 0;

  uint10 VS_START = 0;
  uint10 VS_END   = 0;
  uint10 VA_START = 0;
  uint10 V_END    = 0;

  uint10 xcount = 0;
  uint10 ycount = 0;

  HS_START := H_FRT_PORCH;
  HS_END   := H_FRT_PORCH + H_SYNCH;
  HA_START := H_FRT_PORCH + H_SYNCH + H_BCK_PORCH;
  H_END    := H_FRT_PORCH + H_SYNCH + H_BCK_PORCH + H_RES;

  VS_START := V_FRT_PORCH;
  VS_END   := V_FRT_PORCH + V_SYNCH;
  VA_START := V_FRT_PORCH + V_SYNCH + V_BCK_PORCH;
  V_END    := V_FRT_PORCH + V_SYNCH + V_BCK_PORCH + V_RES;

  vga_hs := ~((xcount >= HS_START && xcount < HS_END));
  vga_vs := ~((ycount >= VS_START && ycount < VS_END));

  active := (xcount >= HA_START && xcount < H_END)
         && (ycount >= VA_START && ycount < V_END);
  vblank := (ycount < VA_START);

  xcount = 0;
  ycount = 0;

  while (1) {

      vga_x = (active) ? xcount - HA_START : 0;
      vga_y = (vblank) ? 0 : ycount - VA_START;

    if (xcount == H_END-1) {
      xcount = 0;
      if (ycount == V_END-1) {
        ycount = 0;
      } else {
        ycount = ycount + 1;
	  }
    } else {
      xcount = xcount + 1;
	}
  }

}

// -------------------------

// @sylefeb, 2020-10-08, simple UART in Silice

// UART config



// sender

// -> interface

group uart_out
{
  uint8 data_in = 0,
  uint1 data_in_ready = 0,
  uint1 busy = 0,
}

interface io_uart_out
{
  input  data_in,
  input  data_in_ready,
  output busy,
}

// -> algorithm

algorithm uart_sender(
  io_uart_out  io,
  output uint1 uart_tx
) <autorun> {
  
  uint10 interval      = 434;
  uint10 counter       = 0;

  uint11 transmit      = 0;

  always {    

    if (io.data_in_ready) {
      // start transmitting
      io.busy  = 1;
      transmit = {1b1,1b0,io.data_in,1b0};
    } else {
      if (transmit > 1) {
        // keep going
        if (counter == 0) {
          uart_tx  = transmit[0,1];
          transmit = {1b0,transmit[1,10]};
        }
      } else {
        // done
        uart_tx = 1;
        io.busy = 0;
      }
    }
    counter = (counter == interval) ? 0 : (counter + 1);

  }

  uart_tx = 1;

}

// receiver

// -> interface

group uart_in
{
  uint8 data_out = 0,
  uint1 data_out_ready = 0,
}

interface io_uart_in
{
  output data_out,
  output data_out_ready,
}

// -> algorithm

algorithm uart_receiver(
  io_uart_in  io,
  input uint1 uart_rx
) <autorun> {
  
  uint10 interval      = 434;
  uint10 half_interval = 217;
  uint10 counter       = 0;

  uint4  receiving     = 0;
  uint10 received      = 0;

  always {

    io.data_out_ready = 0; // maintain low

    if (receiving == 0) {
      if (uart_rx == 0) {
        // start receiving
        receiving = 10; // expecting 10 bits: start - 8 data - stop
        received  =  0;
        counter   = half_interval; // wait half-period
      }
    } else {
      if (counter == 0) { // right in the middle
        received  = {uart_rx,received[1,9]}; // read uart rx
        receiving = receiving - 1;
        counter   = interval;
        if (receiving == 0) {
          // done
          io.data_out       = received[1,8];
          io.data_out_ready = 1;
        }
      } else {
        counter   = counter - 1;
      }
    }

  }

} 


algorithm terminal(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint6 pix_red,
    output! uint6 pix_green,
    output! uint6 pix_blue,
    output! uint1   terminal_display,
    
    input   uint8   terminal_character,
    input   uint1   terminal_write,
    input   uint1   showterminal,
    input   uint1   showcursor,
    input   uint1   timer1hz,
    output uint3    terminal_active
) <autorun> {
    // Character ROM 8x8 x 256
    uint8 characterGenerator8x8[] = {
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h7e, 8h81, 8ha5, 8h81, 8hbd, 8h99, 8h81, 8h7e,
    8h7e, 8hff, 8hdb, 8hff, 8hc3, 8he7, 8hff, 8h7e,
    8h6c, 8hfe, 8hfe, 8hfe, 8h7c, 8h38, 8h10, 8h00,
    8h10, 8h38, 8h7c, 8hfe, 8h7c, 8h38, 8h10, 8h00,
    8h38, 8h7c, 8h38, 8hfe, 8hfe, 8h7c, 8h38, 8h7c,
    8h10, 8h10, 8h38, 8h7c, 8hfe, 8h7c, 8h38, 8h7c,
    8h00, 8h00, 8h18, 8h3c, 8h3c, 8h18, 8h00, 8h00,
    8hff, 8hff, 8he7, 8hc3, 8hc3, 8he7, 8hff, 8hff,
    8h00, 8h3c, 8h66, 8h42, 8h42, 8h66, 8h3c, 8h00,
    8hff, 8hc3, 8h99, 8hbd, 8hbd, 8h99, 8hc3, 8hff,
    8h0f, 8h07, 8h0f, 8h7d, 8hcc, 8hcc, 8hcc, 8h78,
    8h3c, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h7e, 8h18,
    8h3f, 8h33, 8h3f, 8h30, 8h30, 8h70, 8hf0, 8he0,
    8h7f, 8h63, 8h7f, 8h63, 8h63, 8h67, 8he6, 8hc0,
    8h99, 8h5a, 8h3c, 8he7, 8he7, 8h3c, 8h5a, 8h99,
    8h80, 8he0, 8hf8, 8hfe, 8hf8, 8he0, 8h80, 8h00,
    8h02, 8h0e, 8h3e, 8hfe, 8h3e, 8h0e, 8h02, 8h00,
    8h18, 8h3c, 8h7e, 8h18, 8h18, 8h7e, 8h3c, 8h18,
    8h66, 8h66, 8h66, 8h66, 8h66, 8h00, 8h66, 8h00,
    8h7f, 8hdb, 8hdb, 8h7b, 8h1b, 8h1b, 8h1b, 8h00,
    8h3e, 8h63, 8h38, 8h6c, 8h6c, 8h38, 8hcc, 8h78,
    8h00, 8h00, 8h00, 8h00, 8h7e, 8h7e, 8h7e, 8h00,
    8h18, 8h3c, 8h7e, 8h18, 8h7e, 8h3c, 8h18, 8hff,
    8h18, 8h3c, 8h7e, 8h18, 8h18, 8h18, 8h18, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h7e, 8h3c, 8h18, 8h00,
    8h00, 8h18, 8h0c, 8hfe, 8h0c, 8h18, 8h00, 8h00,
    8h00, 8h30, 8h60, 8hfe, 8h60, 8h30, 8h00, 8h00,
    8h00, 8h00, 8hc0, 8hc0, 8hc0, 8hfe, 8h00, 8h00,
    8h00, 8h24, 8h66, 8hff, 8h66, 8h24, 8h00, 8h00,
    8h00, 8h18, 8h3c, 8h7e, 8hff, 8hff, 8h00, 8h00,
    8h00, 8hff, 8hff, 8h7e, 8h3c, 8h18, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h30, 8h78, 8h78, 8h30, 8h30, 8h00, 8h30, 8h00,
    8h6c, 8h6c, 8h6c, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h6c, 8h6c, 8hfe, 8h6c, 8hfe, 8h6c, 8h6c, 8h00,
    8h30, 8h7c, 8hc0, 8h78, 8h0c, 8hf8, 8h30, 8h00,
    8h00, 8hc6, 8hcc, 8h18, 8h30, 8h66, 8hc6, 8h00,
    8h38, 8h6c, 8h38, 8h76, 8hdc, 8hcc, 8h76, 8h00,
    8h60, 8h60, 8hc0, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h30, 8h60, 8h60, 8h60, 8h30, 8h18, 8h00,
    8h60, 8h30, 8h18, 8h18, 8h18, 8h30, 8h60, 8h00,
    8h00, 8h66, 8h3c, 8hff, 8h3c, 8h66, 8h00, 8h00,
    8h00, 8h30, 8h30, 8hfc, 8h30, 8h30, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h30, 8h30, 8h60,
    8h00, 8h00, 8h00, 8hfc, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h30, 8h30, 8h00,
    8h06, 8h0c, 8h18, 8h30, 8h60, 8hc0, 8h80, 8h00,
    8h7c, 8hc6, 8hce, 8hde, 8hf6, 8he6, 8h7c, 8h00,
    8h30, 8h70, 8h30, 8h30, 8h30, 8h30, 8hfc, 8h00,
    8h78, 8hcc, 8h0c, 8h38, 8h60, 8hcc, 8hfc, 8h00,
    8h78, 8hcc, 8h0c, 8h38, 8h0c, 8hcc, 8h78, 8h00,
    8h1c, 8h3c, 8h6c, 8hcc, 8hfe, 8h0c, 8h1e, 8h00,
    8hfc, 8hc0, 8hf8, 8h0c, 8h0c, 8hcc, 8h78, 8h00,
    8h38, 8h60, 8hc0, 8hf8, 8hcc, 8hcc, 8h78, 8h00,
    8hfc, 8hcc, 8h0c, 8h18, 8h30, 8h30, 8h30, 8h00,
    8h78, 8hcc, 8hcc, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h78, 8hcc, 8hcc, 8h7c, 8h0c, 8h18, 8h70, 8h00,
    8h00, 8h30, 8h30, 8h00, 8h00, 8h30, 8h30, 8h00,
    8h00, 8h30, 8h30, 8h00, 8h00, 8h30, 8h30, 8h60,
    8h18, 8h30, 8h60, 8hc0, 8h60, 8h30, 8h18, 8h00,
    8h00, 8h00, 8hfc, 8h00, 8h00, 8hfc, 8h00, 8h00,
    8h60, 8h30, 8h18, 8h0c, 8h18, 8h30, 8h60, 8h00,
    8h78, 8hcc, 8h0c, 8h18, 8h30, 8h00, 8h30, 8h00,
    8h7c, 8hc6, 8hde, 8hde, 8hde, 8hc0, 8h78, 8h00,
    8h30, 8h78, 8hcc, 8hcc, 8hfc, 8hcc, 8hcc, 8h00,
    8hfc, 8h66, 8h66, 8h7c, 8h66, 8h66, 8hfc, 8h00,
    8h3c, 8h66, 8hc0, 8hc0, 8hc0, 8h66, 8h3c, 8h00,
    8hf8, 8h6c, 8h66, 8h66, 8h66, 8h6c, 8hf8, 8h00,
    8hfe, 8h62, 8h68, 8h78, 8h68, 8h62, 8hfe, 8h00,
    8hfe, 8h62, 8h68, 8h78, 8h68, 8h60, 8hf0, 8h00,
    8h3c, 8h66, 8hc0, 8hc0, 8hce, 8h66, 8h3e, 8h00,
    8hcc, 8hcc, 8hcc, 8hfc, 8hcc, 8hcc, 8hcc, 8h00,
    8h78, 8h30, 8h30, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h1e, 8h0c, 8h0c, 8h0c, 8hcc, 8hcc, 8h78, 8h00,
    8he6, 8h66, 8h6c, 8h78, 8h6c, 8h66, 8he6, 8h00,
    8hf0, 8h60, 8h60, 8h60, 8h62, 8h66, 8hfe, 8h00,
    8hc6, 8hee, 8hfe, 8hfe, 8hd6, 8hc6, 8hc6, 8h00,
    8hc6, 8he6, 8hf6, 8hde, 8hce, 8hc6, 8hc6, 8h00,
    8h38, 8h6c, 8hc6, 8hc6, 8hc6, 8h6c, 8h38, 8h00,
    8hfc, 8h66, 8h66, 8h7c, 8h60, 8h60, 8hf0, 8h00,
    8h78, 8hcc, 8hcc, 8hcc, 8hdc, 8h78, 8h1c, 8h00,
    8hfc, 8h66, 8h66, 8h7c, 8h6c, 8h66, 8he6, 8h00,
    8h78, 8hcc, 8he0, 8h70, 8h1c, 8hcc, 8h78, 8h00,
    8hfc, 8hb4, 8h30, 8h30, 8h30, 8h30, 8h78, 8h00,
    8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hfc, 8h00,
    8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h78, 8h30, 8h00,
    8hc6, 8hc6, 8hc6, 8hd6, 8hfe, 8hee, 8hc6, 8h00,
    8hc6, 8hc6, 8h6c, 8h38, 8h38, 8h6c, 8hc6, 8h00,
    8hcc, 8hcc, 8hcc, 8h78, 8h30, 8h30, 8h78, 8h00,
    8hfe, 8hc6, 8h8c, 8h18, 8h32, 8h66, 8hfe, 8h00,
    8h78, 8h60, 8h60, 8h60, 8h60, 8h60, 8h78, 8h00,
    8hc0, 8h60, 8h30, 8h18, 8h0c, 8h06, 8h02, 8h00,
    8h78, 8h18, 8h18, 8h18, 8h18, 8h18, 8h78, 8h00,
    8h10, 8h38, 8h6c, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff,
    8h30, 8h30, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8h76, 8h00,
    8he0, 8h60, 8h60, 8h7c, 8h66, 8h66, 8hdc, 8h00,
    8h00, 8h00, 8h78, 8hcc, 8hc0, 8hcc, 8h78, 8h00,
    8h1c, 8h0c, 8h0c, 8h7c, 8hcc, 8hcc, 8h76, 8h00,
    8h00, 8h00, 8h78, 8hcc, 8hfc, 8hc0, 8h78, 8h00,
    8h38, 8h6c, 8h60, 8hf0, 8h60, 8h60, 8hf0, 8h00,
    8h00, 8h00, 8h76, 8hcc, 8hcc, 8h7c, 8h0c, 8hf8,
    8he0, 8h60, 8h6c, 8h76, 8h66, 8h66, 8he6, 8h00,
    8h30, 8h00, 8h70, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h0c, 8h00, 8h0c, 8h0c, 8h0c, 8hcc, 8hcc, 8h78,
    8he0, 8h60, 8h66, 8h6c, 8h78, 8h6c, 8he6, 8h00,
    8h70, 8h30, 8h30, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h00, 8h00, 8hcc, 8hfe, 8hfe, 8hd6, 8hc6, 8h00,
    8h00, 8h00, 8hf8, 8hcc, 8hcc, 8hcc, 8hcc, 8h00,
    8h00, 8h00, 8h78, 8hcc, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8h00, 8hdc, 8h66, 8h66, 8h7c, 8h60, 8hf0,
    8h00, 8h00, 8h76, 8hcc, 8hcc, 8h7c, 8h0c, 8h1e,
    8h00, 8h00, 8hdc, 8h76, 8h66, 8h60, 8hf0, 8h00,
    8h00, 8h00, 8h7c, 8hc0, 8h78, 8h0c, 8hf8, 8h00,
    8h10, 8h30, 8h7c, 8h30, 8h30, 8h34, 8h18, 8h00,
    8h00, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00,
    8h00, 8h00, 8hcc, 8hcc, 8hcc, 8h78, 8h30, 8h00,
    8h00, 8h00, 8hc6, 8hd6, 8hfe, 8hfe, 8h6c, 8h00,
    8h00, 8h00, 8hc6, 8h6c, 8h38, 8h6c, 8hc6, 8h00,
    8h00, 8h00, 8hcc, 8hcc, 8hcc, 8h7c, 8h0c, 8hf8,
    8h00, 8h00, 8hfc, 8h98, 8h30, 8h64, 8hfc, 8h00,
    8h1c, 8h30, 8h30, 8he0, 8h30, 8h30, 8h1c, 8h00,
    8h18, 8h18, 8h18, 8h00, 8h18, 8h18, 8h18, 8h00,
    8he0, 8h30, 8h30, 8h1c, 8h30, 8h30, 8he0, 8h00,
    8h76, 8hdc, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h10, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8h00,
    8h78, 8hcc, 8hc0, 8hcc, 8h78, 8h18, 8h0c, 8h78,
    8h00, 8hcc, 8h00, 8hcc, 8hcc, 8hcc, 8h7e, 8h00,
    8h1c, 8h00, 8h78, 8hcc, 8hfc, 8hc0, 8h78, 8h00,
    8h7e, 8hc3, 8h3c, 8h06, 8h3e, 8h66, 8h3f, 8h00,
    8hcc, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8h7e, 8h00,
    8he0, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8h7e, 8h00,
    8h30, 8h30, 8h78, 8h0c, 8h7c, 8hcc, 8h7e, 8h00,
    8h00, 8h00, 8h78, 8hc0, 8hc0, 8h78, 8h0c, 8h38,
    8h7e, 8hc3, 8h3c, 8h66, 8h7e, 8h60, 8h3c, 8h00,
    8hcc, 8h00, 8h78, 8hcc, 8hfc, 8hc0, 8h78, 8h00,
    8he0, 8h00, 8h78, 8hcc, 8hfc, 8hc0, 8h78, 8h00,
    8hcc, 8h00, 8h70, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h7c, 8hc6, 8h38, 8h18, 8h18, 8h18, 8h3c, 8h00,
    8he0, 8h00, 8h70, 8h30, 8h30, 8h30, 8h78, 8h00,
    8hc6, 8h38, 8h6c, 8hc6, 8hfe, 8hc6, 8hc6, 8h00,
    8h30, 8h30, 8h00, 8h78, 8hcc, 8hfc, 8hcc, 8h00,
    8h1c, 8h00, 8hfc, 8h60, 8h78, 8h60, 8hfc, 8h00,
    8h00, 8h00, 8h7f, 8h0c, 8h7f, 8hcc, 8h7f, 8h00,
    8h3e, 8h6c, 8hcc, 8hfe, 8hcc, 8hcc, 8hce, 8h00,
    8h78, 8hcc, 8h00, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8hcc, 8h00, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8he0, 8h00, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h78, 8hcc, 8h00, 8hcc, 8hcc, 8hcc, 8h7e, 8h00,
    8h00, 8he0, 8h00, 8hcc, 8hcc, 8hcc, 8h7e, 8h00,
    8h00, 8hcc, 8h00, 8hcc, 8hcc, 8h7c, 8h0c, 8hf8,
    8hc3, 8h18, 8h3c, 8h66, 8h66, 8h3c, 8h18, 8h00,
    8hcc, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8h78, 8h00,
    8h18, 8h18, 8h7e, 8hc0, 8hc0, 8h7e, 8h18, 8h18,
    8h38, 8h6c, 8h64, 8hf0, 8h60, 8he6, 8hfc, 8h00,
    8hcc, 8hcc, 8h78, 8hfc, 8h30, 8hfc, 8h30, 8h30,
    8hf8, 8hcc, 8hcc, 8hfa, 8hc6, 8hcf, 8hc6, 8hc7,
    8h0e, 8h1b, 8h18, 8h3c, 8h18, 8h18, 8hd8, 8h70,
    8h1c, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8h7e, 8h00,
    8h38, 8h00, 8h70, 8h30, 8h30, 8h30, 8h78, 8h00,
    8h00, 8h1c, 8h00, 8h78, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8h1c, 8h00, 8hcc, 8hcc, 8hcc, 8h7e, 8h00,
    8h00, 8hf8, 8h00, 8hf8, 8hcc, 8hcc, 8hcc, 8h00,
    8hfc, 8h00, 8hcc, 8hec, 8hfc, 8hdc, 8hcc, 8h00,
    8h3c, 8h6c, 8h6c, 8h3e, 8h00, 8h7e, 8h00, 8h00,
    8h38, 8h6c, 8h6c, 8h38, 8h00, 8h7c, 8h00, 8h00,
    8h30, 8h00, 8h30, 8h60, 8hc0, 8hcc, 8h78, 8h00,
    8h00, 8h00, 8h00, 8hfc, 8hc0, 8hc0, 8h00, 8h00,
    8h00, 8h00, 8h00, 8hfc, 8h0c, 8h0c, 8h00, 8h00,
    8hc3, 8hc6, 8hcc, 8hde, 8h33, 8h66, 8hcc, 8h0f,
    8hc3, 8hc6, 8hcc, 8hdb, 8h37, 8h6f, 8hcf, 8h03,
    8h18, 8h18, 8h00, 8h18, 8h18, 8h18, 8h18, 8h00,
    8h00, 8h33, 8h66, 8hcc, 8h66, 8h33, 8h00, 8h00,
    8h00, 8hcc, 8h66, 8h33, 8h66, 8hcc, 8h00, 8h00,
    8h22, 8h88, 8h22, 8h88, 8h22, 8h88, 8h22, 8h88,
    8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa,
    8hdb, 8h77, 8hdb, 8hee, 8hdb, 8h77, 8hdb, 8hee,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8hf8, 8h18, 8h18, 8h18,
    8h18, 8h18, 8hf8, 8h18, 8hf8, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8hf6, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8hfe, 8h36, 8h36, 8h36,
    8h00, 8h00, 8hf8, 8h18, 8hf8, 8h18, 8h18, 8h18,
    8h36, 8h36, 8hf6, 8h06, 8hf6, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8hfe, 8h06, 8hf6, 8h36, 8h36, 8h36,
    8h36, 8h36, 8hf6, 8h06, 8hfe, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8hfe, 8h00, 8h00, 8h00,
    8h18, 8h18, 8hf8, 8h18, 8hf8, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hf8, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h1f, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8hff, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hff, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h1f, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8hff, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h1f, 8h18, 8h1f, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8h37, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h37, 8h30, 8h3f, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3f, 8h30, 8h37, 8h36, 8h36, 8h36,
    8h36, 8h36, 8hf7, 8h00, 8hff, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hff, 8h00, 8hf7, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h37, 8h30, 8h37, 8h36, 8h36, 8h36,
    8h00, 8h00, 8hff, 8h00, 8hff, 8h00, 8h00, 8h00,
    8h36, 8h36, 8hf7, 8h00, 8hf7, 8h36, 8h36, 8h36,
    8h18, 8h18, 8hff, 8h00, 8hff, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8hff, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hff, 8h00, 8hff, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8hff, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h3f, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h1f, 8h18, 8h1f, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1f, 8h18, 8h1f, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8h3f, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8hff, 8h36, 8h36, 8h36,
    8h18, 8h18, 8hff, 8h18, 8hff, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8hf8, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h1f, 8h18, 8h18, 8h18,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff,
    8h00, 8h00, 8h00, 8h00, 8hff, 8hff, 8hff, 8hff,
    8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0,
    8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f,
    8hff, 8hff, 8hff, 8hff, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h76, 8hdc, 8hc8, 8hdc, 8h76, 8h00,
    8h00, 8h78, 8hcc, 8hf8, 8hcc, 8hf8, 8hc0, 8hc0,
    8h00, 8hfc, 8hcc, 8hc0, 8hc0, 8hc0, 8hc0, 8h00,
    8h00, 8hfe, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h00,
    8hfc, 8hcc, 8h60, 8h30, 8h60, 8hcc, 8hfc, 8h00,
    8h00, 8h00, 8h7e, 8hd8, 8hd8, 8hd8, 8h70, 8h00,
    8h00, 8h66, 8h66, 8h66, 8h66, 8h7c, 8h60, 8hc0,
    8h00, 8h76, 8hdc, 8h18, 8h18, 8h18, 8h18, 8h00,
    8hfc, 8h30, 8h78, 8hcc, 8hcc, 8h78, 8h30, 8hfc,
    8h38, 8h6c, 8hc6, 8hfe, 8hc6, 8h6c, 8h38, 8h00,
    8h38, 8h6c, 8hc6, 8hc6, 8h6c, 8h6c, 8hee, 8h00,
    8h1c, 8h30, 8h18, 8h7c, 8hcc, 8hcc, 8h78, 8h00,
    8h00, 8h00, 8h7e, 8hdb, 8hdb, 8h7e, 8h00, 8h00,
    8h06, 8h0c, 8h7e, 8hdb, 8hdb, 8h7e, 8h60, 8hc0,
    8h38, 8h60, 8hc0, 8hf8, 8hc0, 8h60, 8h38, 8h00,
    8h78, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h00,
    8h00, 8hfc, 8h00, 8hfc, 8h00, 8hfc, 8h00, 8h00,
    8h30, 8h30, 8hfc, 8h30, 8h30, 8h00, 8hfc, 8h00,
    8h60, 8h30, 8h18, 8h30, 8h60, 8h00, 8hfc, 8h00,
    8h18, 8h30, 8h60, 8h30, 8h18, 8h00, 8hfc, 8h00,
    8h0e, 8h1b, 8h1b, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hd8, 8hd8, 8h70,
    8h30, 8h30, 8h00, 8hfc, 8h00, 8h30, 8h30, 8h00,
    8h00, 8h76, 8hdc, 8h00, 8h76, 8hdc, 8h00, 8h00,
    8h38, 8h6c, 8h6c, 8h38, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h00, 8h00, 8h00,
    8h0f, 8h0c, 8h0c, 8h0c, 8hec, 8h6c, 8h3c, 8h1c,
    8h78, 8h6c, 8h6c, 8h6c, 8h6c, 8h00, 8h00, 8h00,
    8h70, 8h18, 8h30, 8h60, 8h78, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h3c, 8h3c, 8h3c, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00

    };
    
    // 80 x 4 character buffer for the input/output terminal
    dualport_bram uint8 terminal[640] = uninitialized;

    // Character position on the terminal x 0-79, y 0-7 * 80 ( fetch it one pixel ahead of the actual x pixel, so it is always ready )
    uint7 terminal_x = 0;
    uint3 terminal_y = 7;
    uint7 xterminalpos := (pix_x+1) >> 3;
    uint10 yterminalpos := ((pix_y - 416) >> 3) * 80; // 8 pixel high characters

    // Determine if cursor, and if cursor is flashing
    uint1 is_cursor := ( xterminalpos == terminal_x ) & ( ( ( pix_y - 416) >> 3 ) == terminal_y );
    
    // Derive the x and y coordinate within the current 8x8 terminal character block x 0-7, y 0-7
    uint3 xinterminal := (pix_x) & 7;
    uint3 yinterminal := (pix_y) & 7;

    // Derive the actual pixel in the current terminal
    uint1 terminalpixel := ((characterGenerator8x8[ terminal.rdata0 * 8 + yinterminal ] << xinterminal) >> 7) & 1;

    // Terminal active (scroll) flag and temporary storage for scrolling
    uint10 terminal_scroll = 0;
    uint10 terminal_scroll_next = 0;

    // Setup the reading of the terminal memory
    terminal.addr0 := xterminalpos + yterminalpos;
    terminal.wenable0 := 0;

    // Setup the writing to the terminal memory
    terminal.wenable1 := 0;

    // TERMINAL Actions
    // Write to terminal, move to next character and scroll
    always {
         switch( terminal_active ) {
             case 0: {
                switch( terminal_write ) {
                    case 1: {
                        // Display character
                        switch( terminal_character ) {
                            case 8: {
                                // BACKSPACE, move back one character
                                if( terminal_x > 0 ) {
                                    terminal_x = terminal_x - 1;
                                    terminal.addr1 = terminal_x - 1 + terminal_y * 80;
                                    terminal.wdata1 = 0;
                                    terminal.wenable1 = 1;
                                }
                            }
                            case 10: {
                                // LINE FEED, scroll
                                terminal_scroll = 0;
                                terminal_active = 1;
                            }
                            case 13: {
                                // CARRIAGE RETURN
                                terminal_x = 0;
                            }
                            default: {
                                // Display character
                                terminal.addr1 = terminal_x + terminal_y * 80;
                                terminal.wdata1 = terminal_character;
                                terminal.wenable1 = 1;
                                if( terminal_x == 79 ) {
                                    terminal_x = 0;
                                    terminal_scroll = 0;
                                    terminal_active = 1;
                                } else {
                                    terminal_x = terminal_x + 1;
                                }
                            }
                        }
                    }
                    default: {}
                }
            }
            // TERMINAL SCROLL
            case 1: {
                // SCROLL
                if( terminal_scroll == 560 ) {
                    // Finished Scroll, Move to blank
                    terminal_active = 4;
                } else {
                    // Read the next character down
                    terminal.addr1 = terminal_scroll + 80;
                    terminal_active = 2;
                }
            }
            case 2: {
                // Retrieve the character to move up
                terminal_scroll_next = terminal.rdata1;
                terminal_active = 3;
            }
            case 3: {
                // Write the character one line up and move onto the next character
                terminal.addr1 = terminal_scroll;
                terminal.wdata1 = terminal_scroll_next;
                terminal.wenable1 = 1;
                terminal_scroll = terminal_scroll + 1;
                terminal_active = 1;
            }
            case 4: {
                // Blank out the last line
                terminal.addr1 = terminal_scroll;
                terminal.wdata1 = 0;
                terminal.wenable1 = 1;
                if( terminal_scroll == 640 ) {
                    // Finish Blank
                    terminal_active = 0;
                } else {
                    terminal_scroll = terminal_scroll + 1;
                }
            }
            default: {terminal_active = 0;}
         } // TERMINAL
    }

    // Render the terminal
    while(1) {
        if( pix_active & showterminal & (pix_y > 415) ) {
            // TERMINAL is in range and showterminal flag
            // Invert colours for cursor if flashing
            switch( terminalpixel ) {
                case 0: {
                    if( is_cursor & timer1hz ) {
                        pix_red = 6==6 ? 63 : 255;
                        pix_green = 6==6 ? 63 : 255;
                        pix_blue = 6==6 ? 63 : 255;
                    } else {
                        pix_red = 0;
                        pix_green = 0;
                        pix_blue = 6==6 ? 63 : 255;
                    }
                }
                case 1: {
                    if( is_cursor & timer1hz ) {
                        pix_red = 0;
                        pix_green = 0;
                        pix_blue = 6==6 ? 63 : 255;
                    } else {
                        pix_red = 6==6 ? 63 : 255;
                        pix_green = 6==6 ? 63 : 255;
                        pix_blue = 6==6 ? 63 : 255;
                    }
                }
            }
            terminal_display = 1;
        } else {
            terminal_display = 0;
        }
    }

}

algorithm character_map(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint6 pix_red,
    output! uint6 pix_green,
    output! uint6 pix_blue,
    output! uint1   character_map_display,
    
    // TPU to SET characters, background, foreground
    input uint7 tpu_x,
    input uint5 tpu_y,
    input uint8 tpu_character,
    input uint6 tpu_foreground,
    input uint7 tpu_background,
    input uint2 tpu_write
) <autorun> {
    // Character ROM 8x16
    uint8 characterGenerator8x16[] = {
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7e, 8h81, 8ha5, 8h81, 8h81, 8hbd, 8h99, 8h81, 8h81, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7e, 8hff, 8hdb, 8hff, 8hff, 8hc3, 8he7, 8hff, 8hff, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h6c, 8hfe, 8hfe, 8hfe, 8hfe, 8h7c, 8h38, 8h10, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h10, 8h38, 8h7c, 8hfe, 8h7c, 8h38, 8h10, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h18, 8h3c, 8h3c, 8he7, 8he7, 8he7, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h18, 8h3c, 8h7e, 8hff, 8hff, 8h7e, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h3c, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8he7, 8hc3, 8hc3, 8he7, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h3c, 8h66, 8h42, 8h42, 8h66, 8h3c, 8h00, 8h00, 8h00, 8h00, 8h00,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hc3, 8h99, 8hbd, 8hbd, 8h99, 8hc3, 8hff, 8hff, 8hff, 8hff, 8hff,
    8h00, 8h00, 8h1e, 8h0e, 8h1a, 8h32, 8h78, 8hcc, 8hcc, 8hcc, 8hcc, 8h78, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h66, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h7e, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3f, 8h33, 8h3f, 8h30, 8h30, 8h30, 8h30, 8h70, 8hf0, 8he0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7f, 8h63, 8h7f, 8h63, 8h63, 8h63, 8h63, 8h67, 8he7, 8he6, 8hc0, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h18, 8h18, 8hdb, 8h3c, 8he7, 8h3c, 8hdb, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h80, 8hc0, 8he0, 8hf0, 8hf8, 8hfe, 8hf8, 8hf0, 8he0, 8hc0, 8h80, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h02, 8h06, 8h0e, 8h1e, 8h3e, 8hfe, 8h3e, 8h1e, 8h0e, 8h06, 8h02, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h3c, 8h7e, 8h18, 8h18, 8h18, 8h7e, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h00, 8h66, 8h66, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7f, 8hdb, 8hdb, 8hdb, 8h7b, 8h1b, 8h1b, 8h1b, 8h1b, 8h1b, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h7c, 8hc6, 8h60, 8h38, 8h6c, 8hc6, 8hc6, 8h6c, 8h38, 8h0c, 8hc6, 8h7c, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8hfe, 8hfe, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h3c, 8h7e, 8h18, 8h18, 8h18, 8h7e, 8h3c, 8h18, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h3c, 8h7e, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h7e, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h0c, 8hfe, 8h0c, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h30, 8h60, 8hfe, 8h60, 8h30, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hc0, 8hc0, 8hc0, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h28, 8h6c, 8hfe, 8h6c, 8h28, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h10, 8h38, 8h38, 8h7c, 8h7c, 8hfe, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hfe, 8hfe, 8h7c, 8h7c, 8h38, 8h38, 8h10, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h3c, 8h3c, 8h3c, 8h18, 8h18, 8h18, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h66, 8h66, 8h66, 8h24, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h6c, 8h6c, 8hfe, 8h6c, 8h6c, 8h6c, 8hfe, 8h6c, 8h6c, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h7c, 8hc6, 8hc2, 8hc0, 8h7c, 8h06, 8h06, 8h86, 8hc6, 8h7c, 8h18, 8h18, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hc2, 8hc6, 8h0c, 8h18, 8h30, 8h60, 8hc6, 8h86, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h6c, 8h6c, 8h38, 8h76, 8hdc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h30, 8h30, 8h30, 8h60, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h0c, 8h18, 8h30, 8h30, 8h30, 8h30, 8h30, 8h30, 8h18, 8h0c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h30, 8h18, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h18, 8h30, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h66, 8h3c, 8hff, 8h3c, 8h66, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h7e, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h18, 8h30, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h02, 8h06, 8h0c, 8h18, 8h30, 8h60, 8hc0, 8h80, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h6c, 8hc6, 8hc6, 8hd6, 8hd6, 8hc6, 8hc6, 8h6c, 8h38, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h38, 8h78, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8h06, 8h0c, 8h18, 8h30, 8h60, 8hc0, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8h06, 8h06, 8h3c, 8h06, 8h06, 8h06, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h0c, 8h1c, 8h3c, 8h6c, 8hcc, 8hfe, 8h0c, 8h0c, 8h0c, 8h1e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8hc0, 8hc0, 8hc0, 8hfc, 8h06, 8h06, 8h06, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h60, 8hc0, 8hc0, 8hfc, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8hc6, 8h06, 8h06, 8h0c, 8h18, 8h30, 8h30, 8h30, 8h30, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8h7e, 8h06, 8h06, 8h06, 8h0c, 8h78, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h18, 8h18, 8h30, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h06, 8h0c, 8h18, 8h30, 8h60, 8h30, 8h18, 8h0c, 8h06, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7e, 8h00, 8h00, 8h7e, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h60, 8h30, 8h18, 8h0c, 8h06, 8h0c, 8h18, 8h30, 8h60, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8h0c, 8h18, 8h18, 8h18, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hde, 8hde, 8hde, 8hdc, 8hc0, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h10, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfc, 8h66, 8h66, 8h66, 8h7c, 8h66, 8h66, 8h66, 8h66, 8hfc, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h66, 8hc2, 8hc0, 8hc0, 8hc0, 8hc0, 8hc2, 8h66, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hf8, 8h6c, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h6c, 8hf8, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8h66, 8h62, 8h68, 8h78, 8h68, 8h60, 8h62, 8h66, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8h66, 8h62, 8h68, 8h78, 8h68, 8h60, 8h60, 8h60, 8hf0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h66, 8hc2, 8hc0, 8hc0, 8hde, 8hc6, 8hc6, 8h66, 8h3a, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1e, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8hcc, 8hcc, 8hcc, 8h78, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8he6, 8h66, 8h66, 8h6c, 8h78, 8h78, 8h6c, 8h66, 8h66, 8he6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hf0, 8h60, 8h60, 8h60, 8h60, 8h60, 8h60, 8h62, 8h66, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hee, 8hfe, 8hfe, 8hd6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8he6, 8hf6, 8hfe, 8hde, 8hce, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfc, 8h66, 8h66, 8h66, 8h7c, 8h60, 8h60, 8h60, 8h60, 8hf0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hd6, 8hde, 8h7c, 8h0c, 8h0e, 8h00, 8h00,
    8h00, 8h00, 8hfc, 8h66, 8h66, 8h66, 8h7c, 8h6c, 8h66, 8h66, 8h66, 8he6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7c, 8hc6, 8hc6, 8h60, 8h38, 8h0c, 8h06, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h7e, 8h7e, 8h5a, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h6c, 8h38, 8h10, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hd6, 8hd6, 8hd6, 8hfe, 8hee, 8h6c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8hc6, 8h6c, 8h7c, 8h38, 8h38, 8h7c, 8h6c, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h66, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8hc6, 8h86, 8h0c, 8h18, 8h30, 8h60, 8hc2, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h30, 8h30, 8h30, 8h30, 8h30, 8h30, 8h30, 8h30, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h80, 8hc0, 8he0, 8h70, 8h38, 8h1c, 8h0e, 8h06, 8h02, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h10, 8h38, 8h6c, 8hc6, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8h00,
    8h30, 8h30, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8he0, 8h60, 8h60, 8h78, 8h6c, 8h66, 8h66, 8h66, 8h66, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7c, 8hc6, 8hc0, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1c, 8h0c, 8h0c, 8h3c, 8h6c, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h6c, 8h64, 8h60, 8hf0, 8h60, 8h60, 8h60, 8h60, 8hf0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h76, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h7c, 8h0c, 8hcc, 8h78, 8h00,
    8h00, 8h00, 8he0, 8h60, 8h60, 8h6c, 8h76, 8h66, 8h66, 8h66, 8h66, 8he6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h18, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h06, 8h06, 8h00, 8h0e, 8h06, 8h06, 8h06, 8h06, 8h06, 8h06, 8h66, 8h66, 8h3c, 8h00,
    8h00, 8h00, 8he0, 8h60, 8h60, 8h66, 8h6c, 8h78, 8h78, 8h6c, 8h66, 8he6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hec, 8hfe, 8hd6, 8hd6, 8hd6, 8hd6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hdc, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hdc, 8h66, 8h66, 8h66, 8h66, 8h66, 8h7c, 8h60, 8h60, 8hf0, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h76, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h7c, 8h0c, 8h0c, 8h1e, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hdc, 8h76, 8h66, 8h60, 8h60, 8h60, 8hf0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7c, 8hc6, 8h60, 8h38, 8h0c, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h10, 8h30, 8h30, 8hfc, 8h30, 8h30, 8h30, 8h30, 8h36, 8h1c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h66, 8h66, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hc6, 8hc6, 8hd6, 8hd6, 8hd6, 8hfe, 8h6c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hc6, 8h6c, 8h38, 8h38, 8h38, 8h6c, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7e, 8h06, 8h0c, 8hf8, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8hcc, 8h18, 8h30, 8h60, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h0e, 8h18, 8h18, 8h18, 8h70, 8h18, 8h18, 8h18, 8h18, 8h0e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h18, 8h18, 8h18, 8h00, 8h18, 8h18, 8h18, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h70, 8h18, 8h18, 8h18, 8h0e, 8h18, 8h18, 8h18, 8h18, 8h70, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h76, 8hdc, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h10, 8h38, 8h6c, 8hc6, 8hc6, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3c, 8h66, 8hc2, 8hc0, 8hc0, 8hc0, 8hc2, 8h66, 8h3c, 8h0c, 8h06, 8h7c, 8h00, 8h00,
    8h00, 8h00, 8hcc, 8h00, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h0c, 8h18, 8h30, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h10, 8h38, 8h6c, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hcc, 8h00, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h38, 8h6c, 8h38, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h3c, 8h66, 8h60, 8h60, 8h66, 8h3c, 8h0c, 8h06, 8h3c, 8h00, 8h00, 8h00,
    8h00, 8h10, 8h38, 8h6c, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8h00, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8h7c, 8hc6, 8hfe, 8hc0, 8hc0, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h66, 8h00, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h18, 8h3c, 8h66, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hc6, 8h00, 8h10, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h38, 8h6c, 8h38, 8h00, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h30, 8h60, 8h00, 8hfe, 8h66, 8h60, 8h7c, 8h60, 8h60, 8h66, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hcc, 8h76, 8h36, 8h7e, 8hd8, 8hd8, 8h6e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h3e, 8h6c, 8hcc, 8hcc, 8hfe, 8hcc, 8hcc, 8hcc, 8hcc, 8hce, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h10, 8h38, 8h6c, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h30, 8h78, 8hcc, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h60, 8h30, 8h18, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hc6, 8h00, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7e, 8h06, 8h0c, 8h78, 8h00,
    8h00, 8hc6, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hc6, 8h00, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h18, 8h18, 8h3c, 8h66, 8h60, 8h60, 8h60, 8h66, 8h3c, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h38, 8h6c, 8h64, 8h60, 8hf0, 8h60, 8h60, 8h60, 8h60, 8he6, 8hfc, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h66, 8h66, 8h3c, 8h18, 8h7e, 8h18, 8h7e, 8h18, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hf8, 8hcc, 8hcc, 8hf8, 8hc4, 8hcc, 8hde, 8hcc, 8hcc, 8hcc, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h0e, 8h1b, 8h18, 8h18, 8h18, 8h7e, 8h18, 8h18, 8h18, 8h18, 8h18, 8hd8, 8h70, 8h00, 8h00,
    8h00, 8h18, 8h30, 8h60, 8h00, 8h78, 8h0c, 8h7c, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h0c, 8h18, 8h30, 8h00, 8h38, 8h18, 8h18, 8h18, 8h18, 8h18, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h18, 8h30, 8h60, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h18, 8h30, 8h60, 8h00, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8hcc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h76, 8hdc, 8h00, 8hdc, 8h66, 8h66, 8h66, 8h66, 8h66, 8h66, 8h00, 8h00, 8h00, 8h00,
    8h76, 8hdc, 8h00, 8hc6, 8he6, 8hf6, 8hfe, 8hde, 8hce, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h3c, 8h6c, 8h6c, 8h3e, 8h00, 8h7e, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h38, 8h6c, 8h6c, 8h38, 8h00, 8h7c, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h30, 8h30, 8h00, 8h30, 8h30, 8h60, 8hc0, 8hc6, 8hc6, 8h7c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8hc0, 8hc0, 8hc0, 8hc0, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8h06, 8h06, 8h06, 8h06, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hc0, 8hc0, 8hc2, 8hc6, 8hcc, 8h18, 8h30, 8h60, 8hdc, 8h86, 8h0c, 8h18, 8h3e, 8h00, 8h00,
    8h00, 8hc0, 8hc0, 8hc2, 8hc6, 8hcc, 8h18, 8h30, 8h66, 8hce, 8h9e, 8h3e, 8h06, 8h06, 8h00, 8h00,
    8h00, 8h00, 8h18, 8h18, 8h00, 8h18, 8h18, 8h18, 8h3c, 8h3c, 8h3c, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h36, 8h6c, 8hd8, 8h6c, 8h36, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hd8, 8h6c, 8h36, 8h6c, 8hd8, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44, 8h11, 8h44,
    8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa, 8h55, 8haa,
    8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77, 8hdd, 8h77,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hf8, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hf8, 8h18, 8hf8, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8hf6, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hf8, 8h18, 8hf8, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8h36, 8hf6, 8h06, 8hf6, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hfe, 8h06, 8hf6, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8hf6, 8h06, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hf8, 8h18, 8hf8, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hf8, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h1f, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h1f, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hff, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h1f, 8h18, 8h1f, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h37, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h37, 8h30, 8h3f, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h3f, 8h30, 8h37, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8hf7, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8hf7, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h37, 8h30, 8h37, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8h36, 8hf7, 8h00, 8hf7, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hff, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h00, 8hff, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h3f, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h1f, 8h18, 8h1f, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h1f, 8h18, 8h1f, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h3f, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8hff, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36, 8h36,
    8h18, 8h18, 8h18, 8h18, 8h18, 8hff, 8h18, 8hff, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hf8, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h1f, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff,
    8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0, 8hf0,
    8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f, 8h0f,
    8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8hff, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h76, 8hdc, 8hd8, 8hd8, 8hd8, 8hdc, 8h76, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h78, 8hcc, 8hcc, 8hcc, 8hd8, 8hcc, 8hc6, 8hc6, 8hc6, 8hcc, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8hfe, 8hc6, 8hc6, 8hc0, 8hc0, 8hc0, 8hc0, 8hc0, 8hc0, 8hc0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hfe, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8hfe, 8hc6, 8h60, 8h30, 8h18, 8h30, 8h60, 8hc6, 8hfe, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7e, 8hd8, 8hd8, 8hd8, 8hd8, 8hd8, 8h70, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h66, 8h66, 8h66, 8h66, 8h66, 8h7c, 8h60, 8h60, 8hc0, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h76, 8hdc, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h7e, 8h18, 8h3c, 8h66, 8h66, 8h66, 8h3c, 8h18, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h38, 8h6c, 8hc6, 8hc6, 8hfe, 8hc6, 8hc6, 8h6c, 8h38, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h38, 8h6c, 8hc6, 8hc6, 8hc6, 8h6c, 8h6c, 8h6c, 8h6c, 8hee, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1e, 8h30, 8h18, 8h0c, 8h3e, 8h66, 8h66, 8h66, 8h66, 8h3c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h7e, 8hdb, 8hdb, 8hdb, 8h7e, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h03, 8h06, 8h7e, 8hdb, 8hdb, 8hf3, 8h7e, 8h60, 8hc0, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h1c, 8h30, 8h60, 8h60, 8h7c, 8h60, 8h60, 8h60, 8h30, 8h1c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h7c, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8hc6, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8hfe, 8h00, 8h00, 8hfe, 8h00, 8h00, 8hfe, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h7e, 8h18, 8h18, 8h00, 8h00, 8hff, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h30, 8h18, 8h0c, 8h06, 8h0c, 8h18, 8h30, 8h00, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h0c, 8h18, 8h30, 8h60, 8h30, 8h18, 8h0c, 8h00, 8h7e, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h0e, 8h1b, 8h1b, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18,
    8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8h18, 8hd8, 8hd8, 8hd8, 8h70, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h7e, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h76, 8hdc, 8h00, 8h76, 8hdc, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h38, 8h6c, 8h6c, 8h38, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h18, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h0f, 8h0c, 8h0c, 8h0c, 8h0c, 8h0c, 8hec, 8h6c, 8h6c, 8h3c, 8h1c, 8h00, 8h00, 8h00, 8h00,
    8h00, 8hd8, 8h6c, 8h6c, 8h6c, 8h6c, 8h6c, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h70, 8hd8, 8h30, 8h60, 8hc8, 8hf8, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h7c, 8h7c, 8h7c, 8h7c, 8h7c, 8h7c, 8h7c, 8h00, 8h00, 8h00, 8h00, 8h00,
    8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00, 8h00


    };
    
    // 80 x 30 character buffer
    // Setting background to 200 (ALPHA) allows the bitmap/background to show through
    dualport_bram uint8 character[2400] = uninitialized;
    dualport_bram uint6 foreground[2400] = uninitialized;               // { rrggbb }
    dualport_bram uint7 background[2400] = { 7h40, pad(7h40) };    // { Arrggbb }

    // Expansion map for { rr } to { rrrrrr }, { gg } to { gggggg }, { bb } to { bbbbbb }
    // or { rr } tp { rrrrrrrr }, { gg } to { gggggggg }, { bb } to { bbbbbbbb }
    uint6 colourexpand2to6[4] = {  0, 21, 42, 63 };
    uint8 colourexpand2to8[4] = {  0, 85, 170, 255 };

    // Character position on the screen x 0-79, y 0-29 * 80 ( fetch it one pixel ahead of the actual x pixel, so it is always ready )
    uint8 xcharacterpos := (pix_x+1) >> 3;
    uint12 ycharacterpos := ((pix_y) >> 4) * 80; // 16 pixel high characters
    
    // Derive the x and y coordinate within the current 8x16 character block x 0-7, y 0-15
    uint3 xincharacter := (pix_x) & 7;
    uint4 yincharacter := (pix_y) & 15;

    // Derive the actual pixel in the current character
    uint1 characterpixel := ((characterGenerator8x16[ character.rdata0 * 16 + yincharacter ] << xincharacter) >> 7) & 1;

    // TPU work variable storage
    uint7 tpu_active_x = 0;
    uint5 tpu_active_y = 0;

    // Set up reading of character and attribute memory
    // character.rdata0 is the character, foreground.rdata0 and background.rdata0 are the attribute being rendered
    character.addr0 := xcharacterpos + ycharacterpos;
    character.wenable0 := 0;
    foreground.addr0 := xcharacterpos + ycharacterpos;
    foreground.wenable0 := 0;
    background.addr0 := xcharacterpos + ycharacterpos;
    background.wenable0 := 0;

    // BRAM write access for the TPU 
    character.addr1 := tpu_active_x + tpu_active_y * 80;
    character.wenable1 := 0;
    background.addr1 := tpu_active_x + tpu_active_y * 80;
    background.wenable1 := 0;
    foreground.addr1 := tpu_active_x + tpu_active_y * 80;
    foreground.wenable1 := 0;

    // TPU
    // tpu_write controls actions
    // 1 = set cursor position
    // 2 = draw character in foreground,background at x,y and mvoe to next position
    always {
        switch( tpu_write ) {
            case 1: {
                // Set cursor position
                tpu_active_x = tpu_x;
                tpu_active_y = tpu_y;
            }
            case 2: {
                // Write character,foreground, background to current cursor position and move onto next character position
                character.wdata1 = tpu_character;
                character.wenable1 = 1;
                background.wdata1 = tpu_background;
                background.wenable1 = 1;
                foreground.wdata1 = tpu_foreground;
                foreground.wenable1 = 1;
                
                if( tpu_active_x == 79 ) {
                    tpu_active_x = 0;
                    if( tpu_active_y == 29 ) {
                        tpu_active_y = 0;
                    } else {
                        tpu_active_y = tpu_active_y + 1;
                    }
                } else {
                    tpu_active_x = tpu_active_x + 1;
                }
            }
            default: {}
        } // TPU
    }

    // Render the character map
    while(1) {
        if( pix_active ) {
            // CHARACTER from characterGenerator8x16
            // Determine if background or foreground
            switch( characterpixel ) {
            case 0: {
                    // BACKGROUND
                    if( ~colour7(background.rdata0).alpha ) {
                        pix_red = colourexpand2to6[ colour7(background.rdata0).red ];
                        pix_green = colourexpand2to6[ colour7(background.rdata0).green ];
                        pix_blue = colourexpand2to6[ colour7(background.rdata0).blue ];
                        character_map_display = 1;
                    } else {
                        character_map_display = 0;
                    }
                }
                case 1: {
                    // foreground
                    pix_red = colourexpand2to6[ colour6(foreground.rdata0).red ];
                    pix_green = colourexpand2to6[ colour6(foreground.rdata0).green ];
                    pix_blue = colourexpand2to6[ colour6(foreground.rdata0).blue ];
                    character_map_display = 1;
                }
            }
        } 
    }
}


algorithm bitmap(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint6 pix_red,
    output! uint6 pix_green,
    output! uint6 pix_blue,
    output! uint1   bitmap_display,
    
    // GPU to SET and GET pixels
    input int11 bitmap_x_write,
    input int11 bitmap_y_write,
    input uint7 bitmap_colour_write,
    input uint2 bitmap_write,
    input int16 bitmap_x_read,
    input int16 bitmap_y_read,
    output uint7 bitmap_colour_read,
    
    // BITMAP fade level
    input uint3 bitmapcolour_fade

) <autorun> {
    // 640 x 480 (de10nano) or 320 x 240 (ulx3s) x 10 bit { Arrrgggbbb } colour bitmap
    dualport_bram uint1 bitmap_A[ 307200 ] = uninitialized;
    dualport_bram uint2 bitmap_R[ 307200 ] = uninitialized;
    dualport_bram uint2 bitmap_G[ 307200 ] = uninitialized;
    dualport_bram uint2 bitmap_B[ 307200 ] = uninitialized;

    // Expansion map for { rr } to { rrrrrr }, { gg } to { gggggg }, { bb } to { bbbbbb }
    // or { rr } tp { rrrrrrrr }, { gg } to { gggggggg }, { bb } to { bbbbbbbb }
    uint6 colourexpand2to6[4] = {  0, 21, 42, 63 };
    uint8 colourexpand2to8[4] = {  0, 85, 170, 255 };

    uint3 bitmap_fade = 0;

    // Setup the address in the bitmap for the pixel being rendered
    // ULX3S half the pix_x and pix_y to double the pixels
    bitmap_A.addr0 := pix_x + pix_y * 640;
    bitmap_A.wenable0 := 0;
    bitmap_R.addr0 := pix_x + pix_y * 640;
    bitmap_R.wenable0 := 0;
    bitmap_G.addr0 := pix_x + pix_y * 640;
    bitmap_G.wenable0 := 0;
    bitmap_B.addr0 := pix_x + pix_y * 640;
    bitmap_B.wenable0 := 0;
    
    // Bitmap write access for the GPU - Only enable when x and y are in range
    bitmap_A.addr1 := bitmap_x_write + bitmap_y_write * 640;
    bitmap_A.wdata1 := colour7(bitmap_colour_write).alpha;
    bitmap_A.wenable1 := 0;
    bitmap_R.addr1 := bitmap_x_write + bitmap_y_write * 640;
    bitmap_R.wdata1 := colour7(bitmap_colour_write).red;
    bitmap_R.wenable1 := 0;
    bitmap_G.addr1 := bitmap_x_write + bitmap_y_write * 640;
    bitmap_G.wdata1 := colour7(bitmap_colour_write).green;
    bitmap_G.wenable1 := 0;
    bitmap_B.addr1 := bitmap_x_write + bitmap_y_write * 640;
    bitmap_B.wdata1 := colour7(bitmap_colour_write).blue;
    bitmap_B.wenable1 := 0;

    // Write to the bitmap
    always {
        switch( bitmap_write ) {
            case 1: {
                if( (bitmap_x_write >= 0 ) & (bitmap_x_write < 640) & (bitmap_y_write >= 0) & (bitmap_y_write < 480) ) {
                    bitmap_A.wenable1 = 1;
                    bitmap_R.wenable1 = 1;
                    bitmap_G.wenable1 = 1;
                    bitmap_B.wenable1 = 1;
                }
            }
            case 2: {
                bitmap_fade = bitmapcolour_fade;
            }
        }
    }
    
    // Render the bitmap
    while(1) {
        if( ~bitmap_A.rdata0 ) {
            pix_red = colourexpand2to6[ bitmap_R.rdata0 ] >> bitmap_fade;
            pix_green = colourexpand2to6[ bitmap_G.rdata0 ] >> bitmap_fade;
            pix_blue = colourexpand2to6[ bitmap_B.rdata0 ] >> bitmap_fade;
            bitmap_display = 1;
        } else {
            bitmap_display = 0;
        }
    }
}

algorithm gpu(
    // GPU to SET and GET pixels
    output! int11 bitmap_x_write,
    output! int11 bitmap_y_write,
    output! uint7 bitmap_colour_write,
    output! uint2 bitmap_write,
    
    input int11 gpu_x,
    input int11 gpu_y,
    input uint8 gpu_colour,
    input int16 gpu_param0,
    input int16 gpu_param1,
    input int16 gpu_param2,
    input int16 gpu_param3,
    input uint3 gpu_write,
    
    output  uint4 gpu_active
) <autorun> {
    // 256 x 16 x 16 1 bit tilemap for blit1tilemap
    dualport_bram uint16 blit1tilemap[ 4096 ] = uninitialized;
    
    // GPU work variable storage
    // Present GPU pixel and colour
    int11 gpu_active_x = 0;
    int11 gpu_active_y = 0;
    uint7 gpu_active_colour = 0;
    
    // Temporary storage for GPU operations with meaningful names centre coordinates, end coordinates, width, height, deltas, radius, etc
    int11 gpu_xc = 0;
    int11 gpu_yc = 0;
    int11 gpu_x1 = 0;
    int11 gpu_y1 = 0;
    int11 gpu_x2 = 0;
    int11 gpu_y2 = 0;
    int11 gpu_w = 0;
    int11 gpu_h = 0;
    int11 gpu_dx1 = 0;
    int11 gpu_dx2 = 0;
    int11 gpu_dy1 = 0;
    int11 gpu_dy2 = 0;
    int11 gpu_longest = 0;
    int11 gpu_shortest = 0;
    int11 gpu_numerator = 0;
    int11 gpu_radius = 0;
    int11 gpu_count = 0;
    uint8 gpu_tile = 0;

    // blit1tilemap read access for the blit1tilemap
    blit1tilemap.addr0 := gpu_tile * 16 + gpu_active_y;
    blit1tilemap.wenable0 := 0;
        
    // blit1tilemap write access for the GPU to load tilemaps
    blit1tilemap.addr1 := gpu_param0 * 16 + gpu_param1;
    blit1tilemap.wdata1 := gpu_param2;
    blit1tilemap.wenable1 := 0;

    bitmap_write := 0;
    
    while(1) {
        switch( gpu_active ) {
            case 0: {
                // SETUP GPU 
                // gpu_write controls actions
                // 1 = plot pixel
                // 2 = draw rectangle
                // 3 = draw line
                // 4 = draw_circle
                // 5 = 1 bit 16x16 blit in gpu_colour from 1 bit 16x16 tilemap
                // 6 = 10 bit 16x16 blit from 10 bit 16x16 tilemap
                switch( gpu_write ) {
                    case 1: {
                        // Setup writing a pixel colour to x,y 
                        // Done directly, does not activate the GPU
                        bitmap_x_write = gpu_x;
                        bitmap_y_write = gpu_y;
                        bitmap_colour_write = gpu_colour;
                        bitmap_write = 1;
                    }
                    case 2: {
                        // Setup drawing a rectangle from x,y to param0,param1 in colour
                        // Ensures that works left to right, top to bottom
                        gpu_active_colour = gpu_colour;
                        gpu_active_x = ( gpu_x < gpu_param0 ) ? gpu_x : gpu_param0;                 // left
                        gpu_active_y = ( gpu_y < gpu_param1 ) ? gpu_y : gpu_param1;                 // top
                        gpu_x2 = ( gpu_x < gpu_param0 ) ? gpu_x : gpu_param0;                       // left - for next line
                        gpu_w = ( gpu_x < gpu_param0 ) ? gpu_param0 : gpu_x;                        // right - at end of line
                        gpu_h = ( gpu_y < gpu_param1 ) ? gpu_param1 : gpu_y;                        // bottom - at end of rectangle
                        gpu_active = 1; 
                    }
                    case 3: {
                        // Setup drawing a line from x,y to param0,param1 in colour
                        // Ensures that works left to right
                        gpu_active_colour = gpu_colour;
                        gpu_active_x = gpu_x;
                        gpu_active_y = gpu_y;
                        gpu_x2 = gpu_param0;
                        gpu_y2 = gpu_param1;
                        gpu_w = gpu_param0 - gpu_x;
                        gpu_h = gpu_param1 - gpu_y;
                        gpu_dx1 = 0;
                        gpu_dx2 = 0;
                        gpu_dy1 = 0;
                        gpu_dy2 = 0;
                        gpu_count = 0;
                        gpu_active = 2; 
                    }
                    case 4: {
                        // Setup drawing a circle centre x,y or radius param0 in colour
                        gpu_active_colour = gpu_colour;
                        gpu_active_x = 0;
                        gpu_active_y = gpu_param0;
                        gpu_xc = gpu_x;
                        gpu_yc = gpu_y;
                        gpu_numerator = 3 - ( 2 * gpu_param0 );
                        gpu_active = 6;
                    }
                    case 5: {
                        // Setup 1 bit 16x16 blitter starting at x,y in colour of tile param0
                        gpu_active_colour = gpu_colour;
                        gpu_active_x = 0;
                        gpu_active_y = 0;
                        gpu_x1 = gpu_x;
                        gpu_y1 = gpu_y;
                        gpu_w = 15;
                        gpu_h = 15;
                        gpu_tile = gpu_param0;                       
                        gpu_active = 14;
                    }
                    case 6: {
                        // Write to tilemap param0 line param1 value gpu_param2
                        // Done directly, does not activate the GPU
                        blit1tilemap.wenable1 = 1;
                    }
                    default: {}
                }
            }
            // Perform GPU Operation
            // GPU functions 1 pixel per cycle, even during hblank and vblank
            case 1: {
                // Rectangle of colour at x,y top left to param0, param1 bottom right
                bitmap_x_write = gpu_active_x;
                bitmap_y_write = gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                // Move to next pixel
                if( gpu_active_x == gpu_w ) {
                    // End of line
                    if( gpu_active_y == gpu_h ) {
                        // Reached bottom right
                        gpu_active = 0;
                    } else {
                        // Next line
                        gpu_active_y = gpu_active_y + 1;
                    }
                    gpu_active_x = gpu_x2;
                } else {
                    gpu_active_x = gpu_active_x + 1;
                }
            }
            case 2: {
                // Bresenham's Line Drawing Algorithm
                // Calculate deltas and longest, shortest
                gpu_longest = ( gpu_w < 0 ) ? -gpu_w : gpu_w ;
                gpu_shortest = ( gpu_h < 0 ) ? -gpu_h : gpu_h;
                if( gpu_w < 0 ) {
                    gpu_dx1 = -1;
                    gpu_dx2 = -1;
                } else {
                    if( gpu_w > 0 ) {
                        gpu_dx1 = 1;
                        gpu_dx2 = 1;
                    }
                }
                if( gpu_h < 0 ) {
                    gpu_dy1 = -1;
                } else {
                    if( gpu_h > 0 ) {
                        gpu_dy1 = 1;
                    }
                }
                gpu_active = 3;
            }
            case 3: {
                // Bresenham's Line Drawing Algorithm
                // Determine if steep or shallow
                if( (gpu_longest <= gpu_shortest) ) {
                    gpu_longest = gpu_shortest;
                    gpu_shortest = gpu_longest;
                } 
                gpu_active = 4;
            }
            case 4: {
                if( gpu_h < 0 ) {
                    gpu_dy2 = -1;
                } else {
                    if( gpu_h > 0 ) {
                        gpu_dy2 = 1;
                    }
                }
                gpu_numerator = gpu_longest >> 1;
                gpu_active = 5;
            }
            case 5: {
                // Bresenham's Line Drawing Algorithm
                // Draw the line
                bitmap_x_write = gpu_active_x;
                bitmap_y_write = gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                if( gpu_count == gpu_longest ) {
                    // FINISHED
                    gpu_active = 0;
                } else {
                    if( ~(gpu_numerator < gpu_longest) ) {
                        gpu_numerator = gpu_numerator + gpu_shortest - gpu_longest;
                        gpu_active_x = gpu_active_x + gpu_dx1;
                        gpu_active_y = gpu_active_y + gpu_dy1;
                    } else {
                        gpu_numerator = gpu_numerator + gpu_shortest;
                        gpu_active_x = gpu_active_x + gpu_dx2;
                        gpu_active_y = gpu_active_y + gpu_dy2;
                    }
                    gpu_count = gpu_count + 1;
                }
            }
            case 6: {
                // Bresenham's Circle Drawing Algorithm - Arc 0
                bitmap_x_write = gpu_xc + gpu_active_x;
                bitmap_y_write = gpu_yc + gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 7;
            }
            case 7: {
                // Bresenham's Circle Drawing Algorithm - Arc 1
                bitmap_x_write = gpu_xc - gpu_active_x;
                bitmap_y_write = gpu_yc + gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 8;
            }
            case 8: {
                // Bresenham's Circle Drawing Algorithm - Arc 2
                bitmap_x_write = gpu_xc + gpu_active_x;
                bitmap_y_write = gpu_yc - gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 9;
            }
            case 9: {
                // Bresenham's Circle Drawing Algorithm - Arc 3
                bitmap_x_write = gpu_xc - gpu_active_x;
                bitmap_y_write = gpu_yc - gpu_active_y;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 10;
            }
            case 10: {
                // Bresenham's Circle Drawing Algorithm - Arc 4
                bitmap_x_write = gpu_xc + gpu_active_y;
                bitmap_y_write = gpu_yc + gpu_active_x;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 11;
            }
            case 11: {
                // Bresenham's Circle Drawing Algorithm - Arc 5
                bitmap_x_write = gpu_xc - gpu_active_y;
                bitmap_y_write = gpu_yc + gpu_active_x;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 12;
            }
            case 12: {
                // Bresenham's Circle Drawing Algorithm - Arc 6
                bitmap_x_write = gpu_xc + gpu_active_y;
                bitmap_y_write = gpu_yc - gpu_active_x;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                gpu_active = 13;
            }
            case 13: {
                // Bresenham's Circle Drawing Algorithm - Arc 7
                bitmap_x_write = gpu_xc - gpu_active_y;
                bitmap_y_write = gpu_yc - gpu_active_x;
                bitmap_colour_write = gpu_active_colour;
                bitmap_write = 1;
                 if( gpu_active_y >= gpu_active_x ) {
                    gpu_active_x = gpu_active_x + 1;
                    if( gpu_numerator > 0 ) {
                        gpu_numerator = gpu_numerator + 4 * (gpu_active_x - gpu_active_y) + 10;
                        gpu_active_y = gpu_active_y - 1;
                    } else {
                        gpu_numerator = gpu_numerator + 4 * gpu_active_x + 6;
                    }
                    gpu_active = 6;
                } else {
                    gpu_active = 0;
                }
            }
            case 14: {
                // 1 bit blitter
                // delay to read 1 line from blit1tilemap memory
                gpu_active = 15;
            }
            case 15: {
                // 1 bit BLITTER
                // Draw pixel, move to next pixel
                if( (( blit1tilemap.rdata0 << gpu_active_x ) >> 15) & 1 ) {
                    bitmap_x_write = gpu_x1 + gpu_active_x;
                    bitmap_y_write = gpu_y1 + gpu_active_y;
                    bitmap_colour_write = gpu_active_colour;
                    bitmap_write = 1;
                }
                if( gpu_active_x < gpu_w ) {
                    gpu_active_x = gpu_active_x + 1;
                } else {
                    gpu_active_x = 0;
                    // Move to next line and fetch line from blit 1 bit tile map
                    if( gpu_active_y < gpu_h ) {
                        gpu_active_y = gpu_active_y + 1;
                        gpu_active = 14;
                    } else {
                        // FINISHED
                        gpu_active = 0;
                    }
                }
            }
            default: {gpu_active = 0;}
        }
    }
}


algorithm background(
    input   uint10  pix_x,
    input   uint10  pix_y,
    input   uint1   pix_active,
    input   uint1   pix_vblank,
    output! uint6 pix_red,
    output! uint6 pix_green,
    output! uint6 pix_blue,

    input uint6 backgroundcolour,
    input uint6 backgroundcolour_alt,
    input uint3 backgroundcolour_mode,
    input uint3 backgroundcolour_fade,
    input uint3 backgroundcolour_write
) <autorun> {
    // Expansion map for { rr } to { rrrrrr }, { gg } to { gggggg }, { bb } to { bbbbbb }
    // or { rr } tp { rrrrrrrr }, { gg } to { gggggggg }, { bb } to { bbbbbbbb }
    uint6 colourexpand2to6[4] = {  0, 21, 42, 63 };
    uint8 colourexpand2to8[4] = {  0, 85, 170, 255 };

    uint6 background = 0;
    uint6 background_alt = 0;
    uint3 background_mode = 0;
    uint3 background_fade = 0;
    
    always {
        switch( backgroundcolour_write ) {
            case 1: {
                background = backgroundcolour;
            }
            case 2: {
                background_alt = backgroundcolour_alt;
            }
            case 3: {
                background_mode = backgroundcolour_mode;
            }
            case 4: {
                background_fade = backgroundcolour_fade;
            }
            default: {}
        }
    }
    
    while(1) {
        switch( backgroundcolour_mode ) {
            case 0: {
                // SOLID
                pix_red = colourexpand2to6[ colour6(background).red ] >> background_fade;
                pix_green = colourexpand2to6[ colour6(background).green ] >> background_fade;
                pix_blue = colourexpand2to6[ colour6(background).blue ] >> background_fade;
            }
            default: {
                pix_red = 0;
                pix_green = 0;
                pix_blue = 0;
            }
        }
    }
}


import('../common/de10nano_clk_100_25.v')
import('../common/reset_conditioner.v')

// 10 bit colour either ALPHA (background or lower layer) or red, green, blue
bitfield colour7 {
    uint1   alpha,
    uint2   red,
    uint2   green, 
    uint2   blue
}

// 9bit colour red, green, blue
bitfield colour6 {
    uint2   red,
    uint2   green, 
    uint2   blue
}

algorithm multiplex_display(
    input   uint10 pix_x,
    input   uint10 pix_y,
    input   uint1  pix_active,
    input   uint1  pix_vblank,
    output! uint6 pix_red,
    output! uint6 pix_green,
    output! uint6 pix_blue,

    // Background
    input uint6 background_r,
    input uint6 background_g,
    input uint6 background_b,

    // Character Map and TPU
    input uint6 bitmap_r,
    input uint6 bitmap_g,
    input uint6 bitmap_b,
    input uint1   bitmap_display,

    // Character Map and TPU
    input uint6 character_map_r,
    input uint6 character_map_g,
    input uint6 character_map_b,
    input uint1   character_map_display,
    
    // Terminal
    input uint6 terminal_r,
    input uint6 terminal_g,
    input uint6 terminal_b,
    input uint1   terminal_display
) <autorun> {
    // RGB is { 0, 0, 0 } by default
    pix_red   := 0;
    pix_green := 0;
    pix_blue  := 0;
        
    // Draw the screen
    while (1) {
        // wait until pix_active THEN BACKGROUND -> BITMAP -> CHARACTER MAP -> TERMINAL
        if( pix_active ) {
            // BITMAP
            if( bitmap_display ) {
                pix_red = bitmap_r;
                pix_green = bitmap_g;
                pix_blue = bitmap_b;
            } else {
                // BACKGROUND
                pix_red = background_r;
                pix_green = background_g;
                pix_blue = background_b;
            }

            if( character_map_display ) {
                pix_red = character_map_r;
                pix_green = character_map_g;
                pix_blue = character_map_b;
            }
            
            if( terminal_display ) {
                pix_red = terminal_r;
                pix_green = terminal_g;
                pix_blue = terminal_b;
            }
        } // pix_active
    }
}

// J1+ CPU Starts here
// BITFIELDS to help with bit/field access

// Instruction is 3 bits 1xx = literal value, 000 = branch, 001 = 0branch, 010 = call, 011 = alu, followed by 13 bits of instruction specific data
bitfield instruction {
    uint3 is_litcallbranchalu,
    uint13 padding
}

// A literal instruction is 1 followed by a 15 bit UNSIGNED literal value
bitfield literal {
    uint1  is_literal,
    uint15 literalvalue
}

// A branch, 0branch or call instruction is 0 followed by 00 = branch, 01 = 0branch, 10 = call followed by 13bit target address 
bitfield callbranch {
    uint1  is_literal,
    uint2  is_callbranchalu,
    uint13 address
}
// An alu instruction is 0 (not literal) followed by 11 = alu
bitfield aluop {
    uint1   is_literal,
    uint2   is_callbranchalu,
    uint1   is_r2pc,                // return from subroutine
    uint4   operation,              // arithmetic / memory read/write operation to perform
    uint1   is_t2n,                 // top to next in stack
    uint1   is_t2r,                 // top to return stack
    uint1   is_n2memt,              // write to memory       
    uint1   is_j1j1plus,            // Original J1 or extra J1+ alu operations
    uint1   rdelta1,                // two's complement adjustment for rsp
    uint1   rdelta0,
    uint1   ddelta1,                // two's complement adjustment for dsp
    uint1   ddelta0
}

// Simplify access to high/low byte
bitfield bytes {
    uint8   byte1,
    uint8   byte0
}

// Simplify access to 4bit nibbles (used to extract shift left/right amount)
bitfield nibbles {
    uint4   nibble3,
    uint4   nibble2,
    uint4   nibble1,
    uint4   nibble0
}

// Create 1hz (1 second counter)
algorithm pulse1hz(
    output uint16 counter1hz
) <autorun>
{
  uint32 counter50mhz = 0;
  counter1hz = 0;
  while (1) {
        if ( counter50mhz == 50000000 ) {
            counter1hz   = counter1hz + 1;
            counter50mhz = 0;
        } else {
            counter50mhz = counter50mhz + 1;
        }
    }
}

algorithm main(
    // LEDS (8 of)
    output  uint8   leds,
    

    // UART
    output! uint1   uart_tx,
    input   uint1   uart_rx,

    // VGA/HDMI
    output! uint6 video_r,
    output! uint6 video_g,
    output! uint6 video_b,
    output! uint1   video_hs,
    output! uint1   video_vs
) {
    // SETUP Peripherals
    uint8 buttons = 0; // TODO

    uint16 timer1hz = 0;
    pulse1hz p1hz( counter1hz :> timer1hz );

    // UART tx and rx
    // UART written in Silice by https://github.com/sylefeb/Silice
    uart_out uo;
    uart_sender usend(
        io      <:> uo,
        uart_tx :>  uart_tx
    );

    uart_in ui;
    uart_receiver urecv(
        io      <:> ui,
        uart_rx <:  uart_rx
    );

    // VGA/HDMI Display
    uint1 video_reset = 0;
    uint1 video_clock = 0;
    uint1 sdram_clock = 0;
    uint1 pll_lock = 0;
    
    // Generate the 100MHz SDRAM and 25MHz VIDEO clocks
    de10nano_clk_100_25 clk_gen(
        refclk    <: clock,
        outclk_0  :> sdram_clock,
        outclk_1  :> video_clock,
        locked    :> pll_lock,
        rst       <: reset
    ); 

    // Video Reset
    reset_conditioner vga_rstcond (
        rcclk <: video_clock ,
        in  <: reset,
        out :> video_reset
    );

    // Status of the screen, if in range, if in vblank, actual pixel x and y
    uint1  active = 0;
    uint1  vblank = 0;
    uint10 pix_x  = 0;
    uint10 pix_y  = 0;

    // VGA or HDMI driver
    vga vga_driver <@video_clock,!video_reset>
    (
        vga_hs :> video_hs,
        vga_vs :> video_vs,
        active :> active,
        vblank :> vblank,
        vga_x  :> pix_x,
        vga_y  :> pix_y
    );

    // Background
    uint6   background_r = 0;
    uint6   background_g = 0;
    uint6   background_b = 0;
    background background_generator <@video_clock,!video_reset>
    (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> background_r,
        pix_green  :> background_g,
        pix_blue   :> background_b,
    );
    
    // Bitmap Window
    uint6   bitmap_r = 0;
    uint6   bitmap_g = 0;
    uint6   bitmap_b = 0;
    uint1               bitmap_display = 0;
    int11               bitmap_x_write = 0;
    int11               bitmap_y_write = 0;
    uint7               bitmap_colour_write = 0;
    uint2               bitmap_write = 0;

    gpu gpu_processor <@video_clock,!video_reset>
    (
        bitmap_x_write :> bitmap_x_write,
        bitmap_y_write :> bitmap_y_write,
        bitmap_colour_write :> bitmap_colour_write,
        bitmap_write :> bitmap_write
    );
    
    bitmap bitmap_window <@video_clock,!video_reset>
    (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> bitmap_r,
        pix_green  :> bitmap_g,
        pix_blue   :> bitmap_b,
        bitmap_display :> bitmap_display,
        bitmap_x_write <: bitmap_x_write,
        bitmap_y_write <: bitmap_y_write,
        bitmap_colour_write <: bitmap_colour_write,
        bitmap_write <: bitmap_write
    );

    // Character Map Window
    uint6   character_map_r = 0;
    uint6   character_map_g = 0;
    uint6   character_map_b = 0;
    uint1               character_map_display = 0;
    
    character_map character_map_window <@video_clock,!video_reset>
    (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> character_map_r,
        pix_green  :> character_map_g,
        pix_blue   :> character_map_b,
        character_map_display :> character_map_display
    );
    
    // Terminal window at the bottom of the screen
    uint6   terminal_r = 0;
    uint6   terminal_g = 0;
    uint6   terminal_b = 0;
    uint1               terminal_display = 0;
    
    terminal terminal_window <@video_clock,!video_reset>
    (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> terminal_r,
        pix_green  :> terminal_g,
        pix_blue   :> terminal_b,
        terminal_display :> terminal_display,
        timer1hz   <: timer1hz
    );
    
    multiplex_display display <@video_clock,!video_reset>
    (
        pix_x      <: pix_x,
        pix_y      <: pix_y,
        pix_active <: active,
        pix_vblank <: vblank,
        pix_red    :> video_r,
        pix_green  :> video_g,
        pix_blue   :> video_b,

        background_r <: background_r,
        background_g <: background_g,
        background_b <: background_b,
     
        bitmap_r <: bitmap_r,
        bitmap_g <: bitmap_g,
        bitmap_b <: bitmap_b,
        bitmap_display <: bitmap_display,
     
        character_map_r <: character_map_r,
        character_map_g <: character_map_g,
        character_map_b <: character_map_b,
        character_map_display <: character_map_display,
     
        terminal_r <: terminal_r,
        terminal_g <: terminal_g,
        terminal_b <: terminal_b,
        terminal_display <: terminal_display
    );

    // J1+ CPU
    // instruction being executed, plus decoding, including 5bit deltas for dsp and rsp expanded from 2bit encoded in the alu instruction
    uint16  instruction = uninitialized;
    uint16  immediate := ( literal(instruction).literalvalue );
    uint1   is_alu := ( instruction(instruction).is_litcallbranchalu == 3b011 );
    uint1   is_call := ( instruction(instruction).is_litcallbranchalu == 3b010 );
    uint1   is_lit := literal(instruction).is_literal;
    uint1   dstackWrite := ( is_lit | (is_alu & aluop(instruction).is_t2n) );
    uint1   rstackWrite := ( is_call | (is_alu & aluop(instruction).is_t2r) );
    uint8   ddelta := { {7{aluop(instruction).ddelta1}}, aluop(instruction).ddelta0 };
    uint8   rdelta := { {7{aluop(instruction).rdelta1}}, aluop(instruction).rdelta0 };
    
    // program counter
    uint13  pc = 0;
    uint13  pcPlusOne := pc + 1;
    uint13  newPC = uninitialized;

    // dstack 257x16bit (as 3256 array + stackTop) and pointer, next pointer, write line, delta
    bram uint16 dstack[256] = uninitialized; // bram (code from @sylefeb)
    uint16  stackTop = 0;
    uint8   dsp = 0;
    uint8   newDSP = uninitialized;
    uint16  newStackTop = uninitialized;

    // rstack 256x16bit and pointer, next pointer, write line
    bram uint16 rstack[256] = uninitialized; // bram (code from @sylefeb)
    uint8   rsp = 0;
    uint8   newRSP = uninitialized;
    uint16  rstackWData = uninitialized;

    uint16  stackNext = uninitialized;
    uint16  rStackTop = uninitialized;
    uint16  memoryInput = uninitialized;

    // 16bit ROM with included with compiled j1eForth developed from https://github.com/samawati/j1eforth
    dualport_bram uint16 ram_0[8192] = {
16h0D58,
16h0010,
16h0000,
16h0000,
16h0000,
16h7F00,
16h0F04,
16h0FE2,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h1FDA,
16h1FC2,
16h0952,
16h0964,
16h1A76,
16h0CC0,
16h0DAC,
16h14B8,
16h153A,
16h1562,
16h15CE,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h6003,
16h710C,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h6001,
16h700C,
16h6100,
16h700C,
16h404E,
16h005E,
16h404D,
16h005D,
16h404C,
16h005C,
16h404B,
16h005B,
16h404A,
16h005A,
16h4049,
16h0059,
16h4048,
16h0058,
16h4047,
16h0057,
16h4046,
16h0056,
16h4045,
16h0055,
16h4044,
16h0054,
16h4043,
16h0053,
16h4042,
16h0052,
16h4041,
16h0051,
16h4040,
16h0050,
16h700C,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h0000,
16h6E04,
16h6F6F,
16h0070,
16h700C,
16h0182,
16h2B01,
16h720F,
16h018C,
16h7803,
16h726F,
16h750F,
16h0192,
16h6103,
16h646E,
16h730F,
16h019A,
16h6F02,
16h0072,
16h740F,
16h01A2,
16h6906,
16h766E,
16h7265,
16h0074,
16h760C,
16h01AA,
16h3D01,
16h770F,
16h01B6,
16h3C01,
16h780F,
16h01BC,
16h7502,
16h003C,
16h7F0F,
16h01C2,
16h7304,
16h6177,
16h0070,
16h718C,
16h01CA,
16h7502,
16h003E,
16h771F,
16h01D4,
16h6403,
16h7075,
16h708D,
16h01DC,
16h6404,
16h6F72,
16h0070,
16h710F,
16h01E4,
16h6F04,
16h6576,
16h0072,
16h718D,
16h01EE,
16h6E03,
16h7069,
16h700F,
16h01F8,
16h6C06,
16h6873,
16h6669,
16h0074,
16h7D0F,
16h0200,
16h7206,
16h6873,
16h6669,
16h0074,
16h790F,
16h020C,
16h3102,
16h002D,
16h7A0C,
16h0218,
16h3E42,
16h0072,
16h6B8D,
16h6180,
16h6147,
16h6147,
16h700C,
16h0220,
16h7242,
16h003E,
16h6B8D,
16h6B8D,
16h6180,
16h6147,
16h700C,
16h0230,
16h7242,
16h0040,
16h6B8D,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h6147,
16h700C,
16h0240,
16h4001,
16h7C0C,
16h0254,
16h2101,
16h6023,
16h710F,
16h025A,
16h3C02,
16h003E,
16h721F,
16h0262,
16h3002,
16h003C,
16h781C,
16h026A,
16h3002,
16h003D,
16h701C,
16h0272,
16h3003,
16h3E3C,
16h711C,
16h027A,
16h3E01,
16h761F,
16h0282,
16h3002,
16h003E,
16h791C,
16h0288,
16h3E02,
16h003D,
16h7F1F,
16h0290,
16h7404,
16h6375,
16h006B,
16h6180,
16h718D,
16h0298,
16h2D04,
16h6F72,
16h0074,
16h6180,
16h6147,
16h6180,
16h6B8D,
16h700C,
16h02A4,
16h3202,
16h002F,
16h8001,
16h790F,
16h02B6,
16h3202,
16h002A,
16h741C,
16h02C0,
16h3102,
16h002B,
16h731C,
16h02C8,
16h7303,
16h4070,
16h6E81,
16h80FF,
16h730F,
16h02D0,
16h6507,
16h6578,
16h7563,
16h6574,
16h6147,
16h700C,
16h02DC,
16h6203,
16h6579,
16h8FFD,
16h6600,
16h6023,
16h710F,
16h02EA,
16h6302,
16h0040,
16h6081,
16h6C00,
16h6180,
16h8001,
16h6303,
16h2187,
16h8008,
16h6903,
16h0189,
16h80FF,
16h730F,
16h700C,
16h02F8,
16h6302,
16h0021,
16h6180,
16h80FF,
16h6303,
16h6081,
16h8008,
16h6D03,
16h6403,
16h6180,
16h414F,
16h6081,
16h6C00,
16h6180,
16h8001,
16h6303,
16h8000,
16h6703,
16h80FF,
16h6503,
16h6147,
16h6181,
16h6503,
16h6B8D,
16h6303,
16h6503,
16h6180,
16h6023,
16h710F,
16h0316,
16h7503,
16h2B6D,
16h6181,
16h6181,
16h6203,
16h6147,
16h6B81,
16h8000,
16h6F13,
16h6147,
16h6181,
16h6181,
16h6303,
16h6810,
16h6B8D,
16h6403,
16h6147,
16h6403,
16h6810,
16h6B8D,
16h6303,
16h6600,
16h6310,
16h6B8D,
16h718C,
16h0352,
16h6445,
16h766F,
16h7261,
16h6B8D,
16h700C,
16h0386,
16h7502,
16h0070,
16h41C6,
16h7E8C,
16h0392,
16h6446,
16h756F,
16h6573,
16h0072,
16h41CB,
16h6C00,
16h6B8D,
16h6C00,
16h720F,
16h039C,
16h6204,
16h7361,
16h0065,
16hFE80,
16h700C,
16h03B0,
16h7404,
16h6D65,
16h0070,
16hFE82,
16h700C,
16h03BC,
16h3E03,
16h6E69,
16hFE84,
16h700C,
16h03C8,
16h2304,
16h6974,
16h0062,
16hFE86,
16h700C,
16h03D2,
16h7403,
16h6269,
16hFE88,
16h700C,
16h03DE,
16h2705,
16h7665,
16h6C61,
16hFE8A,
16h700C,
16h03E8,
16h2706,
16h6261,
16h726F,
16h0074,
16hFE8C,
16h700C,
16h03F4,
16h6803,
16h646C,
16hFE8E,
16h700C,
16h0402,
16h6307,
16h6E6F,
16h6574,
16h7478,
16hFE90,
16h700C,
16h040C,
16h660E,
16h726F,
16h6874,
16h772D,
16h726F,
16h6C64,
16h7369,
16h0074,
16hFEA2,
16h700C,
16h041A,
16h6307,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h700C,
16h0430,
16h6402,
16h0070,
16hFEAC,
16h700C,
16h043E,
16h6C04,
16h7361,
16h0074,
16hFEAE,
16h700C,
16h0448,
16h2705,
16h6B3F,
16h7965,
16hFEB0,
16h700C,
16h0454,
16h2705,
16h6D65,
16h7469,
16hFEB2,
16h700C,
16h0460,
16h2705,
16h6F62,
16h746F,
16hFEB4,
16h700C,
16h046C,
16h2702,
16h005C,
16hFEB6,
16h700C,
16h0478,
16h2706,
16h616E,
16h656D,
16h003F,
16hFEB8,
16h700C,
16h0482,
16h2704,
16h2C24,
16h006E,
16hFEBA,
16h700C,
16h0490,
16h2706,
16h766F,
16h7265,
16h0074,
16hFEBC,
16h700C,
16h049C,
16h2702,
16h003B,
16hFEBE,
16h700C,
16h04AA,
16h2707,
16h7263,
16h6165,
16h6574,
16hFEC0,
16h700C,
16h04B4,
16h3F04,
16h7564,
16h0070,
16h6081,
16h2267,
16h708D,
16h700C,
16h04C2,
16h7203,
16h746F,
16h6147,
16h6180,
16h6B8D,
16h718C,
16h04D2,
16h3205,
16h7264,
16h706F,
16h6103,
16h710F,
16h04E0,
16h3204,
16h7564,
16h0070,
16h6181,
16h718D,
16h04EC,
16h6E06,
16h6765,
16h7461,
16h0065,
16h7D1C,
16h04F8,
16h6407,
16h656E,
16h6167,
16h6574,
16h6600,
16h6147,
16h6600,
16h8001,
16h41AB,
16h6B8D,
16h720F,
16h0504,
16h2D01,
16h6D10,
16h720F,
16h051C,
16h6103,
16h7362,
16h7A1C,
16h0524,
16h6D03,
16h7861,
16h7B1F,
16h052C,
16h6D03,
16h6E69,
16h7C1F,
16h0534,
16h7706,
16h7469,
16h6968,
16h006E,
16h6181,
16h428F,
16h6147,
16h428F,
16h6B8D,
16h7F0F,
16h053C,
16h7506,
16h2F6D,
16h6F6D,
16h0064,
16h4279,
16h6F03,
16h22D6,
16h6D10,
16h800F,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6B8D,
16h6203,
16h6081,
16h6B8D,
16h6B81,
16h6180,
16h6147,
16h41AB,
16h6B8D,
16h6403,
16h22CA,
16h6147,
16h6103,
16h6310,
16h6B8D,
16h02CB,
16h6103,
16h6B8D,
16h6B81,
16h22D2,
16h6B8D,
16h6A00,
16h6147,
16h02B3,
16h6B8D,
16h6103,
16h6103,
16h718C,
16h6103,
16h4273,
16h8000,
16h6600,
16h708D,
16h0552,
16h6D05,
16h6D2F,
16h646F,
16h6081,
16h6810,
16h6081,
16h6147,
16h22E8,
16h6D10,
16h6147,
16h4286,
16h6B8D,
16h6147,
16h6081,
16h6810,
16h22EE,
16h6B81,
16h6203,
16h6B8D,
16h42AD,
16h6B8D,
16h22F5,
16h6180,
16h6D10,
16h718C,
16h700C,
16h05B8,
16h2F04,
16h6F6D,
16h0064,
16h6181,
16h6810,
16h6180,
16h02DF,
16h05EE,
16h6D03,
16h646F,
16h42FA,
16h710F,
16h05FE,
16h2F01,
16h42FA,
16h700F,
16h0608,
16h7503,
16h2A6D,
16h8000,
16h6180,
16h800F,
16h6147,
16h6081,
16h41AB,
16h6147,
16h6147,
16h6081,
16h41AB,
16h6B8D,
16h6203,
16h6B8D,
16h231D,
16h6147,
16h6181,
16h41AB,
16h6B8D,
16h6203,
16h6B81,
16h2323,
16h6B8D,
16h6A00,
16h6147,
16h030E,
16h6B8D,
16h6103,
16h426B,
16h710F,
16h0610,
16h2A01,
16h430A,
16h710F,
16h0650,
16h6D02,
16h002A,
16h4279,
16h6503,
16h6810,
16h6147,
16h6A10,
16h6180,
16h6A10,
16h430A,
16h6B8D,
16h2339,
16h0286,
16h700C,
16h0658,
16h2A05,
16h6D2F,
16h646F,
16h6147,
16h432E,
16h6B8D,
16h02DF,
16h0676,
16h2A02,
16h002F,
16h433E,
16h700F,
16h0686,
16h6305,
16h6C65,
16h2B6C,
16h8002,
16h720F,
16h0690,
16h6305,
16h6C65,
16h2D6C,
16h8002,
16h028F,
16h069C,
16h6305,
16h6C65,
16h736C,
16h8001,
16h7D0F,
16h06A8,
16h6202,
16h006C,
16h8020,
16h700C,
16h06B4,
16h3E05,
16h6863,
16h7261,
16h807F,
16h6303,
16h6081,
16h807F,
16h435C,
16h42A2,
16h236B,
16h6103,
16h805F,
16h700C,
16h700C,
16h06BE,
16h2B02,
16h0021,
16h414F,
16h6C00,
16h6203,
16h6180,
16h6023,
16h710F,
16h06DC,
16h3202,
16h0021,
16h6180,
16h6181,
16h6023,
16h6103,
16h434B,
16h6023,
16h710F,
16h06EE,
16h3202,
16h0040,
16h6081,
16h434B,
16h6C00,
16h6180,
16h7C0C,
16h0702,
16h6305,
16h756F,
16h746E,
16h6081,
16h6310,
16h6180,
16h017E,
16h0712,
16h6804,
16h7265,
16h0065,
16hFEAC,
16h7C0C,
16h0722,
16h6107,
16h696C,
16h6E67,
16h6465,
16h6081,
16h8000,
16h8002,
16h42AD,
16h6103,
16h6081,
16h23A5,
16h8002,
16h6180,
16h428F,
16h720F,
16h072E,
16h6105,
16h696C,
16h6E67,
16h4394,
16h439B,
16hFEAC,
16h6023,
16h710F,
16h074E,
16h7003,
16h6461,
16h4394,
16h8050,
16h6203,
16h039B,
16h0760,
16h4008,
16h7865,
16h6365,
16h7475,
16h0065,
16h6C00,
16h4264,
16h23C0,
16h0172,
16h700C,
16h076E,
16h6604,
16h6C69,
16h006C,
16h6180,
16h6147,
16h6180,
16h03CC,
16h4279,
16h418D,
16h6310,
16h6B81,
16h23D2,
16h6B8D,
16h6A00,
16h6147,
16h03C9,
16h6B8D,
16h6103,
16h0273,
16h0784,
16h6505,
16h6172,
16h6573,
16h8000,
16h03C5,
16h07AC,
16h6405,
16h6769,
16h7469,
16h8009,
16h6181,
16h6803,
16h8007,
16h6303,
16h6203,
16h8030,
16h720F,
16h07B8,
16h6507,
16h7478,
16h6172,
16h7463,
16h8000,
16h6180,
16h42AD,
16h6180,
16h03DF,
16h07D0,
16h3C02,
16h0023,
16h43B2,
16hFE8E,
16h6023,
16h710F,
16h07E4,
16h6804,
16h6C6F,
16h0064,
16hFE8E,
16h6C00,
16h6A00,
16h6081,
16hFE8E,
16h6023,
16h6103,
16h018D,
16h07F2,
16h2301,
16hFE80,
16h6C00,
16h43EC,
16h03FC,
16h080A,
16h2302,
16h0073,
16h4406,
16h6081,
16h2411,
16h040D,
16h700C,
16h0816,
16h7304,
16h6769,
16h006E,
16h6810,
16h241A,
16h802D,
16h03FC,
16h700C,
16h0826,
16h2302,
16h003E,
16h6103,
16hFE8E,
16h6C00,
16h43B2,
16h6181,
16h028F,
16h0838,
16h7303,
16h7274,
16h6081,
16h6147,
16h6A10,
16h43F4,
16h440D,
16h6B8D,
16h4416,
16h041E,
16h084A,
16h6803,
16h7865,
16h8010,
16hFE80,
16h6023,
16h710F,
16h0860,
16h6407,
16h6365,
16h6D69,
16h6C61,
16h800A,
16hFE80,
16h6023,
16h710F,
16h086E,
16h6406,
16h6769,
16h7469,
16h003F,
16h6147,
16h8030,
16h428F,
16h8009,
16h6181,
16h6803,
16h2457,
16h6081,
16h8020,
16h6613,
16h2451,
16h8020,
16h428F,
16h8007,
16h428F,
16h6081,
16h800A,
16h6803,
16h6403,
16h6081,
16h6B8D,
16h7F0F,
16h0880,
16h6E07,
16h6D75,
16h6562,
16h3F72,
16hFE80,
16h6C00,
16h6147,
16h8000,
16h6181,
16h438C,
16h6181,
16h417E,
16h8024,
16h6703,
16h246F,
16h4432,
16h6180,
16h6310,
16h6180,
16h6A00,
16h6181,
16h417E,
16h802D,
16h6703,
16h6147,
16h6180,
16h6B81,
16h428F,
16h6180,
16h6B81,
16h6203,
16h4264,
16h24A0,
16h6A00,
16h6147,
16h6081,
16h6147,
16h417E,
16hFE80,
16h6C00,
16h4444,
16h249A,
16h6180,
16hFE80,
16h6C00,
16h4329,
16h6203,
16h6B8D,
16h6310,
16h6B81,
16h2492,
16h6B8D,
16h6A00,
16h6147,
16h047E,
16h6B8D,
16h6103,
16h6B81,
16h6003,
16h2498,
16h6D10,
16h6180,
16h049F,
16h6B8D,
16h6B8D,
16h4273,
16h4273,
16h8000,
16h6081,
16h6B8D,
16h4273,
16h6B8D,
16hFE80,
16h6023,
16h710F,
16h08B6,
16h3F03,
16h7872,
16h8FFE,
16h6600,
16h6C00,
16h8001,
16h6303,
16h711C,
16h094E,
16h7403,
16h2178,
16h8FFE,
16h6600,
16h6C00,
16h8002,
16h6303,
16h6010,
16h24B2,
16h6081,
16h8FFF,
16h6600,
16h6023,
16h6103,
16h80DF,
16h6600,
16h6C00,
16h6010,
16h24BE,
16h80DF,
16h6600,
16h6023,
16h6103,
16h80DF,
16h6600,
16h6C00,
16h6010,
16h24C7,
16h700C,
16h0960,
16h3F04,
16h656B,
16h0079,
16hFEB0,
16h03BC,
16h099C,
16h6504,
16h696D,
16h0074,
16hFEB2,
16h03BC,
16h09A8,
16h6B03,
16h7965,
16h44D1,
16h24DC,
16h8FFF,
16h6600,
16h7C0C,
16h09B4,
16h6E04,
16h6675,
16h003F,
16h44D1,
16h6081,
16h24EC,
16h6103,
16h44DC,
16h800D,
16h770F,
16h700C,
16h09C4,
16h7406,
16h6D69,
16h7265,
16h0040,
16h8FFB,
16h6600,
16h7C0C,
16h09DC,
16h6C04,
16h6465,
16h0040,
16h8FFD,
16h6600,
16h7C0C,
16h09EC,
16h6C04,
16h6465,
16h0021,
16h8FFD,
16h6600,
16h6023,
16h710F,
16h09FA,
16h6208,
16h7475,
16h6F74,
16h736E,
16h0040,
16h8FFC,
16h6600,
16h7C0C,
16h0A0A,
16h7305,
16h6170,
16h6563,
16h435C,
16h04D7,
16h0A1C,
16h7306,
16h6170,
16h6563,
16h0073,
16h8000,
16h6B13,
16h6147,
16h051D,
16h4511,
16h6B81,
16h2523,
16h6B8D,
16h6A00,
16h6147,
16h051C,
16h6B8D,
16h710F,
16h0A28,
16h7404,
16h7079,
16h0065,
16h6147,
16h052D,
16h438C,
16h44D7,
16h6B81,
16h2533,
16h6B8D,
16h6A00,
16h6147,
16h052B,
16h6B8D,
16h6103,
16h710F,
16h0A4C,
16h6302,
16h0072,
16h800D,
16h44D7,
16h800A,
16h04D7,
16h0A6E,
16h6443,
16h246F,
16h6B8D,
16h6B81,
16h6B8D,
16h438C,
16h6203,
16h439B,
16h6147,
16h6180,
16h6147,
16h700C,
16h0A7C,
16h2443,
16h7C22,
16h4540,
16h700C,
16h0A96,
16h2E02,
16h0024,
16h438C,
16h0529,
16h0AA0,
16h2E43,
16h7C22,
16h4540,
16h0552,
16h0AAA,
16h2E02,
16h0072,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h4518,
16h0529,
16h0AB4,
16h7503,
16h722E,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h4518,
16h0529,
16h0AC8,
16h7502,
16h002E,
16h43F4,
16h440D,
16h441E,
16h4511,
16h0529,
16h0AE0,
16h2E01,
16hFE80,
16h6C00,
16h800A,
16h6503,
16h257F,
16h0572,
16h4427,
16h4511,
16h0529,
16h0AF0,
16h2E02,
16h0023,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h4579,
16hFE80,
16h6023,
16h710F,
16h0B06,
16h7503,
16h232E,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h43F4,
16h440D,
16h441E,
16h4511,
16h4529,
16hFE80,
16h6023,
16h710F,
16h0B1C,
16h7504,
16h722E,
16h0023,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h4518,
16h4529,
16hFE80,
16h6023,
16h710F,
16h0B3A,
16h2E03,
16h2372,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h4518,
16h4529,
16hFE80,
16h6023,
16h710F,
16h0B64,
16h6305,
16h6F6D,
16h6576,
16h6147,
16h05D1,
16h6147,
16h6081,
16h417E,
16h6B81,
16h418D,
16h6310,
16h6B8D,
16h6310,
16h6B81,
16h25D7,
16h6B8D,
16h6A00,
16h6147,
16h05C9,
16h6B8D,
16h6103,
16h0273,
16h0B88,
16h7005,
16h6361,
16h246B,
16h6081,
16h6147,
16h4279,
16h6023,
16h6103,
16h6310,
16h6180,
16h45C7,
16h6B8D,
16h700C,
16h0BB6,
16h3F01,
16h6C00,
16h0579,
16h0BD2,
16h2807,
16h6170,
16h7372,
16h2965,
16hFE82,
16h6023,
16h6103,
16h6181,
16h6147,
16h6081,
16h263C,
16h6A00,
16hFE82,
16h6C00,
16h435C,
16h6703,
16h2618,
16h6147,
16h438C,
16hFE82,
16h6C00,
16h6180,
16h428F,
16h6810,
16h6600,
16h6B81,
16h6910,
16h6303,
16h2616,
16h6B81,
16h2610,
16h6B8D,
16h6A00,
16h6147,
16h05FF,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h8000,
16h708D,
16h6A00,
16h6B8D,
16h6181,
16h6180,
16h6147,
16h438C,
16hFE82,
16h6C00,
16h6180,
16h428F,
16hFE82,
16h6C00,
16h435C,
16h6703,
16h2626,
16h6810,
16h2632,
16h6B81,
16h262D,
16h6B8D,
16h6A00,
16h6147,
16h061B,
16h6B8D,
16h6103,
16h6081,
16h6147,
16h0637,
16h6B8D,
16h6103,
16h6081,
16h6147,
16h6A00,
16h6181,
16h428F,
16h6B8D,
16h6B8D,
16h028F,
16h6181,
16h6B8D,
16h028F,
16h0BDA,
16h7005,
16h7261,
16h6573,
16h6147,
16hFE88,
16h6C00,
16hFE84,
16h6C00,
16h6203,
16hFE86,
16h6C00,
16hFE84,
16h6C00,
16h428F,
16h6B8D,
16h45F1,
16hFE84,
16h0370,
16h0C80,
16h2E82,
16h0028,
16h8029,
16h4643,
16h0529,
16h0CA6,
16h2881,
16h8029,
16h4643,
16h0273,
16h0CB2,
16h3C83,
16h3E5C,
16hFE86,
16h6C00,
16hFE84,
16h6023,
16h710F,
16h0CBC,
16h5C81,
16hFEB6,
16h03BC,
16h0CCC,
16h7704,
16h726F,
16h0064,
16h4643,
16h4394,
16h434B,
16h05DE,
16h0CD4,
16h7405,
16h6B6F,
16h6E65,
16h435C,
16h066D,
16h0CE4,
16h6E05,
16h6D61,
16h3E65,
16h438C,
16h801F,
16h6303,
16h6203,
16h039B,
16h0CF0,
16h7305,
16h6D61,
16h3F65,
16h6A00,
16h6147,
16h0694,
16h6181,
16h6B81,
16h6203,
16h417E,
16h6181,
16h6B81,
16h6203,
16h417E,
16h428F,
16h4264,
16h2694,
16h6B8D,
16h710F,
16h6B81,
16h269A,
16h6B8D,
16h6A00,
16h6147,
16h0687,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h0D02,
16h6604,
16h6E69,
16h0064,
16h6180,
16h6081,
16h417E,
16hFE82,
16h6023,
16h6103,
16h6081,
16h6C00,
16h6147,
16h434B,
16h6180,
16h6C00,
16h6081,
16h26C0,
16h6081,
16h6C00,
16hFF1F,
16h6303,
16h6B81,
16h6503,
16h26BB,
16h434B,
16h8000,
16h6600,
16h06BF,
16h434B,
16hFE82,
16h6C00,
16h4684,
16h06C5,
16h6B8D,
16h6103,
16h6180,
16h4351,
16h718C,
16h26CA,
16h8002,
16h4357,
16h428F,
16h06AD,
16h6B8D,
16h6103,
16h6003,
16h4351,
16h6081,
16h467B,
16h718C,
16h0D3E,
16h3C07,
16h616E,
16h656D,
16h3E3F,
16hFE90,
16h6081,
16h4383,
16h6503,
16h26DC,
16h4351,
16h6147,
16h6B8D,
16h434B,
16h6081,
16h6147,
16h6C00,
16h4264,
16h26E9,
16h46A2,
16h4264,
16h26DD,
16h6B8D,
16h710F,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h0DA4,
16h6E05,
16h6D61,
16h3F65,
16hFEB8,
16h03BC,
16h0DDC,
16h5E02,
16h0068,
16h6147,
16h6181,
16h6B81,
16h6803,
16h6081,
16h2701,
16h8008,
16h6081,
16h44D7,
16h4511,
16h44D7,
16h6B8D,
16h720F,
16h0DE8,
16h7403,
16h7061,
16h6081,
16h44D7,
16h6181,
16h418D,
16h731C,
16h0E08,
16h6B04,
16h6174,
16h0070,
16h6081,
16h800D,
16h6503,
16h2719,
16h8008,
16h6503,
16h2718,
16h435C,
16h0706,
16h06F6,
16h6103,
16h6003,
16h708D,
16h0E18,
16h6106,
16h6363,
16h7065,
16h0074,
16h6181,
16h6203,
16h6181,
16h4279,
16h6503,
16h2732,
16h44DC,
16h6081,
16h435C,
16h428F,
16h807F,
16h6F03,
16h2730,
16h4706,
16h0731,
16h470F,
16h0724,
16h6103,
16h6181,
16h028F,
16h0E3A,
16h7105,
16h6575,
16h7972,
16hFE88,
16h6C00,
16h8050,
16h4721,
16hFE86,
16h6023,
16h6103,
16h6103,
16h8000,
16hFE84,
16h6023,
16h710F,
16h0E6C,
16h6106,
16h6F62,
16h7472,
16h0032,
16h4540,
16h710F,
16h0E8C,
16h6106,
16h6F62,
16h7472,
16h0031,
16h4511,
16h4552,
16h803F,
16h44D7,
16h4539,
16hFE8C,
16h43BC,
16h074A,
16h0E9A,
16h3C49,
16h613F,
16h6F62,
16h7472,
16h3E22,
16h2762,
16h4540,
16h0751,
16h074A,
16h0EB4,
16h6606,
16h726F,
16h6567,
16h0074,
16h4675,
16h46F1,
16h4264,
16h277A,
16h4351,
16h6081,
16hFEAC,
16h6023,
16h6103,
16h6C00,
16h6081,
16hFE90,
16h6023,
16h6103,
16hFEAE,
16h6023,
16h6103,
16h710F,
16h0751,
16h0EC8,
16h240A,
16h6E69,
16h6574,
16h7072,
16h6572,
16h0074,
16h46F1,
16h4264,
16h2792,
16h6C00,
16h8040,
16h6303,
16h475F,
16h630C,
16h6D6F,
16h6970,
16h656C,
16h6F2D,
16h6C6E,
16h0079,
16h0172,
16h0796,
16h445F,
16h2795,
16h700C,
16h0751,
16h0EF8,
16h5B81,
16h8F04,
16hFE8A,
16h6023,
16h710F,
16h0F2E,
16h2E03,
16h6B6F,
16h8F04,
16hFE8A,
16h6C00,
16h6703,
16h27A7,
16h4557,
16h2003,
16h6B6F,
16h0539,
16h0F3A,
16h6504,
16h6176,
16h006C,
16h4675,
16h6081,
16h417E,
16h27B3,
16hFE8A,
16h43BC,
16h07AC,
16h6103,
16h079F,
16h0F52,
16h2445,
16h7665,
16h6C61,
16hFE84,
16h6C00,
16h6147,
16hFE86,
16h6C00,
16h6147,
16hFE88,
16h6C00,
16h6147,
16hFE84,
16h8000,
16h6180,
16h6023,
16h6103,
16hFE86,
16h6023,
16h6103,
16hFE88,
16h6023,
16h6103,
16h47AC,
16h6B8D,
16hFE88,
16h6023,
16h6103,
16h6B8D,
16hFE86,
16h6023,
16h6103,
16h6B8D,
16hFE84,
16h6023,
16h710F,
16h0F6C,
16h7006,
16h6572,
16h6573,
16h0074,
16hFF00,
16hFE86,
16h434B,
16h6023,
16h710F,
16h0FB6,
16h7104,
16h6975,
16h0074,
16h4798,
16h4739,
16h47AC,
16h07E9,
16h700C,
16h0FCA,
16h6105,
16h6F62,
16h7472,
16h6103,
16h47DF,
16h479F,
16h07E8,
16h0FDC,
16h2701,
16h4675,
16h46F1,
16h27FB,
16h700C,
16h0751,
16h0FEC,
16h6105,
16h6C6C,
16h746F,
16h439B,
16hFEAC,
16h0370,
16h0FFA,
16h2C01,
16h4394,
16h6081,
16h434B,
16hFEAC,
16h6023,
16h6103,
16h6023,
16h710F,
16h1008,
16h6345,
16h6C61,
16h2C6C,
16h8001,
16h6903,
16hC000,
16h6403,
16h0805,
16h101C,
16h3F47,
16h7262,
16h6E61,
16h6863,
16h8001,
16h6903,
16hA000,
16h6403,
16h0805,
16h102E,
16h6246,
16h6172,
16h636E,
16h0068,
16h8001,
16h6903,
16h8000,
16h6403,
16h0805,
16h1042,
16h5B89,
16h6F63,
16h706D,
16h6C69,
16h5D65,
16h47F7,
16h0811,
16h1056,
16h6347,
16h6D6F,
16h6970,
16h656C,
16h6B8D,
16h6081,
16h6C00,
16h4805,
16h434B,
16h6147,
16h700C,
16h1066,
16h7287,
16h6365,
16h7275,
16h6573,
16hFEAE,
16h6C00,
16h467B,
16h0811,
16h107E,
16h7004,
16h6369,
16h006B,
16h6081,
16h6410,
16h6410,
16h80C0,
16h6203,
16h6147,
16h700C,
16h1090,
16h6C87,
16h7469,
16h7265,
16h6C61,
16h6081,
16hFFFF,
16h6600,
16h6303,
16h2863,
16h8000,
16h6600,
16h6503,
16h4857,
16h4837,
16h6600,
16h0867,
16hFFFF,
16h6600,
16h6403,
16h0805,
16h700C,
16h10A6,
16h5B83,
16h5D27,
16h47F7,
16h0857,
16h10D2,
16h2403,
16h222C,
16h8022,
16h4643,
16h4394,
16h45DE,
16h438C,
16h6203,
16h439B,
16hFEAC,
16h6023,
16h710F,
16h10DC,
16h66C3,
16h726F,
16h4837,
16h4112,
16h0394,
16h10F6,
16h62C5,
16h6765,
16h6E69,
16h0394,
16h1102,
16h2846,
16h656E,
16h7478,
16h0029,
16h6B8D,
16h6B8D,
16h4264,
16h2893,
16h6A00,
16h6147,
16h6C00,
16h6147,
16h700C,
16h434B,
16h6147,
16h700C,
16h110C,
16h6EC4,
16h7865,
16h0074,
16h4837,
16h488A,
16h0805,
16h112E,
16h2844,
16h6F64,
16h0029,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h426B,
16h6147,
16h6147,
16h434B,
16h6147,
16h700C,
16h113C,
16h64C2,
16h006F,
16h4837,
16h48A1,
16h8000,
16h4805,
16h0394,
16h1158,
16h2847,
16h656C,
16h7661,
16h2965,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6B8D,
16h710F,
16h1168,
16h6CC5,
16h6165,
16h6576,
16h4837,
16h48B8,
16h700C,
16h117E,
16h2846,
16h6F6C,
16h706F,
16h0029,
16h6B8D,
16h6B8D,
16h6310,
16h6B8D,
16h4279,
16h6213,
16h28D6,
16h6147,
16h6147,
16h6C00,
16h6147,
16h700C,
16h6147,
16h6A00,
16h6147,
16h434B,
16h6147,
16h700C,
16h118C,
16h2848,
16h6E75,
16h6F6C,
16h706F,
16h0029,
16h6B8D,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6B8D,
16h6103,
16h6147,
16h700C,
16h11BA,
16h75C6,
16h6C6E,
16h6F6F,
16h0070,
16h4837,
16h48E2,
16h700C,
16h11D8,
16h2845,
16h643F,
16h296F,
16h4279,
16h6213,
16h2904,
16h6B8D,
16h6081,
16h6147,
16h6180,
16h426B,
16h6147,
16h6147,
16h434B,
16h6147,
16h700C,
16h0273,
16h700C,
16h11E8,
16h3FC3,
16h6F64,
16h4837,
16h48F7,
16h8000,
16h4805,
16h0394,
16h120E,
16h6CC4,
16h6F6F,
16h0070,
16h4837,
16h48CA,
16h6081,
16h4805,
16h4837,
16h48E2,
16h4351,
16h4394,
16h8001,
16h6903,
16h6180,
16h6023,
16h710F,
16h121E,
16h2847,
16h6C2B,
16h6F6F,
16h2970,
16h6B8D,
16h6180,
16h6B8D,
16h6B8D,
16h4279,
16h428F,
16h6147,
16h8002,
16h484B,
16h6B81,
16h6203,
16h6B81,
16h6503,
16h6810,
16h6010,
16h8003,
16h484B,
16h6B8D,
16h6503,
16h6810,
16h6010,
16h6403,
16h2941,
16h6147,
16h6203,
16h6147,
16h6C00,
16h6147,
16h700C,
16h6147,
16h6147,
16h6103,
16h434B,
16h6147,
16h700C,
16h1240,
16h2BC5,
16h6F6C,
16h706F,
16h4837,
16h4924,
16h6081,
16h4805,
16h4837,
16h48E2,
16h4351,
16h4394,
16h8001,
16h6903,
16h6180,
16h6023,
16h710F,
16h1290,
16h2843,
16h2969,
16h6B8D,
16h6B8D,
16h414F,
16h6147,
16h6147,
16h700C,
16h12B2,
16h69C1,
16h4837,
16h495B,
16h700C,
16h12C4,
16h75C5,
16h746E,
16h6C69,
16h081B,
16h12CE,
16h61C5,
16h6167,
16h6E69,
16h0825,
16h12D8,
16h69C2,
16h0066,
16h4394,
16h8000,
16h081B,
16h12E2,
16h74C4,
16h6568,
16h006E,
16h4394,
16h8001,
16h6903,
16h6181,
16h6C00,
16h6403,
16h6180,
16h6023,
16h710F,
16h12EE,
16h72C6,
16h7065,
16h6165,
16h0074,
16h4825,
16h097A,
16h1308,
16h73C4,
16h696B,
16h0070,
16h4394,
16h8000,
16h0825,
16h1316,
16h61C3,
16h7466,
16h6103,
16h498E,
16h4884,
16h718C,
16h1324,
16h65C4,
16h736C,
16h0065,
16h498E,
16h6180,
16h097A,
16h1332,
16h77C5,
16h6968,
16h656C,
16h4973,
16h718C,
16h1340,
16h2846,
16h6163,
16h6573,
16h0029,
16h6B8D,
16h6180,
16h6147,
16h6147,
16h700C,
16h134C,
16h63C4,
16h7361,
16h0065,
16h4837,
16h49AA,
16h8030,
16h700C,
16h1360,
16h2844,
16h666F,
16h0029,
16h6B8D,
16h6B81,
16h6180,
16h6147,
16h770F,
16h1370,
16h6FC2,
16h0066,
16h4837,
16h49BB,
16h0973,
16h1382,
16h65C5,
16h646E,
16h666F,
16h499C,
16h8031,
16h700C,
16h138E,
16h2809,
16h6E65,
16h6364,
16h7361,
16h2965,
16h6B8D,
16h6B8D,
16h6103,
16h6147,
16h700C,
16h139C,
16h65C7,
16h646E,
16h6163,
16h6573,
16h6081,
16h8031,
16h6703,
16h29E4,
16h6103,
16h497A,
16h09DD,
16h8030,
16h6213,
16h475F,
16h6213,
16h6461,
16h6320,
16h7361,
16h2065,
16h6F63,
16h736E,
16h7274,
16h6375,
16h2E74,
16h4837,
16h49D3,
16h700C,
16h13B2,
16h24C2,
16h0022,
16h4837,
16h454D,
16h0870,
16h13EA,
16h2EC2,
16h0022,
16h4837,
16h4557,
16h0870,
16h13F6,
16h3E05,
16h6F62,
16h7964,
16h034B,
16h1402,
16h2844,
16h6F74,
16h0029,
16h6B8D,
16h6081,
16h434B,
16h6147,
16h6C00,
16h6023,
16h710F,
16h140C,
16h74C2,
16h006F,
16h4837,
16h4A09,
16h47F7,
16h4A04,
16h0805,
16h1422,
16h2845,
16h742B,
16h296F,
16h6B8D,
16h6081,
16h434B,
16h6147,
16h6C00,
16h0370,
16h1432,
16h2BC3,
16h6F74,
16h4837,
16h4A1C,
16h47F7,
16h4A04,
16h0805,
16h1446,
16h670B,
16h7465,
16h632D,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h7C0C,
16h1456,
16h730B,
16h7465,
16h632D,
16h7275,
16h6572,
16h746E,
16hFEA8,
16h6023,
16h710F,
16h1468,
16h640B,
16h6665,
16h6E69,
16h7469,
16h6F69,
16h736E,
16hFE90,
16h6C00,
16h0A3A,
16h147C,
16h3F07,
16h6E75,
16h7169,
16h6575,
16h6081,
16h4A31,
16h46A2,
16h2A57,
16h4557,
16h2007,
16h6572,
16h6564,
16h2066,
16h6181,
16h4552,
16h710F,
16h1490,
16h3C05,
16h2C24,
16h3E6E,
16h6081,
16h417E,
16h2A71,
16h4A4C,
16h6081,
16h438C,
16h6203,
16h439B,
16hFEAC,
16h6023,
16h6103,
16h6081,
16hFEAE,
16h6023,
16h6103,
16h4351,
16h4A31,
16h6C00,
16h6180,
16h6023,
16h710F,
16h6103,
16h454D,
16h6E04,
16h6D61,
16h0065,
16h0751,
16h14B2,
16h2403,
16h6E2C,
16hFEBA,
16h03BC,
16h14F0,
16h2408,
16h6F63,
16h706D,
16h6C69,
16h0065,
16h46F1,
16h4264,
16h2A8C,
16h6C00,
16h8080,
16h6303,
16h2A8B,
16h0172,
16h0A8C,
16h0811,
16h445F,
16h2A8F,
16h0857,
16h0751,
16h14FA,
16h6186,
16h6F62,
16h7472,
16h0022,
16h4837,
16h475F,
16h0870,
16h1522,
16h3C07,
16h766F,
16h7265,
16h3E74,
16hFEAE,
16h6C00,
16h4A31,
16h6023,
16h710F,
16h1532,
16h6F05,
16h6576,
16h7472,
16hFEBC,
16h03BC,
16h1546,
16h6504,
16h6978,
16h0074,
16h6B8D,
16h710F,
16h1552,
16h3CC3,
16h3E3B,
16h4837,
16h4AAC,
16h4798,
16h4AA6,
16h8000,
16h4394,
16h6023,
16h710F,
16h155E,
16h3BC1,
16hFEBE,
16h03BC,
16h1574,
16h5D01,
16h9504,
16hFE8A,
16h6023,
16h710F,
16h157C,
16h3A01,
16h4675,
16h4A7A,
16h0ABF,
16h1588,
16h6909,
16h6D6D,
16h6465,
16h6169,
16h6574,
16h8080,
16hFEAE,
16h6C00,
16h6C00,
16h6403,
16hFEAE,
16h6C00,
16h6023,
16h710F,
16h1592,
16h7504,
16h6573,
16h0072,
16h4675,
16h4A7A,
16h4AA6,
16h4837,
16h41D2,
16h0805,
16h15B0,
16h3C08,
16h7263,
16h6165,
16h6574,
16h003E,
16h4675,
16h4A7A,
16h4AA6,
16h838C,
16h0811,
16h15C4,
16h6306,
16h6572,
16h7461,
16h0065,
16hFEC0,
16h03BC,
16h15DA,
16h7608,
16h7261,
16h6169,
16h6C62,
16h0065,
16h4AF1,
16h8000,
16h0805,
16h15E8,
16h3209,
16h6176,
16h6972,
16h6261,
16h656C,
16h4AF1,
16h8000,
16h4805,
16h8001,
16h4357,
16h0800,
16h15FA,
16h2847,
16h6F64,
16h7365,
16h293E,
16h6B8D,
16h8001,
16h6903,
16h4394,
16h8001,
16h6903,
16hFEAE,
16h6C00,
16h467B,
16h6081,
16h434B,
16hFFFF,
16h6600,
16h6403,
16h4805,
16h6023,
16h6103,
16h0805,
16h1612,
16h630C,
16h6D6F,
16h6970,
16h656C,
16h6F2D,
16h6C6E,
16h0079,
16h8040,
16hFEAE,
16h6C00,
16h6C00,
16h6403,
16hFEAE,
16h6C00,
16h6023,
16h710F,
16h1640,
16h6485,
16h656F,
16h3E73,
16h4837,
16h4B0D,
16h700C,
16h1662,
16h6304,
16h6168,
16h0072,
16h435C,
16h466D,
16h6310,
16h017E,
16h1670,
16h5B86,
16h6863,
16h7261,
16h005D,
16h4B3B,
16h0857,
16h1680,
16h6308,
16h6E6F,
16h7473,
16h6E61,
16h0074,
16h4AF1,
16h4805,
16h4B0D,
16h7C0C,
16h168E,
16h6405,
16h6665,
16h7265,
16h4AF1,
16h8000,
16h4805,
16h4B0D,
16h6C00,
16h4264,
16h8000,
16h6703,
16h475F,
16h750D,
16h696E,
16h696E,
16h6974,
16h6C61,
16h7A69,
16h6465,
16h0172,
16h16A2,
16h6982,
16h0073,
16h47F7,
16h4A04,
16h6023,
16h710F,
16h16CC,
16h2E03,
16h6469,
16h4264,
16h2B75,
16h438C,
16h801F,
16h6303,
16h0529,
16h4539,
16h4557,
16h7B08,
16h6F6E,
16h616E,
16h656D,
16h007D,
16h700C,
16h16DA,
16h7708,
16h726F,
16h6C64,
16h7369,
16h0074,
16h43AA,
16h4394,
16h8000,
16h4805,
16h6081,
16hFEA8,
16h434B,
16h6081,
16h6C00,
16h4805,
16h6023,
16h6103,
16h8000,
16h0805,
16h16FC,
16h6F06,
16h6472,
16h7265,
16h0040,
16h6081,
16h6C00,
16h6081,
16h2BA0,
16h6147,
16h434B,
16h4B96,
16h6B8D,
16h6180,
16h731C,
16h700F,
16h1724,
16h6709,
16h7465,
16h6F2D,
16h6472,
16h7265,
16hFE90,
16h0B96,
16h1744,
16h3E04,
16h6977,
16h0064,
16h034B,
16h1754,
16h2E04,
16h6977,
16h0064,
16h4511,
16h6081,
16h4BAD,
16h434B,
16h6C00,
16h4264,
16h2BBB,
16h4B6F,
16h710F,
16h8000,
16h0566,
16h175E,
16h2104,
16h6977,
16h0064,
16h4BAD,
16h434B,
16hFEAE,
16h6C00,
16h6180,
16h6023,
16h710F,
16h177C,
16h7604,
16h636F,
16h0073,
16h4539,
16h4557,
16h7605,
16h636F,
16h3A73,
16hFEA8,
16h434B,
16h6C00,
16h4264,
16h2BDA,
16h6081,
16h4BB2,
16h4BAD,
16h0BD3,
16h700C,
16h1792,
16h6F05,
16h6472,
16h7265,
16h4539,
16h4557,
16h7307,
16h6165,
16h6372,
16h3A68,
16h4BA7,
16h4264,
16h2BEC,
16h6180,
16h4BB2,
16h6A00,
16h0BE6,
16h4539,
16h4557,
16h6407,
16h6665,
16h6E69,
16h3A65,
16h4A31,
16h0BB2,
16h17B8,
16h7309,
16h7465,
16h6F2D,
16h6472,
16h7265,
16h6081,
16h8000,
16h6600,
16h6703,
16h2C02,
16h6103,
16hFEA2,
16h8001,
16h8008,
16h6181,
16h6F03,
16h475F,
16h6F12,
16h6576,
16h2072,
16h6973,
16h657A,
16h6F20,
16h2066,
16h7623,
16h636F,
16h0073,
16hFE90,
16h6180,
16h6081,
16h2C1D,
16h6147,
16h6180,
16h6181,
16h6023,
16h6103,
16h434B,
16h6B8D,
16h6A00,
16h0C12,
16h6180,
16h6023,
16h710F,
16h17EA,
16h6F04,
16h6C6E,
16h0079,
16h8000,
16h6600,
16h0BFA,
16h1842,
16h6104,
16h736C,
16h006F,
16h4BA7,
16h6181,
16h6180,
16h6310,
16h0BFA,
16h1850,
16h7008,
16h6572,
16h6976,
16h756F,
16h0073,
16h4BA7,
16h6180,
16h6103,
16h6A00,
16h0BFA,
16h1862,
16h3E04,
16h6F76,
16h0063,
16h4AF1,
16h6081,
16h4805,
16h4BC1,
16h4B0D,
16h6C00,
16h6147,
16h4BA7,
16h6180,
16h6103,
16h6B8D,
16h6180,
16h0BFA,
16h1878,
16h7705,
16h6469,
16h666F,
16h47F7,
16h4A04,
16h7C0C,
16h189A,
16h760A,
16h636F,
16h6261,
16h6C75,
16h7261,
16h0079,
16h4B83,
16h0C3F,
16h18A8,
16h5F05,
16h7974,
16h6570,
16h6147,
16h0C65,
16h438C,
16h4362,
16h44D7,
16h6B81,
16h2C6B,
16h6B8D,
16h6A00,
16h6147,
16h0C62,
16h6B8D,
16h6103,
16h710F,
16h18BA,
16h6403,
16h2B6D,
16h6181,
16h8004,
16h4566,
16h4511,
16h6147,
16h0C7A,
16h438C,
16h8003,
16h4566,
16h6B81,
16h2C80,
16h6B8D,
16h6A00,
16h6147,
16h0C77,
16h6B8D,
16h710F,
16h18DE,
16h6404,
16h6D75,
16h0070,
16hFE80,
16h6C00,
16h6147,
16h4432,
16h8010,
16h4305,
16h6147,
16h4539,
16h8010,
16h4279,
16h4C71,
16h4155,
16h8002,
16h4518,
16h4C60,
16h6B81,
16h2C9B,
16h6B8D,
16h6A00,
16h6147,
16h0C8D,
16h6B8D,
16h6103,
16h6103,
16h6B8D,
16hFE80,
16h6023,
16h710F,
16h1906,
16h2E02,
16h0073,
16h4539,
16h416A,
16h6A00,
16h800F,
16h6303,
16h6147,
16h6B81,
16h484B,
16h4579,
16h6B81,
16h2CB4,
16h6B8D,
16h6A00,
16h6147,
16h0CAB,
16h6B8D,
16h6103,
16h4557,
16h3C04,
16h6F74,
16h0073,
16h700C,
16h1946,
16h2807,
16h6E3E,
16h6D61,
16h2965,
16h6C00,
16h4264,
16h2CCA,
16h4279,
16h467B,
16h6503,
16h2CC9,
16h4351,
16h0CC0,
16h700F,
16h6103,
16h8000,
16h700C,
16h1978,
16h3E05,
16h616E,
16h656D,
16h6147,
16h4BA7,
16h4264,
16h2CED,
16h6180,
16h6B81,
16h6180,
16h4CC0,
16h4264,
16h2CEB,
16h6147,
16h6A00,
16h6147,
16h0CE0,
16h6103,
16h6B81,
16h2CE6,
16h6B8D,
16h6A00,
16h6147,
16h0CDF,
16h6B8D,
16h6103,
16h6B8D,
16h6B8D,
16h710F,
16h6A00,
16h0CD3,
16h6B8D,
16h6103,
16h8000,
16h700C,
16h199C,
16h7303,
16h6565,
16h47F7,
16h4539,
16h6081,
16h6C00,
16h4264,
16hF00C,
16h6503,
16h2D0D,
16hBFFF,
16h6303,
16h8001,
16h6D03,
16h4CD1,
16h4264,
16h2D06,
16h4511,
16h4B6F,
16h0D0B,
16h6081,
16h6C00,
16hFFFF,
16h6303,
16h4572,
16h434B,
16h0CF6,
16h0273,
16h19E4,
16h2807,
16h6F77,
16h6472,
16h2973,
16h4539,
16h6C00,
16h4264,
16h2D1C,
16h6081,
16h4B6F,
16h4511,
16h4351,
16h0D14,
16h700C,
16h1A1E,
16h7705,
16h726F,
16h7364,
16h4BA7,
16h4264,
16h2D2F,
16h6180,
16h4539,
16h4539,
16h4557,
16h3A01,
16h6081,
16h4BB2,
16h4539,
16h4D13,
16h6A00,
16h0D22,
16h700C,
16h1A3C,
16h7603,
16h7265,
16h8001,
16h8100,
16h4329,
16h8008,
16h720F,
16h1A62,
16h6802,
16h0069,
16h4539,
16h4557,
16h650C,
16h6F66,
16h7472,
16h2068,
16h316A,
16h202B,
16h0076,
16hFE80,
16h6C00,
16h4432,
16h4D33,
16h43F4,
16h4406,
16h4406,
16h802E,
16h43FC,
16h4406,
16h441E,
16h4529,
16hFE80,
16h6023,
16h6103,
16h0539,
16h1A72,
16h6304,
16h6C6F,
16h0064,
16h8002,
16hFE80,
16h8042,
16h45C7,
16h47DF,
16hFEA2,
16h6081,
16hFE90,
16h6023,
16h6103,
16h6081,
16hFEA8,
16h4379,
16h4AA6,
16hC000,
16h434B,
16h6081,
16h4351,
16h6C00,
16h47B9,
16hFEB4,
16h43BC,
16h47E8,
16h0D58,
16h1AAA,
16h3205,
16h766F,
16h7265,
16h6147,
16h6147,
16h4279,
16h6B8D,
16h6B8D,
16h426B,
16h6147,
16h426B,
16h6B8D,
16h700C,
16h1AE2,
16h3205,
16h7773,
16h7061,
16h426B,
16h6147,
16h426B,
16h6B8D,
16h700C,
16h1AFE,
16h3204,
16h696E,
16h0070,
16h426B,
16h6103,
16h426B,
16h710F,
16h1B10,
16h3204,
16h6F72,
16h0074,
16h6180,
16h6147,
16h6147,
16h4D82,
16h6B8D,
16h6B8D,
16h6180,
16h0D82,
16h1B20,
16h6402,
16h003D,
16h6147,
16h426B,
16h6503,
16h6180,
16h6B8D,
16h6503,
16h6403,
16h701C,
16h1B38,
16h6403,
16h3E3C,
16h4D9E,
16h760C,
16h1B4E,
16h6402,
16h002B,
16h426B,
16h6203,
16h6147,
16h6181,
16h6203,
16h6081,
16h426B,
16h6F03,
16h2DBA,
16h6B8D,
16h6310,
16h0DBB,
16h6B8D,
16h700C,
16h1B58,
16h6402,
16h002D,
16h4286,
16h0DAE,
16h1B7A,
16h7303,
16h643E,
16h6081,
16h781C,
16h1B84,
16h6403,
16h2B31,
16h8001,
16h4DC4,
16h0DAE,
16h1B8E,
16h6404,
16h6F78,
16h0072,
16h426B,
16h6503,
16h4155,
16h6503,
16h718C,
16h1B9A,
16h6404,
16h6E61,
16h0064,
16h426B,
16h6303,
16h4155,
16h6303,
16h718C,
16h1BAC,
16h6403,
16h726F,
16h426B,
16h6403,
16h4155,
16h6403,
16h718C,
16h1BBE,
16h6407,
16h6E69,
16h6576,
16h7472,
16h6600,
16h6180,
16h6600,
16h718C,
16h1BCE,
16h6402,
16h003C,
16h426B,
16h4279,
16h6703,
16h2DF9,
16h4273,
16h6F03,
16h0DFB,
16h4D8B,
16h761F,
16h1BE0,
16h6402,
16h003E,
16h4D82,
16h0DF2,
16h1BF8,
16h6403,
16h3D30,
16h6403,
16h701C,
16h1C02,
16h6403,
16h3C30,
16h8000,
16h4DC4,
16h0DF2,
16h1C0C,
16h6404,
16h3C30,
16h003E,
16h4E03,
16h760C,
16h1C18,
16h6403,
16h2A32,
16h4279,
16h0DAE,
16h1C24,
16h6403,
16h2F32,
16h6081,
16h800F,
16h6D03,
16h6147,
16h415D,
16h6180,
16h415D,
16h6B8D,
16h6403,
16h718C,
16h1C2E,
16h6403,
16h2D31,
16h8001,
16h4DC4,
16h4286,
16h0DAE,
16h1C48,
16h6704,
16h7570,
16h003F,
16h80F8,
16h6600,
16h6C00,
16h6010,
16h2E2E,
16h700C,
16h1C56,
16h620B,
16h6361,
16h676B,
16h6F72,
16h6E75,
16h2164,
16h800F,
16h6600,
16h6023,
16h710F,
16h1C6A,
16h7006,
16h7869,
16h6C65,
16h0021,
16h4E2E,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8001,
16h80F8,
16h6600,
16h6023,
16h710F,
16h1C80,
16h720A,
16h6365,
16h6174,
16h676E,
16h656C,
16h0021,
16h4E2E,
16h80FB,
16h6600,
16h6023,
16h6103,
16h80FC,
16h6600,
16h6023,
16h6103,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8002,
16h80F8,
16h6600,
16h6023,
16h710F,
16h1CAE,
16h6C05,
16h6E69,
16h2165,
16h4E2E,
16h80FB,
16h6600,
16h6023,
16h6103,
16h80FC,
16h6600,
16h6023,
16h6103,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8003,
16h80F8,
16h6600,
16h6023,
16h710F,
16h1CF0,
16h6307,
16h7269,
16h6C63,
16h2165,
16h4E2E,
16h80FC,
16h6600,
16h6023,
16h6103,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8004,
16h80F8,
16h6600,
16h6023,
16h710F,
16h1D2C,
16h6206,
16h696C,
16h3174,
16h0021,
16h4E2E,
16h80FE,
16h6600,
16h6023,
16h6103,
16h80FF,
16h6600,
16h6023,
16h6103,
16h80FC,
16h6600,
16h6023,
16h6103,
16h80FD,
16h6600,
16h6023,
16h6103,
16h8005,
16h80F8,
16h6600,
16h6023,
16h710F,
16h1D62,
16h6303,
16h2173,
16h8040,
16h8000,
16h8000,
16h82F7,
16h81DF,
16h0E5D,
16h1D98,
16h7406,
16h7570,
16h7978,
16h0021,
16h80EE,
16h6600,
16h6023,
16h6103,
16h80EF,
16h6600,
16h6023,
16h6103,
16h8001,
16h80EA,
16h6600,
16h6023,
16h710F,
16h1DAA,
16h740E,
16h7570,
16h6F66,
16h6572,
16h7267,
16h756F,
16h646E,
16h0021,
16h80EB,
16h6600,
16h6023,
16h710F,
16h1DCE,
16h740E,
16h7570,
16h6162,
16h6B63,
16h7267,
16h756F,
16h646E,
16h0021,
16h80EC,
16h6600,
16h6023,
16h710F,
16h1DE8,
16h7407,
16h7570,
16h6D65,
16h7469,
16h80ED,
16h6600,
16h6023,
16h6103,
16h8002,
16h80EA,
16h6600,
16h6023,
16h710F,
16h1E02,
16h7406,
16h7570,
16h7363,
16h0021,
16h8000,
16h8000,
16h4ED9,
16h8000,
16h4EEF,
16h8040,
16h4EFC,
16h8960,
16h6147,
16h0F1F,
16h8000,
16h4F05,
16h6B81,
16h2F25,
16h6B8D,
16h6A00,
16h6147,
16h0F1D,
16h6B8D,
16h6103,
16h8000,
16h8000,
16h0ED9,
16h1E1E,
16h7408,
16h7570,
16h7073,
16h6361,
16h0065,
16h435C,
16h0F05,
16h1E56,
16h7409,
16h7570,
16h7073,
16h6361,
16h7365,
16h8000,
16h6B13,
16h6147,
16h0F3D,
16h4F30,
16h6B81,
16h2F43,
16h6B8D,
16h6A00,
16h6147,
16h0F3C,
16h6B8D,
16h710F,
16h1E66,
16h7407,
16h7570,
16h7974,
16h6570,
16h6147,
16h0F4E,
16h438C,
16h4F05,
16h6B81,
16h2F54,
16h6B8D,
16h6A00,
16h6147,
16h0F4C,
16h6B8D,
16h6103,
16h710F,
16h1E8C,
16h7405,
16h7570,
16h242E,
16h438C,
16h0F4A,
16h1EB0,
16h7405,
16h7570,
16h722E,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h4F38,
16h0F4A,
16h1EBC,
16h7406,
16h7570,
16h2E75,
16h0072,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h4F38,
16h0F4A,
16h1ED2,
16h7405,
16h7570,
16h2E75,
16h43F4,
16h440D,
16h441E,
16h4F30,
16h0F4A,
16h1EEE,
16h7404,
16h7570,
16h002E,
16hFE80,
16h6C00,
16h800A,
16h6503,
16h2F89,
16h0F7A,
16h4427,
16h4F30,
16h0F4A,
16h1F00,
16h7405,
16h7570,
16h232E,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h4F83,
16hFE80,
16h6023,
16h710F,
16h1F1A,
16h7406,
16h7570,
16h2E75,
16h0023,
16hFE80,
16h6C00,
16h6180,
16h443B,
16h43F4,
16h440D,
16h441E,
16h4F30,
16h4F4A,
16hFE80,
16h6023,
16h710F,
16h1F32,
16h7407,
16h7570,
16h2E75,
16h2372,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h43F4,
16h440D,
16h441E,
16h6B8D,
16h6181,
16h428F,
16h4F38,
16h4F4A,
16hFE80,
16h6023,
16h710F,
16h1F54,
16h7406,
16h7570,
16h722E,
16h0023,
16hFE80,
16h6C00,
16h426B,
16h426B,
16h443B,
16h6147,
16h4427,
16h6B8D,
16h6181,
16h428F,
16h4F38,
16h4F4A,
16hFE80,
16h6023,
16h710F,
16h1F80,
16h740D,
16h7265,
16h696D,
16h616E,
16h736C,
16h6F68,
16h2177,
16h8001,
16h80DE,
16h6600,
16h6023,
16h710F,
16h1FA8,
16h740D,
16h7265,
16h696D,
16h616E,
16h686C,
16h6469,
16h2165,
16h8000,
16h80DE,
16h6600,
16h6023,
16h710F

        , pad(uninitialized)
    };
    dualport_bram uint16 ram_1[8192] = uninitialized;

    // CYCLE to control each stage
    // CYCLE allows 1 clock cycle for BRAM access and 3 clock cycles for SPRAM access
    uint3 CYCLE = 0;
    
    // UART input FIFO (512 character) as dualport bram (code from @sylefeb)
    dualport_bram uint8 uartInBuffer[512] = uninitialized;
    uint9 uartInBufferNext = 0;
    uint9 uartInBufferTop = 0;
    uint1 uartInHold = 1;

    // UART output FIFO (512 character) as dualport bram (code from @sylefeb)
    dualport_bram uint8 uartOutBuffer[512] = uninitialized;
    uint9 uartOutBufferNext = 0;
    uint9 uartOutBufferTop = 0;
    uint9 newuartOutBufferTop = 0;
    uint1 uartOutHold = 0;
    
    // BRAM for CPU ram write enable mainained low, pulsed high
    ram_0.wenable0 := 0;
    ram_0.wenable1 := 0;
    ram_1.wenable0 := 0;
    ram_1.wenable1 := 0;

    // bram for dstack and rstack write enable, maintained low, pulsed high (code from @sylefeb)
    dstack.wenable         := 0;  
    rstack.wenable         := 0;

    // dual port bram for dtsack and strack
    uartInBuffer.wenable0  := 0;  // always read  on port 0
    uartInBuffer.wenable1  := 1;  // always write on port 1
    uartInBuffer.addr0     := uartInBufferNext; // FIFO reads on next
    uartInBuffer.addr1     := uartInBufferTop;  // FIFO writes on top
    
    uartOutBuffer.wenable0 := 0; // always read  on port 0
    uartOutBuffer.wenable1 := 1; // always write on port 1    
    uartOutBuffer.addr0    := uartOutBufferNext; // FIFO reads on next
    uartOutBuffer.addr1    := uartOutBufferTop;  // FIFO writes on top

    // Setup the UART
    uo.data_in_ready := 0; // maintain low

    // UART input and output buffering
    always {
        // READ from UART if character available and store
        if( ui.data_out_ready ) {
            // writes at uartInBufferTop (code from @sylefeb)
            uartInBuffer.wdata1  = ui.data_out;            
            uartInBufferTop      = uartInBufferTop + 1;
            uartInHold = 1;
        }
    }
    
    // Setup the terminal
    terminal_window.showterminal = 1;
    terminal_window.showcursor = 1;


    // EXECUTE J1 CPU
    while( 1 ) {
        // WRITE to UART if characters in buffer and UART is ready
        if( ~(uartOutBufferNext == uartOutBufferTop) & ~( uo.busy ) ) {
            // reads at uartOutBufferNext (code from @sylefeb)
            uo.data_in      = uartOutBuffer.rdata0; 
            uo.data_in_ready     = 1;
            uartOutBufferNext = uartOutBufferNext + 1;
        }
        // Update UART output buffer top if character has been put into buffer
        uartOutBufferTop = newuartOutBufferTop;        
        
        switch( CYCLE ) {
            // Read stackNext, rStackTop
            case 0: {
                // read dtsack and rstack brams (code from @sylefeb)
                stackNext = dstack.rdata;
                rStackTop = rstack.rdata;
            
                // start READ memoryInput = [stackTop] and instruction = [pc] result ready in 1 cycles
                // PC can only ever be 0 - 8191
                ram_0.addr1 = pc;
                // stackTop could be 0 - 32767 with WORD level access
                ram_0.addr0 = stackTop >> 1;
                ram_1.addr0 = stackTop >> 1;
            }
            case 1: {
                // wait then read the data from RAM
                instruction = ram_0.rdata1;
                if( stackTop > 16383 ) {
                    memoryInput = ram_1.rdata0;
                } else {
                    memoryInput = ram_0.rdata0;
                }
            }
            
            // J1 CPU Instruction Execute
            case 2: {
                // +---------------------------------------------------------------+
                // | F | E | D | C | B | A | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
                // +---------------------------------------------------------------+
                // | 1 |                    LITERAL VALUE                          |
                // +---------------------------------------------------------------+
                // | 0 | 0 | 0 |            BRANCH TARGET ADDRESS                  |
                // +---------------------------------------------------------------+
                // | 0 | 0 | 1 |            CONDITIONAL BRANCH TARGET ADDRESS      |
                // +---------------------------------------------------------------+
                // | 0 | 1 | 0 |            CALL TARGET ADDRESS                    |
                // +---------------------------------------------------------------+
                // | 0 | 1 | 1 |R2P| ALU OPERATION |T2N|T2R|N2A|J1P| RSTACK| DSTACK|
                // +---------------------------------------------------------------+
                // | F | E | D | C | B | A | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
                // +---------------------------------------------------------------+
                // 
                // T   : Top of data stack
                // N   : Next on data stack
                // PC  : Program Counter
                // 
                // LITERAL VALUES : push a value onto the data stack
                // CONDITIONAL    : BRANCHS pop and test the T
                // CALLS          : PC+1 onto the return stack
                // 
                // T2N : Move T to N
                // T2R : Move T to top of return stack
                // N2A : STORE T to memory location addressed by N
                // R2P : Move top of return stack to PC
                // 
                // RSTACK and DSTACK are signed values (twos compliment) that are
                // the stack delta (the amount to increment or decrement the stack
                // by for their respective stacks: return and data)

                if(is_lit) {
                    // LITERAL Push value onto stack
                    newStackTop = immediate;
                    newPC = pcPlusOne;
                    newDSP = dsp + 1;
                    newRSP = rsp;
                } else {
                    switch( callbranch(instruction).is_callbranchalu ) { // BRANCH 0BRANCH CALL ALU
                        case 2b00: {
                            // BRANCH
                            newStackTop = stackTop;
                            newPC = callbranch(instruction).address;
                            newDSP = dsp;
                            newRSP = rsp;
                        }
                        case 2b01: {
                            // 0BRANCH
                            newStackTop = stackNext;
                            newPC = ( stackTop == 0 ) ? callbranch(instruction).address : pcPlusOne;
                            newDSP = dsp - 1;
                            newRSP = rsp;
                        }
                        case 2b10: {
                            // CALL
                            newStackTop = stackTop;
                            newPC = callbranch(instruction).address;
                            newDSP = dsp;
                            newRSP = rsp + 1;
                            rstackWData = pcPlusOne << 1;
                        }
                        case 2b11: {
                            // ALU
                            switch( aluop(instruction).is_j1j1plus ) {
                                case 1b0: {
                                    switch( aluop(instruction).operation ) {
                                        case 4b0000: {newStackTop = stackTop;}
                                        case 4b0001: {newStackTop = stackNext;}
                                        case 4b0010: {newStackTop = stackTop + stackNext;}
                                        case 4b0011: {newStackTop = stackTop & stackNext;}
                                        case 4b0100: {newStackTop = stackTop | stackNext;}
                                        case 4b0101: {newStackTop = stackTop ^ stackNext;}
                                        case 4b0110: {newStackTop = ~stackTop;}
                                        case 4b0111: {newStackTop = {16{(stackNext == stackTop)}};}
                                        case 4b1000: {newStackTop = {16{(__signed(stackNext) < __signed(stackTop))}};}
                                        case 4b1001: {newStackTop = stackNext >> nibbles(stackTop).nibble0;}
                                        case 4b1010: {newStackTop = stackTop - 1;}
                                        case 4b1011: {newStackTop = rStackTop;}
                                        case 4b1100: {
                                        // UART or memoryInput
                                            switch( stackTop ) {
                                                case 16hf000: {
                                                    // INPUT from UART reads at uartInBufferNext (code from @sylefeb)
                                                    newStackTop = { 8b0, uartInBuffer.rdata0 };
                                                    uartInBufferNext = uartInBufferNext + 1;
                                                } 
                                                case 16hf001: {
                                                    // UART status register { 14b0, tx full, rx available }
                                                    newStackTop = {14b0, ( uartOutBufferTop + 1 == uartOutBufferNext ), ~( uartInBufferNext == uartInBufferTop )};
                                                }
                                                case 16hf002: {
                                                    // RGB LED status
                                                    newStackTop = leds;
                                                }
                                                case 16hf003: {
                                                    // user buttons
                                                    newStackTop = {12b0, buttons};
                                                }
                                                case 16hf004: {
                                                    // 1hz timer
                                                    newStackTop = timer1hz;
                                                }
                                                case 16hff07: {
                                                    // GPU Active Status
                                                    newStackTop = gpu_processor.gpu_active;
                                                }
                                                case 16hff20: {
                                                    // Terminal Active Status
                                                    newStackTop = terminal_window.terminal_active;
                                                }
                                                default: {newStackTop = memoryInput;}
                                            }
                                        }
                                        case 4b1101: {newStackTop = stackNext << nibbles(stackTop).nibble0;}
                                        case 4b1110: {newStackTop = {rsp, dsp};}
                                        case 4b1111: {newStackTop = {16{(__unsigned(stackNext) < __unsigned(stackTop))}};}
                                    }
                                }
                                
                                case 1b1: {
                                    switch( aluop(instruction).operation ) {
                                        case 4b0000: {newStackTop = {16{(stackTop == 0)}};}
                                        case 4b0001: {newStackTop = ~{16{(stackTop == 0)}};}
                                        case 4b0010: {newStackTop = ~{16{(stackNext == stackTop)}};}
                                        case 4b0011: {newStackTop = stackTop + 1;}
                                        case 4b0100: {newStackTop = stackTop << 1;}
                                        case 4b0101: {newStackTop = stackTop >> 1;}
                                        case 4b0110: {newStackTop = {16{(__signed(stackNext) > __signed(stackTop))}};}
                                        case 4b0111: {newStackTop = {16{(__unsigned(stackNext) > __unsigned(stackTop))}};}
                                        case 4b1000: {newStackTop = {16{(__signed(stackTop) < __signed(0))}};}
                                        case 4b1001: {newStackTop = {16{(__signed(stackTop) > __signed(0))}};}
                                        case 4b1010: {newStackTop = ( __signed(stackTop) < __signed(0) ) ?  - stackTop : stackTop;}
                                        case 4b1011: {newStackTop = ( __signed(stackNext) > __signed(stackTop) ) ? stackNext : stackTop;}
                                        case 4b1100: {newStackTop = ( __signed(stackNext) < __signed(stackTop) ) ? stackNext : stackTop;}
                                        case 4b1101: {newStackTop = -stackTop;}
                                        case 4b1110: {newStackTop = stackNext - stackTop;}
                                        case 4b1111: {newStackTop = {16{(__signed(stackNext) >= __signed(stackTop))}};}
                                    }
                                }
                            } // ALU Operation
                            
                            // UPDATE newDSP newRSP
                            newDSP = dsp + ddelta;
                            newRSP = rsp + rdelta;
                            rstackWData = stackTop;

                            // Update PC for next instruction, return from call or next instruction
                            newPC = ( aluop(instruction).is_r2pc ) ? rStackTop >> 1 : pcPlusOne;

                            // n2memt mem[t] = n        
                            if( aluop(instruction).is_n2memt ) {
                                switch( stackTop ) {
                                    default: {
                                        // WRITE to SPRAM
                                        if( stackTop > 16383 ) {
                                            ram_1.addr0 = stackTop >> 1;
                                            ram_1.wdata0 = stackNext;
                                            ram_1.wenable0 = 1;
                                        } else {
                                            ram_0.addr0 = stackTop >> 1;
                                            ram_0.wdata0 = stackNext;
                                            ram_0.wenable0 = 1;
                                       }
                                    }
                                    case 16hf000: {
                                        // OUTPUT to UART (dualport blockram code from @sylefeb)
                                        uartOutBuffer.wdata1 = bytes(stackNext).byte0;
                                        newuartOutBufferTop = uartOutBufferTop + 1;
                                    }
                                    case 16hf002: {
                                        // OUTPUT to led
                                        leds = stackNext;
                                    }
                                    case 16hff00: {
                                        // GPU set x
                                        gpu_processor.gpu_x = stackNext;
                                    }
                                    case 16hff01: {
                                        // GPU set y
                                        gpu_processor.gpu_y = stackNext;
                                    }
                                    case 16hff02: {
                                        // GPU set colour
                                        gpu_processor.gpu_colour = stackNext;
                                    }
                                   case 16hff03: {
                                        // GPU set parameter 0
                                        gpu_processor.gpu_param0 = stackNext;
                                    }
                                   case 16hff04: {
                                        // GPU set parameter 1
                                        gpu_processor.gpu_param1 = stackNext;
                                    }
                                   case 16hff05: {
                                        // GPU set parameter 2
                                        gpu_processor.gpu_param2 = stackNext;
                                    }
                                   case 16hff06: {
                                        // GPU set parameter 3
                                        gpu_processor.gpu_param3 = stackNext;
                                    }
                                   case 16hff07: {
                                        // Start GPU
                                        gpu_processor.gpu_write = stackNext;
                                    }
                                    case 16hff10: {
                                        // TPU set x
                                        character_map_window.tpu_x = stackNext;
                                    }
                                    case 16hff11: {
                                        // TPU set y
                                        character_map_window.tpu_y = stackNext;
                                    }
                                    case 16hff12: {
                                        // TPU set char
                                        character_map_window.tpu_character = stackNext;
                                    }
                                    case 16hff13: {
                                        // TPU set background
                                        character_map_window.tpu_background = stackNext;
                                    }
                                    case 16hff14: {
                                        // TPU set foreground
                                        character_map_window.tpu_foreground = stackNext;
                                    }
                                    case 16hff15: {
                                        // Start TPU
                                        character_map_window.tpu_write = stackNext;
                                    }
                                    case 16hff20: {
                                        // Terminal set character
                                        terminal_window.terminal_character = stackNext;
                                        terminal_window.terminal_write = 1;
                                    }
                                    case 16hff21: {
                                        // Terminal set showterminal
                                        terminal_window.showterminal = stackNext;
                                    }
                                    case 16hfff0: {
                                        // Set BACKGROUND colour
                                        background_generator.backgroundcolour = stackNext;
                                        background_generator.backgroundcolour_write = 1;
                                    }
                                    case 16hfff1: {
                                        // Set alternative BACKGROUND colour
                                        background_generator.backgroundcolour_alt = stackNext;
                                        background_generator.backgroundcolour_write = 2;
                                    }
                                    case 16hfff2: {
                                        // Set BACKGROUND colour mode
                                        background_generator.backgroundcolour_mode = stackNext;
                                        background_generator.backgroundcolour_write = 3;
                                    }
                                    case 16hfff3: {
                                        // Set BACKGROUND colour fade level
                                        background_generator.backgroundcolour_fade = stackNext;
                                        background_generator.backgroundcolour_write = 4;
                                    }
                               }
                            }
                        } // ALU
                    }
                }
            } // J1 CPU Instruction Execute

            // update pc and perform mem[t] = n
            case 3: {
                // Write to dstack and rstack
                if( dstackWrite ) {
                    // bram code for dstack (code from @sylefeb)
                    dstack.wenable = 1;
                    dstack.addr    = newDSP;
                    dstack.wdata   = stackTop;
                }
                if( rstackWrite ) {
                    // bram code for rstack (code from @sylefeb)
                    rstack.wenable = 1;
                    rstack.addr    = newRSP;
                    rstack.wdata   = rstackWData;
                }
            }
            
            // Update dsp, rsp, pc, stackTop
            case 4: {
                dsp = newDSP;
                pc = newPC;
                stackTop = newStackTop;
                rsp = newRSP;
                
                // Setup addresses for dstack and rstack brams (code from @sylefeb)
                dstack.addr = newDSP;
                rstack.addr = newRSP;
            
                // reset gpu, tpu, terminal and background
                gpu_processor.gpu_write = 0;
                character_map_window.tpu_write = 0;
                terminal_window.terminal_write = 0;
                background_generator.backgroundcolour_write = 0;
            }
            
            default: {}
        } // switch(CYCLE)
        
    
        // Move to next CYCLE ( 0 to 4 , then back to 0 )
        CYCLE = ( CYCLE == 4 ) ? 0 : CYCLE + 1;
    } // (INIT==3 execute J1 CPU)
}


